{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.min.mjs","sources":["file:///home/user/studio/node_modules/fabric/src/config.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/console.ts","file:///home/user/studio/node_modules/fabric/src/filters/GLProbes/GLProbe.ts","file:///home/user/studio/node_modules/fabric/src/filters/GLProbes/WebGLProbe.ts","file:///home/user/studio/node_modules/fabric/src/env/browser.ts","file:///home/user/studio/node_modules/fabric/src/env/index.ts","file:///home/user/studio/node_modules/fabric/src/cache.ts","file:///home/user/studio/node_modules/fabric/src/constants.ts","file:///home/user/studio/node_modules/fabric/src/ClassRegistry.ts","file:///home/user/studio/node_modules/fabric/src/util/animation/AnimationRegistry.ts","file:///home/user/studio/node_modules/fabric/src/Observable.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/removeFromArray.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/cos.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/sin.ts","file:///home/user/studio/node_modules/fabric/src/Point.ts","file:///home/user/studio/node_modules/fabric/src/Collection.ts","file:///home/user/studio/node_modules/fabric/src/CommonMethods.ts","file:///home/user/studio/node_modules/fabric/src/util/animation/AnimationFrameProvider.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/uid.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/dom.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/radiansDegreesConversion.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/matrix.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/objectEnlive.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/pick.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/toFixed.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/svgExport.ts","file:///home/user/studio/node_modules/fabric/src/util/typeAssertions.ts","file:///home/user/studio/node_modules/fabric/src/util/dom_misc.ts","file:///home/user/studio/node_modules/fabric/src/canvas/DOMManagers/util.ts","file:///home/user/studio/node_modules/fabric/src/canvas/DOMManagers/StaticCanvasDOMManager.ts","file:///home/user/studio/node_modules/fabric/src/canvas/StaticCanvasOptions.ts","file:///home/user/studio/node_modules/fabric/src/canvas/StaticCanvas.ts","file:///home/user/studio/node_modules/fabric/src/util/dom_event.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/boundingBoxFromPoints.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/objectTransforms.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/planeChange.ts","file:///home/user/studio/node_modules/fabric/src/controls/fireEvent.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/resolveOrigin.ts","file:///home/user/studio/node_modules/fabric/src/controls/util.ts","file:///home/user/studio/node_modules/fabric/src/controls/drag.ts","file:///home/user/studio/node_modules/fabric/src/color/color_map.ts","file:///home/user/studio/node_modules/fabric/src/color/util.ts","file:///home/user/studio/node_modules/fabric/src/color/Color.ts","file:///home/user/studio/node_modules/fabric/src/color/constants.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/svgParsing.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Object/FabricObjectSVGExportMixin.ts","file:///home/user/studio/node_modules/fabric/src/parser/getSvgRegex.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Text/constants.ts","file:///home/user/studio/node_modules/fabric/src/parser/constants.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/vectors.ts","file:///home/user/studio/node_modules/fabric/src/Shadow.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/capValue.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Object/defaultValues.ts","file:///home/user/studio/node_modules/fabric/src/util/animation/easing.ts","file:///home/user/studio/node_modules/fabric/src/util/animation/AnimationBase.ts","file:///home/user/studio/node_modules/fabric/src/util/animation/ValueAnimation.ts","file:///home/user/studio/node_modules/fabric/src/util/animation/ArrayAnimation.ts","file:///home/user/studio/node_modules/fabric/src/util/animation/ColorAnimation.ts","file:///home/user/studio/node_modules/fabric/src/util/animation/animate.ts","file:///home/user/studio/node_modules/fabric/src/Intersection.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Object/ObjectGeometry.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Object/Object.ts","file:///home/user/studio/node_modules/fabric/src/controls/wrapWithFireEvent.ts","file:///home/user/studio/node_modules/fabric/src/controls/wrapWithFixedAnchor.ts","file:///home/user/studio/node_modules/fabric/src/controls/changeWidth.ts","file:///home/user/studio/node_modules/fabric/src/controls/controlRendering.ts","file:///home/user/studio/node_modules/fabric/src/controls/Control.ts","file:///home/user/studio/node_modules/fabric/src/controls/rotate.ts","file:///home/user/studio/node_modules/fabric/src/controls/scale.ts","file:///home/user/studio/node_modules/fabric/src/controls/skew.ts","file:///home/user/studio/node_modules/fabric/src/controls/scaleSkew.ts","file:///home/user/studio/node_modules/fabric/src/controls/commonControls.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Object/InteractiveObject.ts","file:///home/user/studio/node_modules/fabric/src/util/applyMixins.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Object/FabricObject.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/isTransparent.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/projectStroke/StrokeProjectionsBase.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/projectStroke/StrokeLineJoinProjections.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/projectStroke/StrokeLineCapProjections.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/projectStroke/index.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/findRight.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/cloneStyles.ts","file:///home/user/studio/node_modules/fabric/src/util/lang_string.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/textStyles.ts","file:///home/user/studio/node_modules/fabric/src/parser/attributes.ts","file:///home/user/studio/node_modules/fabric/src/parser/selectorMatches.ts","file:///home/user/studio/node_modules/fabric/src/parser/elementMatchesRule.ts","file:///home/user/studio/node_modules/fabric/src/parser/doesSomeParentMatch.ts","file:///home/user/studio/node_modules/fabric/src/parser/normalizeAttr.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/cleanupSvgAttribute.ts","file:///home/user/studio/node_modules/fabric/src/parser/parseTransformAttribute.ts","file:///home/user/studio/node_modules/fabric/src/parser/normalizeValue.ts","file:///home/user/studio/node_modules/fabric/src/parser/parseFontDeclaration.ts","file:///home/user/studio/node_modules/fabric/src/parser/parseStyleString.ts","file:///home/user/studio/node_modules/fabric/src/parser/parseStyleAttribute.ts","file:///home/user/studio/node_modules/fabric/src/parser/parseStyleObject.ts","file:///home/user/studio/node_modules/fabric/src/parser/setStrokeFillOpacity.ts","file:///home/user/studio/node_modules/fabric/src/parser/parseAttributes.ts","file:///home/user/studio/node_modules/fabric/src/parser/getGlobalStylesForElement.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Rect.ts","file:///home/user/studio/node_modules/fabric/src/LayoutManager/constants.ts","file:///home/user/studio/node_modules/fabric/src/LayoutManager/LayoutStrategies/utils.ts","file:///home/user/studio/node_modules/fabric/src/LayoutManager/LayoutStrategies/LayoutStrategy.ts","file:///home/user/studio/node_modules/fabric/src/LayoutManager/LayoutStrategies/FitContentLayout.ts","file:///home/user/studio/node_modules/fabric/src/LayoutManager/LayoutManager.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Group.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/groupSVGElements.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/findScaleTo.ts","file:///home/user/studio/node_modules/fabric/src/util/path/regex.ts","file:///home/user/studio/node_modules/fabric/src/util/path/index.ts","file:///home/user/studio/node_modules/fabric/src/util/dom_style.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/mergeClipPaths.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/getRandomInt.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/dom_request.ts","file:///home/user/studio/node_modules/fabric/src/util/transform_matrix_removal.ts","file:///home/user/studio/node_modules/fabric/src/util/misc/rotatePoint.ts","file:///home/user/studio/node_modules/fabric/src/canvas/DOMManagers/CanvasDOMManager.ts","file:///home/user/studio/node_modules/fabric/src/canvas/SelectableCanvas.ts","file:///home/user/studio/node_modules/fabric/src/canvas/CanvasOptions.ts","file:///home/user/studio/node_modules/fabric/src/canvas/TextEditingManager.ts","file:///home/user/studio/node_modules/fabric/src/canvas/Canvas.ts","file:///home/user/studio/node_modules/fabric/src/gradient/constants.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/ifNaN.ts","file:///home/user/studio/node_modules/fabric/src/parser/percent.ts","file:///home/user/studio/node_modules/fabric/src/gradient/parser/parseColorStops.ts","file:///home/user/studio/node_modules/fabric/src/gradient/parser/misc.ts","file:///home/user/studio/node_modules/fabric/src/gradient/parser/parseCoords.ts","file:///home/user/studio/node_modules/fabric/src/gradient/Gradient.ts","file:///home/user/studio/node_modules/fabric/src/Pattern/Pattern.ts","file:///home/user/studio/node_modules/fabric/src/brushes/BaseBrush.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Path.ts","file:///home/user/studio/node_modules/fabric/src/brushes/PencilBrush.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Circle.ts","file:///home/user/studio/node_modules/fabric/src/brushes/CircleBrush.ts","file:///home/user/studio/node_modules/fabric/src/brushes/SprayBrush.ts","file:///home/user/studio/node_modules/fabric/src/brushes/PatternBrush.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Line.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Triangle.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Ellipse.ts","file:///home/user/studio/node_modules/fabric/src/parser/parsePointsAttribute.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Polyline.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Polygon.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Text/StyledText.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Text/TextSVGExportMixin.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Text/Text.ts","file:///home/user/studio/node_modules/fabric/src/shapes/IText/DraggableTextDelegate.ts","file:///home/user/studio/node_modules/fabric/src/shapes/IText/ITextBehavior.ts","file:///home/user/studio/node_modules/fabric/src/shapes/IText/ITextKeyBehavior.ts","file:///home/user/studio/node_modules/fabric/src/shapes/IText/ITextClickBehavior.ts","file:///home/user/studio/node_modules/fabric/src/shapes/IText/constants.ts","file:///home/user/studio/node_modules/fabric/src/util/internals/applyCanvasTransform.ts","file:///home/user/studio/node_modules/fabric/src/shapes/IText/IText.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Textbox.ts","file:///home/user/studio/node_modules/fabric/src/LayoutManager/LayoutStrategies/ClipPathLayout.ts","file:///home/user/studio/node_modules/fabric/src/LayoutManager/LayoutStrategies/FixedLayout.ts","file:///home/user/studio/node_modules/fabric/src/LayoutManager/ActiveSelectionLayoutManager.ts","file:///home/user/studio/node_modules/fabric/src/shapes/ActiveSelection.ts","file:///home/user/studio/node_modules/fabric/src/filters/Canvas2dFilterBackend.ts","file:///home/user/studio/node_modules/fabric/src/filters/WebGLFilterBackend.ts","file:///home/user/studio/node_modules/fabric/src/filters/FilterBackend.ts","file:///home/user/studio/node_modules/fabric/src/shapes/Image.ts","file:///home/user/studio/node_modules/fabric/src/parser/applyViewboxTransform.ts","file:///home/user/studio/node_modules/fabric/src/parser/getTagName.ts","file:///home/user/studio/node_modules/fabric/src/parser/hasInvalidAncestor.ts","file:///home/user/studio/node_modules/fabric/src/parser/getMultipleNodes.ts","file:///home/user/studio/node_modules/fabric/src/parser/recursivelyParseGradientsXlink.ts","file:///home/user/studio/node_modules/fabric/src/parser/getGradientDefs.ts","file:///home/user/studio/node_modules/fabric/src/parser/getCSSRules.ts","file:///home/user/studio/node_modules/fabric/src/parser/elements_parser.ts","file:///home/user/studio/node_modules/fabric/src/parser/parseSVGDocument.ts","file:///home/user/studio/node_modules/fabric/src/parser/parseUseDirectives.ts","file:///home/user/studio/node_modules/fabric/src/parser/loadSVGFromString.ts","file:///home/user/studio/node_modules/fabric/src/parser/loadSVGFromURL.ts","file:///home/user/studio/node_modules/fabric/src/controls/polyControl.ts","file:///home/user/studio/node_modules/fabric/src/controls/pathControl.ts","file:///home/user/studio/node_modules/fabric/src/filters/utils.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/baseFilter.ts","file:///home/user/studio/node_modules/fabric/src/filters/BaseFilter.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/blendColor.ts","file:///home/user/studio/node_modules/fabric/src/filters/BlendColor.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/blendImage.ts","file:///home/user/studio/node_modules/fabric/src/filters/BlendImage.ts","file:///home/user/studio/node_modules/fabric/src/filters/Blur.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/blur.ts","file:///home/user/studio/node_modules/fabric/src/filters/Brightness.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/brightness.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/colorMatrix.ts","file:///home/user/studio/node_modules/fabric/src/filters/ColorMatrix.ts","file:///home/user/studio/node_modules/fabric/src/filters/ColorMatrixFilters.ts","file:///home/user/studio/node_modules/fabric/src/filters/Composed.ts","file:///home/user/studio/node_modules/fabric/src/filters/Contrast.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/constrast.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/convolute.ts","file:///home/user/studio/node_modules/fabric/src/filters/Convolute.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/gamma.ts","file:///home/user/studio/node_modules/fabric/src/filters/Gamma.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/grayscale.ts","file:///home/user/studio/node_modules/fabric/src/filters/Grayscale.ts","file:///home/user/studio/node_modules/fabric/src/filters/HueRotation.ts","file:///home/user/studio/node_modules/fabric/src/filters/Invert.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/invert.ts","file:///home/user/studio/node_modules/fabric/src/filters/Noise.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/noise.ts","file:///home/user/studio/node_modules/fabric/src/filters/Pixelate.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/pixelate.ts","file:///home/user/studio/node_modules/fabric/src/filters/RemoveColor.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/removeColor.ts","file:///home/user/studio/node_modules/fabric/src/filters/Resize.ts","file:///home/user/studio/node_modules/fabric/src/filters/Saturation.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/saturation.ts","file:///home/user/studio/node_modules/fabric/src/filters/Vibrance.ts","file:///home/user/studio/node_modules/fabric/src/filters/shaders/vibrance.ts"],"sourcesContent":["export type TConfiguration = Partial<BaseConfiguration>;\n\nclass BaseConfiguration {\n  /**\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n   * which is unitless and not rendered equally across browsers.\n   *\n   * Values that work quite well (as of October 2017) are:\n   * - Chrome: 1.5\n   * - Edge: 1.75\n   * - Firefox: 0.9\n   * - Safari: 0.95\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default 1\n   */\n  browserShadowBlurConstant = 1;\n\n  /**\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n   */\n  DPI = 96;\n\n  /**\n   * Device Pixel Ratio\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   */\n  devicePixelRatio =\n    typeof window !== 'undefined' ? window.devicePixelRatio : 1; // eslint-disable-line no-restricted-globals\n\n  /**\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  perfLimitSizeTotal = 2097152;\n\n  /**\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  maxCacheSideLimit = 4096;\n\n  /**\n   * Lowest pixel limit for cache canvases, set at 256PX\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  minCacheSideLimit = 256;\n\n  /**\n   * When 'true', style information is not retained when copy/pasting text, making\n   * pasted text use destination style.\n   * Defaults to 'false'.\n   * @type Boolean\n   * @default\n   * @deprecated\n   */\n  disableStyleCopyPaste = false;\n\n  /**\n   * Enable webgl for filtering picture is available\n   * A filtering backend will be initialized, this will both take memory and\n   * time since a default 2048x2048 canvas will be created for the gl context\n   * @since 2.0.0\n   * @type Boolean\n   * @default\n   */\n  enableGLFiltering = true;\n\n  /**\n   * if webgl is enabled and available, textureSize will determine the size\n   * of the canvas backend\n   *\n   * In order to support old hardware set to `2048` to avoid OOM\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  textureSize = 4096;\n\n  /**\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\n   * @type Boolean\n   * @default false\n   */\n  forceGLPutImageData = false;\n\n  /**\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n   * With the standard behaviour of fabric to translate all curves in absolute commands and by not subtracting the starting point from\n   * the curve is very hard to hit any cache.\n   * Enable only if you know why it could be useful.\n   * Candidate for removal/simplification\n   * @default false\n   */\n  cachesBoundsOfCurve = false;\n\n  /**\n   * Map of font files\n   * Map<fontFamily, pathToFile> of font files\n   */\n  fontPaths: Record</** fontFamily */ string, /** pathToFile */ string> = {};\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * Used in exporting methods (`toObject`, `toJSON`, `toSVG`)\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   */\n  NUM_FRACTION_DIGITS = 4;\n}\n\nexport class Configuration extends BaseConfiguration {\n  constructor(config?: TConfiguration) {\n    super();\n    this.configure(config);\n  }\n\n  configure(config: TConfiguration = {}) {\n    Object.assign(this, config);\n  }\n\n  /**\n   * Map<fontFamily, pathToFile> of font files\n   */\n  addFonts(\n    paths: Record</** fontFamily */ string, /** pathToFile */ string> = {},\n  ) {\n    this.fontPaths = {\n      ...this.fontPaths,\n      ...paths,\n    };\n  }\n\n  removeFonts(fontFamilys: string[] = []) {\n    fontFamilys.forEach((fontFamily) => {\n      delete this.fontPaths[fontFamily];\n    });\n  }\n\n  clearFonts() {\n    this.fontPaths = {};\n  }\n\n  restoreDefaults<T extends BaseConfiguration>(keys?: (keyof T)[]) {\n    const defaults = new BaseConfiguration() as T;\n    const config =\n      keys?.reduce((acc, key) => {\n        acc[key] = defaults[key];\n        return acc;\n      }, {} as T) || defaults;\n    this.configure(config);\n  }\n}\n\nexport const config = new Configuration();\n","export const log = (\n  severity: 'log' | 'warn' | 'error',\n  ...optionalParams: any[]\n) =>\n  // eslint-disable-next-line no-restricted-syntax\n  console[severity]('fabric', ...optionalParams);\n\nexport class FabricError extends Error {\n  constructor(message?: string, options?: ErrorOptions) {\n    super(`fabric: ${message}`, options);\n  }\n}\n\nexport class SignalAbortedError extends FabricError {\n  constructor(context: string) {\n    super(`${context} 'options.signal' is in 'aborted' state`);\n  }\n}\n","export type GLPrecision = 'lowp' | 'mediump' | 'highp';\n\nexport abstract class GLProbe {\n  declare GLPrecision: GLPrecision | undefined;\n  abstract queryWebGL(canvas: HTMLCanvasElement): void;\n  abstract isSupported(textureSize: number): boolean;\n}\n","import { log } from '../../util/internals/console';\nimport { GLProbe } from './GLProbe';\nimport type { GLPrecision } from './GLProbe';\n\n/**\n * Lazy initialize WebGL constants\n */\nexport class WebGLProbe extends GLProbe {\n  declare maxTextureSize?: number;\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {GLPrecision} Precision to test can be any of following\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  private testPrecision(\n    gl: WebGLRenderingContext,\n    precision: GLPrecision,\n  ): boolean {\n    const fragmentSource = `precision ${precision} float;\\nvoid main(){}`;\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fragmentShader) {\n      return false;\n    }\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    return !!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\n  }\n\n  /**\n   * query browser for WebGL\n   */\n  queryWebGL(canvas: HTMLCanvasElement) {\n    const gl = canvas.getContext('webgl');\n    if (gl) {\n      this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      this.GLPrecision = (['highp', 'mediump', 'lowp'] as const).find(\n        (precision) => this.testPrecision(gl, precision),\n      );\n      gl.getExtension('WEBGL_lose_context')!.loseContext();\n      log('log', `WebGL: max texture size ${this.maxTextureSize}`);\n    }\n  }\n\n  isSupported(textureSize: number) {\n    return !!this.maxTextureSize && this.maxTextureSize >= textureSize;\n  }\n}\n","/* eslint-disable no-restricted-globals */\nimport { WebGLProbe } from '../filters/GLProbes/WebGLProbe';\nimport type { TCopyPasteData, TFabricEnv } from './types';\n\nconst copyPasteData: TCopyPasteData = {};\n\nexport const getEnv = (): TFabricEnv => {\n  return {\n    document,\n    window,\n    isTouchSupported:\n      'ontouchstart' in window ||\n      'ontouchstart' in document ||\n      (window && window.navigator && window.navigator.maxTouchPoints > 0),\n    WebGLProbe: new WebGLProbe(),\n    dispose() {\n      // noop\n    },\n    copyPasteData,\n  };\n};\n","/**\n * This file is consumed by fabric.\n * The `./node` and `./browser` files define the env variable that is used by this module.\n * The `./browser` module is defined to be the default env and doesn't set the env at all.\n * This is done in order to support isomorphic usage for browser and node applications\n * since window and document aren't defined at time of import in SSR, we can't set env so we avoid it by deferring to the default env.\n */\n\nimport { config } from '../config';\nimport { getEnv as getBrowserEnv } from './browser';\nimport type { TFabricEnv } from './types';\nimport type { DOMWindow } from 'jsdom';\n\nlet env: TFabricEnv;\n\n/**\n * Sets the environment variables used by fabric.\\\n * This is exposed for special cases, such as configuring a test environment, and should be used with care.\n *\n * **CAUTION**: Must be called before using the package.\n *\n * @example\n * <caption>Passing `window` and `document` objects to fabric (in case they are mocked or something)</caption>\n * import { getEnv, setEnv } from 'fabric';\n * // we want fabric to use the `window` and `document` objects exposed by the environment we are running in.\n * setEnv({ ...getEnv(), window, document });\n * // done with setup, using fabric is now safe\n */\nexport const setEnv = (value: TFabricEnv) => {\n  env = value;\n};\n\n/**\n * In order to support SSR we **MUST** access the browser env only after the window has loaded\n */\nexport const getEnv = () => env || (env = getBrowserEnv());\n\nexport const getFabricDocument = (): Document => getEnv().document;\n\nexport const getFabricWindow = (): (Window & typeof globalThis) | DOMWindow =>\n  getEnv().window;\n\n/**\n * @returns the config value if defined, fallbacks to the environment value\n */\nexport const getDevicePixelRatio = () =>\n  Math.max(config.devicePixelRatio ?? getFabricWindow().devicePixelRatio, 1);\n","import { config } from './config';\nimport type { TRectBounds } from './typedefs';\n\nexport class Cache {\n  /**\n   * Cache of widths of chars in text rendering.\n   */\n  charWidthsCache: Record<\n    /** fontFamily */ string,\n    Record<\n      /** fontStyleCacheKey */ string,\n      Record</** char */ string, /** width */ number>\n    >\n  > = {};\n\n  /**\n   * @return {Object} reference to cache\n   */\n  getFontCache({\n    fontFamily,\n    fontStyle,\n    fontWeight,\n  }: {\n    fontFamily: string;\n    fontStyle: string;\n    fontWeight: string | number;\n  }) {\n    fontFamily = fontFamily.toLowerCase();\n    if (!this.charWidthsCache[fontFamily]) {\n      this.charWidthsCache[fontFamily] = {};\n    }\n    const fontCache = this.charWidthsCache[fontFamily];\n    const cacheKey = `${fontStyle.toLowerCase()}_${(\n      fontWeight + ''\n    ).toLowerCase()}`;\n    if (!fontCache[cacheKey]) {\n      fontCache[cacheKey] = {};\n    }\n    return fontCache[cacheKey];\n  }\n\n  /**\n   * Clear char widths cache for the given font family or all the cache if no\n   * fontFamily is specified.\n   * Use it if you know you are loading fonts in a lazy way and you are not waiting\n   * for custom fonts to load properly when adding text objects to the canvas.\n   * If a text object is added when its own font is not loaded yet, you will get wrong\n   * measurement and so wrong bounding boxes.\n   * After the font cache is cleared, either change the textObject text content or call\n   * initDimensions() to trigger a recalculation\n   * @param {String} [fontFamily] font family to clear\n   */\n  clearFontCache(fontFamily?: string) {\n    fontFamily = (fontFamily || '').toLowerCase();\n    if (!fontFamily) {\n      this.charWidthsCache = {};\n    } else if (this.charWidthsCache[fontFamily]) {\n      delete this.charWidthsCache[fontFamily];\n    }\n  }\n\n  /**\n   * Given current aspect ratio, determines the max width and height that can\n   * respect the total allowed area for the cache.\n   * @param {number} ar aspect ratio\n   * @return {number[]} Limited dimensions X and Y\n   */\n  limitDimsByArea(ar: number) {\n    const { perfLimitSizeTotal } = config;\n    const roughWidth = Math.sqrt(perfLimitSizeTotal * ar);\n    // we are not returning a point on purpose, to avoid circular dependencies\n    // this is an internal utility\n    return [\n      Math.floor(roughWidth),\n      Math.floor(perfLimitSizeTotal / roughWidth),\n    ];\n  }\n\n  /**\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n   * you do not get any speed benefit and you get a big object in memory.\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n   * can eventually clear it.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  boundsOfCurveCache: Record<string, TRectBounds> = {};\n}\n\nexport const cache = new Cache();\n","import type { TMat2D } from './typedefs';\n// use this syntax so babel plugin see this import here\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\nexport const halfPI = Math.PI / 2;\nexport const twoMathPi = Math.PI * 2;\nexport const PiBy180 = Math.PI / 180;\n\nexport const iMatrix = Object.freeze([1, 0, 0, 1, 0, 0]) as TMat2D;\nexport const DEFAULT_SVG_FONT_SIZE = 16;\nexport const ALIASING_LIMIT = 2;\n\n/* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\nexport const kRect = 1 - 0.5522847498;\n\nexport const CENTER = 'center';\nexport const LEFT = 'left';\nexport const TOP = 'top';\nexport const BOTTOM = 'bottom';\nexport const RIGHT = 'right';\nexport const NONE = 'none';\n\nexport const reNewline = /\\r?\\n/;\n\nexport const MOVING = 'moving';\nexport const SCALING = 'scaling';\nexport const ROTATING = 'rotating';\nexport const ROTATE = 'rotate';\nexport const SKEWING = 'skewing';\nexport const RESIZING = 'resizing';\nexport const MODIFY_POLY = 'modifyPoly';\nexport const MODIFY_PATH = 'modifyPath';\nexport const CHANGED = 'changed';\nexport const SCALE = 'scale';\nexport const SCALE_X = 'scaleX';\nexport const SCALE_Y = 'scaleY';\nexport const SKEW_X = 'skewX';\nexport const SKEW_Y = 'skewY';\nexport const FILL = 'fill';\nexport const STROKE = 'stroke';\nexport const MODIFIED = 'modified';\n","import { FabricError } from './util/internals/console';\n\n/*\n * This Map connects the objects type value with their\n * class implementation. It used from any object to understand which are\n * the classes to enlive when requesting a object.type = 'path' for example.\n * Objects uses it for clipPath, Canvas uses it for everything.\n * This is necessary for generic code to run and enlive instances from serialized representation.\n * You can customize which classes get enlived from SVG parsing using this classRegistry.\n * The Registry start empty and gets filled in depending which files you import.\n * If you want to be able to parse arbitrary SVGs or JSON representation of canvases, coming from\n * different sources you will need to import all fabric because you may need all classes.\n */\n\nexport const JSON = 'json';\nexport const SVG = 'svg';\n\nexport class ClassRegistry {\n  declare [JSON]: Map<string, any>;\n  declare [SVG]: Map<string, any>;\n\n  constructor() {\n    this[JSON] = new Map();\n    this[SVG] = new Map();\n  }\n\n  has(classType: string): boolean {\n    return this[JSON].has(classType);\n  }\n\n  getClass<T>(classType: string): T {\n    const constructor = this[JSON].get(classType);\n    if (!constructor) {\n      throw new FabricError(`No class registered for ${classType}`);\n    }\n    return constructor;\n  }\n\n  setClass(classConstructor: any, classType?: string) {\n    if (classType) {\n      this[JSON].set(classType, classConstructor);\n    } else {\n      this[JSON].set(classConstructor.type, classConstructor);\n      // legacy\n      // @TODO: needs to be removed in fabric 7 or 8\n      this[JSON].set(classConstructor.type.toLowerCase(), classConstructor);\n    }\n  }\n\n  getSVGClass(SVGTagName: string): any {\n    return this[SVG].get(SVGTagName);\n  }\n\n  setSVGClass(classConstructor: any, SVGTagName?: string) {\n    this[SVG].set(\n      SVGTagName ?? classConstructor.type.toLowerCase(),\n      classConstructor,\n    );\n  }\n}\n\nexport const classRegistry = new ClassRegistry();\n","import type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type { AnimationBase } from './AnimationBase';\n\n/**\n * Array holding all running animations\n */\nclass AnimationRegistry extends Array<AnimationBase> {\n  /**\n   * Remove a single animation using an animation context\n   * @param {AnimationBase} context\n   */\n  remove(context: AnimationBase) {\n    const index = this.indexOf(context);\n    index > -1 && this.splice(index, 1);\n  }\n\n  /**\n   * Cancel all running animations on the next frame\n   */\n  cancelAll() {\n    const animations = this.splice(0);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations attached to a canvas on the next frame\n   * @param {StaticCanvas} canvas\n   */\n  cancelByCanvas(canvas: StaticCanvas) {\n    if (!canvas) {\n      return [];\n    }\n    const animations = this.filter(\n      (animation) =>\n        animation.target === canvas ||\n        (typeof animation.target === 'object' &&\n          (animation.target as FabricObject)?.canvas === canvas),\n    );\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations for target on the next frame\n   * @param target\n   */\n  cancelByTarget(target: AnimationBase['target']) {\n    if (!target) {\n      return [];\n    }\n    const animations = this.filter((animation) => animation.target === target);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n}\n\nexport const runningAnimations = new AnimationRegistry();\n","export type TEventCallback<T = any> = (options: T) => any;\n\ntype EventRegistryObject<E> = {\n  [K in keyof E]?: TEventCallback<E[K]>;\n};\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n * @see {@link http://fabricjs.com/events|Events demo}\n */\nexport class Observable<EventSpec> {\n  private __eventListeners: Record<keyof EventSpec, TEventCallback[]> =\n    {} as Record<keyof EventSpec, TEventCallback[]>;\n\n  /**\n   * Observes specified event\n   * @alias on\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  on(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (!this.__eventListeners) {\n      this.__eventListeners = {} as Record<keyof EventSpec, TEventCallback[]>;\n    }\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this.on(eventName as K, handler as TEventCallback);\n      });\n      return () => this.off(arg0);\n    } else if (handler) {\n      const eventName = arg0;\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n      return () => this.off(eventName, handler);\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * Observes specified event **once**\n   * @alias once\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  once(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      const disposers: VoidFunction[] = [];\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        disposers.push(this.once(eventName as K, handler as TEventCallback));\n      });\n      return () => disposers.forEach((d) => d());\n    } else if (handler) {\n      const disposer = this.on<K, E>(\n        arg0,\n        function onceHandler(this: Observable<EventSpec>, ...args) {\n          handler.call(this, ...args);\n          disposer();\n        },\n      );\n      return disposer;\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} eventName\n   * @param {Function} [handler]\n   */\n  private _removeEventListener<K extends keyof EventSpec>(\n    eventName: K,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      const eventListener = this.__eventListeners[eventName];\n      const index = eventListener.indexOf(handler);\n      index > -1 && eventListener.splice(index, 1);\n    } else {\n      this.__eventListeners[eventName] = [];\n    }\n  }\n\n  /**\n   * Unsubscribe all event listeners for eventname.\n   * Do not use this pattern. You could kill internal fabricJS events.\n   * We know we should have protected events for internal flows, but we don't have yet\n   * @deprecated\n   * @param {string} eventName event name (eg. 'after:render')\n   */\n  off<K extends keyof EventSpec>(eventName: K): void;\n  /**\n   * unsubscribe an event listener\n   * @param {string} eventName event name (eg. 'after:render')\n   * @param {TEventCallback} handler event listener to unsubscribe\n   */\n  off<K extends keyof EventSpec>(eventName: K, handler: TEventCallback): void;\n  /**\n   * unsubscribe event listeners\n   * @param handlers handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   */\n  off(handlers: EventRegistryObject<EventSpec>): void;\n  /**\n   * unsubscribe all event listeners\n   */\n  off(): void;\n  off<K extends keyof EventSpec>(\n    arg0?: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (typeof arg0 === 'undefined') {\n      for (const eventName in this.__eventListeners) {\n        this._removeEventListener(eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (typeof arg0 === 'object') {\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this._removeEventListener(eventName as K, handler as TEventCallback);\n      });\n    } else {\n      this._removeEventListener(arg0, handler);\n    }\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   */\n  fire<K extends keyof EventSpec>(eventName: K, options?: EventSpec[K]) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    const listenersForEvent = this.__eventListeners[eventName]?.concat();\n    if (listenersForEvent) {\n      for (let i = 0; i < listenersForEvent.length; i++) {\n        listenersForEvent[i].call(this, options || {});\n      }\n    }\n  }\n}\n","/**\n * Removes value from an array.\n * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n * @param {Array} array\n * @param {*} value\n * @return {Array} original array\n */\nexport const removeFromArray = <T>(array: T[], value: T): T[] => {\n  const idx = array.indexOf(value);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n  return array;\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the cosin value for angle.\n */\nexport const cos = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 1;\n  }\n  const angleSlice = Math.abs(angle) / halfPI;\n  switch (angleSlice) {\n    case 1:\n    case 3:\n      return 0;\n    case 2:\n      return -1;\n  }\n  return Math.cos(angle);\n};\n","import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the sin value for angle.\n */\nexport const sin = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 0;\n  }\n  const angleSlice = angle / halfPI;\n  const value = Math.sign(angle);\n  switch (angleSlice) {\n    case 1:\n      return value;\n    case 2:\n      return 0;\n    case 3:\n      return -value;\n  }\n  return Math.sin(angle);\n};\n","import type { TMat2D, TRadian } from './typedefs';\nimport { cos } from './util/misc/cos';\nimport { sin } from './util/misc/sin';\n\nexport interface XY {\n  x: number;\n  y: number;\n}\n\n/**\n * Adaptation of work of Kevin Lindsey(kevin@kevlindev.com)\n */\nexport class Point implements XY {\n  declare x: number;\n\n  declare y: number;\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(point?: XY);\n  constructor(arg0: number | XY = 0, y = 0) {\n    if (typeof arg0 === 'object') {\n      this.x = arg0.x;\n      this.y = arg0.y;\n    } else {\n      this.x = arg0;\n      this.y = y;\n    }\n  }\n\n  /**\n   * Adds another point to this one and returns another one\n   * @param {XY} that\n   * @return {Point} new Point instance with added values\n   */\n  add(that: XY): Point {\n    return new Point(this.x + that.x, this.y + that.y);\n  }\n\n  /**\n   * Adds another point to this one\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  addEquals(that: XY): Point {\n    this.x += that.x;\n    this.y += that.y;\n    return this;\n  }\n\n  /**\n   * Adds value to this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point} new Point with added value\n   */\n  scalarAdd(scalar: number): Point {\n    return new Point(this.x + scalar, this.y + scalar);\n  }\n\n  /**\n   * Adds value to this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarAddEquals(scalar: number): Point {\n    this.x += scalar;\n    this.y += scalar;\n    return this;\n  }\n\n  /**\n   * Subtracts another point from this point and returns a new one\n   * @param {XY} that\n   * @return {Point} new Point object with subtracted values\n   */\n  subtract(that: XY): Point {\n    return new Point(this.x - that.x, this.y - that.y);\n  }\n\n  /**\n   * Subtracts another point from this point\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  subtractEquals(that: XY): Point {\n    this.x -= that.x;\n    this.y -= that.y;\n    return this;\n  }\n\n  /**\n   * Subtracts value from this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarSubtract(scalar: number): Point {\n    return new Point(this.x - scalar, this.y - scalar);\n  }\n\n  /**\n   * Subtracts value from this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarSubtractEquals(scalar: number): Point {\n    this.x -= scalar;\n    this.y -= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this point by another value and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  multiply(that: XY): Point {\n    return new Point(this.x * that.x, this.y * that.y);\n  }\n\n  /**\n   * Multiplies this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarMultiply(scalar: number): Point {\n    return new Point(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Multiplies this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarMultiplyEquals(scalar: number): Point {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this point by another and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  divide(that: XY): Point {\n    return new Point(this.x / that.x, this.y / that.y);\n  }\n\n  /**\n   * Divides this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarDivide(scalar: number): Point {\n    return new Point(this.x / scalar, this.y / scalar);\n  }\n\n  /**\n   * Divides this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarDivideEquals(scalar: number): Point {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n\n  /**\n   * Returns true if this point is equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  eq(that: XY): boolean {\n    return this.x === that.x && this.y === that.y;\n  }\n\n  /**\n   * Returns true if this point is less than another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lt(that: XY): boolean {\n    return this.x < that.x && this.y < that.y;\n  }\n\n  /**\n   * Returns true if this point is less than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lte(that: XY): boolean {\n    return this.x <= that.x && this.y <= that.y;\n  }\n\n  /**\n\n   * Returns true if this point is greater another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gt(that: XY): boolean {\n    return this.x > that.x && this.y > that.y;\n  }\n\n  /**\n   * Returns true if this point is greater than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gte(that: XY): boolean {\n    return this.x >= that.x && this.y >= that.y;\n  }\n\n  /**\n   * Returns new point which is the result of linear interpolation with this one and another one\n   * @param {XY} that\n   * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n   * @return {Point}\n   */\n  lerp(that: XY, t = 0.5): Point {\n    t = Math.max(Math.min(1, t), 0);\n    return new Point(\n      this.x + (that.x - this.x) * t,\n      this.y + (that.y - this.y) * t,\n    );\n  }\n\n  /**\n   * Returns distance from this point and another one\n   * @param {XY} that\n   * @return {Number}\n   */\n  distanceFrom(that: XY): number {\n    const dx = this.x - that.x,\n      dy = this.y - that.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * Returns the point between this point and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  midPointFrom(that: XY): Point {\n    return this.lerp(that);\n  }\n\n  /**\n   * Returns a new point which is the min of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  min(that: XY): Point {\n    return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n  }\n\n  /**\n   * Returns a new point which is the max of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  max(that: XY): Point {\n    return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n  }\n\n  /**\n   * Returns string representation of this point\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  /**\n   * Sets x/y of this point\n   * @param {Number} x\n   * @param {Number} y\n   * @chainable\n   */\n  setXY(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x of this point\n   * @param {Number} x\n   * @chainable\n   */\n  setX(x: number) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets y of this point\n   * @param {Number} y\n   * @chainable\n   */\n  setY(y: number) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x/y of this point from another point\n   * @param {XY} that\n   * @chainable\n   */\n  setFromPoint(that: XY) {\n    this.x = that.x;\n    this.y = that.y;\n    return this;\n  }\n\n  /**\n   * Swaps x/y of this point and another point\n   * @param {XY} that\n   */\n  swap(that: XY) {\n    const x = this.x,\n      y = this.y;\n    this.x = that.x;\n    this.y = that.y;\n    that.x = x;\n    that.y = y;\n  }\n\n  /**\n   * return a cloned instance of the point\n   * @return {Point}\n   */\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Rotates `point` around `origin` with `radians`\n   * @static\n   * @memberOf fabric.util\n   * @param {XY} origin The origin of the rotation\n   * @param {TRadian} radians The radians of the angle for the rotation\n   * @return {Point} The new rotated point\n   */\n  rotate(radians: TRadian, origin: XY = ZERO): Point {\n    // TODO benchmark and verify the add and subtract how much cost\n    // and then in case early return if no origin is passed\n    const sinus = sin(radians),\n      cosinus = cos(radians);\n    const p = this.subtract(origin);\n    const rotated = new Point(\n      p.x * cosinus - p.y * sinus,\n      p.x * sinus + p.y * cosinus,\n    );\n    return rotated.add(origin);\n  }\n\n  /**\n   * Apply transform t to point p\n   * @static\n   * @memberOf fabric.util\n   * @param  {TMat2D} t The transform\n   * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n   * @return {Point} The transformed point\n   */\n  transform(t: TMat2D, ignoreOffset = false): Point {\n    return new Point(\n      t[0] * this.x + t[2] * this.y + (ignoreOffset ? 0 : t[4]),\n      t[1] * this.x + t[3] * this.y + (ignoreOffset ? 0 : t[5]),\n    );\n  }\n}\n\nexport const ZERO = new Point(0, 0);\n","import type { Constructor, TBBox } from './typedefs';\nimport { removeFromArray } from './util/internals/removeFromArray';\nimport { Point } from './Point';\nimport type { ActiveSelection } from './shapes/ActiveSelection';\nimport type { Group } from './shapes/Group';\nimport type { InteractiveFabricObject } from './shapes/Object/InteractiveObject';\nimport type { FabricObject } from './shapes/Object/FabricObject';\n\nexport const isCollection = (\n  fabricObject?: FabricObject,\n): fabricObject is Group | ActiveSelection => {\n  return !!fabricObject && Array.isArray((fabricObject as Group)._objects);\n};\n\nexport function createCollectionMixin<TBase extends Constructor>(Base: TBase) {\n  class Collection extends Base {\n    /**\n     * @type {FabricObject[]}\n     * @TODO needs to end up in the constructor too\n     */\n    _objects: FabricObject[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectAdded(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectRemoved(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onStackOrderChanged(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    /**\n     * Adds objects to collection\n     * Objects should be instances of (or inherit from) FabricObject\n     * @param {...FabricObject[]} objects to add\n     * @returns {number} new array length\n     */\n    add(...objects: FabricObject[]): number {\n      const size = this._objects.push(...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return size;\n    }\n\n    /**\n     * Inserts an object into collection at specified index\n     * @param {number} index Index to insert object at\n     * @param {...FabricObject[]} objects Object(s) to insert\n     * @returns {number} new array length\n     */\n    insertAt(index: number, ...objects: FabricObject[]) {\n      this._objects.splice(index, 0, ...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return this._objects.length;\n    }\n\n    /**\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * @private\n     * @param {...FabricObject[]} objects objects to remove\n     * @returns {FabricObject[]} removed objects\n     */\n    remove(...objects: FabricObject[]) {\n      const array = this._objects,\n        removed: FabricObject[] = [];\n      objects.forEach((object) => {\n        const index = array.indexOf(object);\n        // only call onObjectRemoved if an object was actually removed\n        if (index !== -1) {\n          array.splice(index, 1);\n          removed.push(object);\n          this._onObjectRemoved(object);\n        }\n      });\n      return removed;\n    }\n\n    /**\n     * Executes given function for each object in this group\n     * A simple shortcut for getObjects().forEach, before es6 was more complicated,\n     * now is just a shortcut.\n     * @param {Function} callback\n     *                   Callback invoked with current object as first argument,\n     *                   index - as second and an array of all objects - as third.\n     */\n    forEachObject(\n      callback: (\n        object: FabricObject,\n        index: number,\n        array: FabricObject[],\n      ) => any,\n    ) {\n      this.getObjects().forEach((object, index, objects) =>\n        callback(object, index, objects),\n      );\n    }\n\n    /**\n     * Returns an array of children objects of this instance\n     * @param {...String} [types] When specified, only objects of these types are returned\n     * @return {Array}\n     */\n    getObjects(...types: string[]) {\n      if (types.length === 0) {\n        return [...this._objects];\n      }\n      return this._objects.filter((o) => o.isType(...types));\n    }\n\n    /**\n     * Returns object at specified index\n     * @param {Number} index\n     * @return {Object} object at index\n     */\n    item(index: number) {\n      return this._objects[index];\n    }\n\n    /**\n     * Returns true if collection contains no objects\n     * @return {Boolean} true if collection is empty\n     */\n    isEmpty() {\n      return this._objects.length === 0;\n    }\n\n    /**\n     * Returns a size of a collection (i.e: length of an array containing its objects)\n     * @return {Number} Collection size\n     */\n    size() {\n      return this._objects.length;\n    }\n\n    /**\n     * Returns true if collection contains an object.\\\n     * **Prefer using {@link FabricObject#isDescendantOf} for performance reasons**\n     * instead of `a.contains(b)` use `b.isDescendantOf(a)`\n     * @param {Object} object Object to check against\n     * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n     * @return {Boolean} `true` if collection contains an object\n     */\n    contains(object: FabricObject, deep?: boolean): boolean {\n      if (this._objects.includes(object)) {\n        return true;\n      } else if (deep) {\n        return this._objects.some(\n          (obj) =>\n            obj instanceof Collection &&\n            (obj as unknown as Collection).contains(object, true),\n        );\n      }\n      return false;\n    }\n\n    /**\n     * Returns number representation of a collection complexity\n     * @return {Number} complexity\n     */\n    complexity() {\n      return this._objects.reduce((memo, current) => {\n        memo += current.complexity ? current.complexity() : 0;\n        return memo;\n      }, 0);\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectToBack(object: FabricObject) {\n      if (!object || object === this._objects[0]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectToFront(object: FabricObject) {\n      if (!object || object === this._objects[this._objects.length - 1]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, `intersecting` allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectBackwards(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== 0) {\n        // if object is not on the bottom of stack\n        const newIdx = this.findNewLowerIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectForward(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== this._objects.length - 1) {\n        // if object is not on top of stack (last item in an array)\n        const newIdx = this.findNewUpperIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {number} index Position to move to\n     * @returns {boolean} true if change occurred\n     */\n    moveObjectTo(object: FabricObject, index: number) {\n      if (object === this._objects[index]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    findNewLowerIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse down the stack looking for the nearest intersecting object\n        for (let i = idx - 1; i >= 0; --i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    }\n\n    findNewUpperIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse up the stack looking for the nearest intersecting object\n        for (let i = idx + 1; i < this._objects.length; ++i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    }\n\n    /**\n     * Given a bounding box, return all the objects of the collection that are contained in the bounding box.\n     * If `includeIntersecting` is true, return also the objects that intersect the bounding box as well.\n     * This is meant to work with selection. Is not a generic method.\n     * @param {TBBox} bbox a bounding box in scene coordinates\n     * @param {{ includeIntersecting?: boolean }} options an object with includeIntersecting\n     * @returns array of objects contained in the bounding box, ordered from top to bottom stacking wise\n     */\n    collectObjects(\n      { left, top, width, height }: TBBox,\n      { includeIntersecting = true }: { includeIntersecting?: boolean } = {},\n    ) {\n      const objects: InteractiveFabricObject[] = [],\n        tl = new Point(left, top),\n        br = tl.add(new Point(width, height));\n\n      // we iterate reverse order to collect top first in case of click.\n      for (let i = this._objects.length - 1; i >= 0; i--) {\n        const object = this._objects[i] as unknown as InteractiveFabricObject;\n        if (\n          object.selectable &&\n          object.visible &&\n          ((includeIntersecting && object.intersectsWithRect(tl, br)) ||\n            object.isContainedWithinRect(tl, br) ||\n            (includeIntersecting && object.containsPoint(tl)) ||\n            (includeIntersecting && object.containsPoint(br)))\n        ) {\n          objects.push(object);\n        }\n      }\n\n      return objects;\n    }\n  }\n\n  // https://github.com/microsoft/TypeScript/issues/32080\n  return Collection as typeof Collection & TBase;\n}\n","import { Observable } from './Observable';\n\nexport class CommonMethods<EventSpec> extends Observable<EventSpec> {\n  /**\n   * Sets object's properties from options, for initialization only\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected _setOptions(options: any = {}) {\n    for (const prop in options) {\n      this.set(prop, options[prop]);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setObject(obj: Record<string, any>) {\n    for (const prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  }\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   */\n  set(key: string | Record<string, any>, value?: any) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    } else {\n      this._set(key, value);\n    }\n    return this;\n  }\n\n  _set(key: string, value: any) {\n    this[key as keyof this] = value;\n  }\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   */\n  toggle(property: string) {\n    const value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  }\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get(property: string): any {\n    return this[property as keyof this];\n  }\n}\n","import { getFabricWindow } from '../../env';\n\nexport function requestAnimFrame(callback: FrameRequestCallback): number {\n  return getFabricWindow().requestAnimationFrame(callback);\n}\n\nexport function cancelAnimFrame(handle: number): void {\n  return getFabricWindow().cancelAnimationFrame(handle);\n}\n","let id = 0;\n\nexport const uid = () => id++;\n","import { getFabricDocument } from '../../env';\nimport type { ImageFormat, TSize } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElementFor(canvas);\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\n/**\n * Creates a canvas element as big as another\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElementFor = (\n  canvas: HTMLCanvasElement | ImageData | HTMLImageElement | TSize,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number,\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string,\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n\nexport const toBlob = (\n  canvasEl: HTMLCanvasElement,\n  format?: ImageFormat,\n  quality?: number,\n) =>\n  new Promise((resolve, _) => {\n    canvasEl.toBlob(resolve, `image/${format}`, quality);\n  }) as Promise<Blob | null>;\n","import type { TRadian, TDegree } from '../../typedefs';\nimport { PiBy180 } from '../../constants';\n\n/**\n * Transforms degrees to radians.\n * @param {TDegree} degrees value in degrees\n * @return {TRadian} value in radians\n */\nexport const degreesToRadians = (degrees: TDegree): TRadian =>\n  (degrees * PiBy180) as TRadian;\n\n/**\n * Transforms radians to degrees.\n * @param {TRadian} radians value in radians\n * @return {TDegree} value in degrees\n */\nexport const radiansToDegrees = (radians: TRadian): TDegree =>\n  (radians / PiBy180) as TDegree;\n","import { iMatrix } from '../../constants';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TDegree, TRadian, TMat2D } from '../../typedefs';\nimport { cos } from './cos';\nimport { degreesToRadians, radiansToDegrees } from './radiansDegreesConversion';\nimport { sin } from './sin';\n\nexport type TRotateMatrixArgs = {\n  angle?: TDegree;\n};\n\nexport type TTranslateMatrixArgs = {\n  translateX?: number;\n  translateY?: number;\n};\n\nexport type TScaleMatrixArgs = {\n  scaleX?: number;\n  scaleY?: number;\n  flipX?: boolean;\n  flipY?: boolean;\n  skewX?: TDegree;\n  skewY?: TDegree;\n};\n\nexport type TComposeMatrixArgs = TTranslateMatrixArgs &\n  TRotateMatrixArgs &\n  TScaleMatrixArgs;\n\nexport type TQrDecomposeOut = Required<\n  Omit<TComposeMatrixArgs, 'flipX' | 'flipY'>\n>;\n\nexport const isIdentityMatrix = (mat: TMat2D) =>\n  mat.every((value, index) => value === iMatrix[index]);\n\n/**\n * Apply transform t to point p\n * @deprecated use {@link Point#transform}\n * @param  {Point | XY} p The point to transform\n * @param  {Array} t The transform\n * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n * @return {Point} The transformed point\n */\nexport const transformPoint = (\n  p: XY,\n  t: TMat2D,\n  ignoreOffset?: boolean,\n): Point => new Point(p).transform(t, ignoreOffset);\n\n/**\n * Invert transformation t\n * @param {Array} t The transform\n * @return {Array} The inverted transform\n */\nexport const invertTransform = (t: TMat2D): TMat2D => {\n  const a = 1 / (t[0] * t[3] - t[1] * t[2]),\n    r = [a * t[3], -a * t[1], -a * t[2], a * t[0], 0, 0] as TMat2D,\n    { x, y } = new Point(t[4], t[5]).transform(r, true);\n  r[4] = -x;\n  r[5] = -y;\n  return r;\n};\n\n/**\n * Multiply matrix A by matrix B to nest transformations\n * @param  {TMat2D} a First transformMatrix\n * @param  {TMat2D} b Second transformMatrix\n * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n * @return {TMat2D} The product of the two transform matrices\n */\nexport const multiplyTransformMatrices = (\n  a: TMat2D,\n  b: TMat2D,\n  is2x2?: boolean,\n): TMat2D =>\n  [\n    a[0] * b[0] + a[2] * b[1],\n    a[1] * b[0] + a[3] * b[1],\n    a[0] * b[2] + a[2] * b[3],\n    a[1] * b[2] + a[3] * b[3],\n    is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n    is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5],\n  ] as TMat2D;\n\n/**\n * Multiplies {@link TMat2D} such that a matrix defines the plane for the rest of the matrices **after** it\n *\n * `multiplyTransformMatrixArray([A, B, C, D])` is equivalent to `A(B(C(D)))`\n *\n * @param matrices an array of matrices\n * @param [is2x2] flag to multiply matrices as 2x2 matrices\n * @returns the multiplication product\n */\nexport const multiplyTransformMatrixArray = (\n  matrices: (TMat2D | undefined | null | false)[],\n  is2x2?: boolean,\n) =>\n  matrices.reduceRight(\n    (product: TMat2D, curr) =>\n      curr && product\n        ? multiplyTransformMatrices(curr, product, is2x2)\n        : curr || product,\n    undefined as unknown as TMat2D,\n  ) || iMatrix.concat();\n\nexport const calcPlaneRotation = ([a, b]: TMat2D) =>\n  Math.atan2(b, a) as TRadian;\n\n/**\n * Decomposes standard 2x3 matrix into transform components\n * @param  {TMat2D} a transformMatrix\n * @return {Object} Components of transform\n */\nexport const qrDecompose = (a: TMat2D): TQrDecomposeOut => {\n  const angle = calcPlaneRotation(a),\n    denom = Math.pow(a[0], 2) + Math.pow(a[1], 2),\n    scaleX = Math.sqrt(denom),\n    scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n    skewX = Math.atan2(a[0] * a[2] + a[1] * a[3], denom);\n  return {\n    angle: radiansToDegrees(angle),\n    scaleX,\n    scaleY,\n    skewX: radiansToDegrees(skewX),\n    skewY: 0 as TDegree,\n    translateX: a[4] || 0,\n    translateY: a[5] || 0,\n  };\n};\n\n/**\n * Generate a translation matrix\n *\n * A translation matrix in the form of\n * [ 1 0 x ]\n * [ 0 1 y ]\n * [ 0 0 1 ]\n *\n * See @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#translate for more details\n *\n * @param {number} x translation on X axis\n * @param {number} [y] translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createTranslateMatrix = (x: number, y = 0): TMat2D => [\n  1,\n  0,\n  0,\n  1,\n  x,\n  y,\n];\n\n/**\n * Generate a rotation matrix around around a point (x,y), defaulting to (0,0)\n *\n * A matrix in the form of\n * [cos(a) -sin(a) -x*cos(a)+y*sin(a)+x]\n * [sin(a)  cos(a) -x*sin(a)-y*cos(a)+y]\n * [0       0      1                 ]\n *\n *\n * @param {TDegree} angle rotation in degrees\n * @param {XY} [pivotPoint] pivot point to rotate around\n * @returns {TMat2D} matrix\n */\nexport function createRotateMatrix(\n  { angle = 0 }: TRotateMatrixArgs = {},\n  { x = 0, y = 0 }: Partial<XY> = {},\n): TMat2D {\n  const angleRadiant = degreesToRadians(angle),\n    cosValue = cos(angleRadiant),\n    sinValue = sin(angleRadiant);\n  return [\n    cosValue,\n    sinValue,\n    -sinValue,\n    cosValue,\n    x ? x - (cosValue * x - sinValue * y) : 0,\n    y ? y - (sinValue * x + cosValue * y) : 0,\n  ];\n}\n\n/**\n * Generate a scale matrix around the point (0,0)\n *\n * A matrix in the form of\n * [x 0 0]\n * [0 y 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#scale\n *\n * @param {number} x scale on X axis\n * @param {number} [y] scale on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createScaleMatrix = (x: number, y: number = x): TMat2D => [\n  x,\n  0,\n  0,\n  y,\n  0,\n  0,\n];\n\nexport const angleToSkew = (angle: TDegree) =>\n  Math.tan(degreesToRadians(angle));\n\nexport const skewToAngle = (value: TRadian) =>\n  radiansToDegrees(Math.atan(value));\n\n/**\n * Generate a skew matrix for the X axis\n *\n * A matrix in the form of\n * [1 x 0]\n * [0 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewx\n *\n * @param {TDegree} skewValue translation on X axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewXMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  0,\n  angleToSkew(skewValue),\n  1,\n  0,\n  0,\n];\n\n/**\n * Generate a skew matrix for the Y axis\n *\n * A matrix in the form of\n * [1 0 0]\n * [y 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewy\n *\n * @param {TDegree} skewValue translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewYMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  angleToSkew(skewValue),\n  0,\n  1,\n  0,\n  0,\n];\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet.\n * is called DimensionsTransformMatrix because those properties are the one that influence\n * the size of the resulting box of the object.\n * @param  {Object} options\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @return {Number[]} transform matrix\n */\nexport const calcDimensionsMatrix = ({\n  scaleX = 1,\n  scaleY = 1,\n  flipX = false,\n  flipY = false,\n  skewX = 0 as TDegree,\n  skewY = 0 as TDegree,\n}: TScaleMatrixArgs) => {\n  let matrix = createScaleMatrix(\n    flipX ? -scaleX : scaleX,\n    flipY ? -scaleY : scaleY,\n  );\n  if (skewX) {\n    matrix = multiplyTransformMatrices(matrix, createSkewXMatrix(skewX), true);\n  }\n  if (skewY) {\n    matrix = multiplyTransformMatrices(matrix, createSkewYMatrix(skewY), true);\n  }\n  return matrix;\n};\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet\n * Before changing this function look at: src/benchmarks/calcTransformMatrix.mjs\n * @param  {Object} options\n * @param  {Number} [options.angle]\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @param  {Number} [options.translateX]\n * @param  {Number} [options.translateY]\n * @return {Number[]} transform matrix\n */\nexport const composeMatrix = (options: TComposeMatrixArgs): TMat2D => {\n  const { translateX = 0, translateY = 0, angle = 0 as TDegree } = options;\n  let matrix = createTranslateMatrix(translateX, translateY);\n  if (angle) {\n    matrix = multiplyTransformMatrices(matrix, createRotateMatrix({ angle }));\n  }\n  const scaleMatrix = calcDimensionsMatrix(options);\n  if (!isIdentityMatrix(scaleMatrix)) {\n    matrix = multiplyTransformMatrices(matrix, scaleMatrix);\n  }\n  return matrix;\n};\n","import { noop } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type {\n  Abortable,\n  Constructor,\n  TCrossOrigin,\n  TFiller,\n} from '../../typedefs';\nimport { createImage } from './dom';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { BaseFilter } from '../../filters/BaseFilter';\nimport type { FabricObject as BaseFabricObject } from '../../shapes/Object/Object';\nimport { FabricError, SignalAbortedError } from '../internals/console';\nimport type { Shadow } from '../../Shadow';\n\nexport type LoadImageOptions = Abortable & {\n  /**\n   * cors value for the image loading, default to anonymous\n   */\n  crossOrigin?: TCrossOrigin;\n};\n\n/**\n * Loads image element from given url and resolve it, or catch.\n * @param {String} url URL representing an image\n * @param {LoadImageOptions} [options] image loading options\n * @returns {Promise<HTMLImageElement>} the loaded image.\n */\nexport const loadImage = (\n  url: string,\n  { signal, crossOrigin = null }: LoadImageOptions = {},\n) =>\n  new Promise<HTMLImageElement>(function (resolve, reject) {\n    if (signal && signal.aborted) {\n      return reject(new SignalAbortedError('loadImage'));\n    }\n    const img = createImage();\n    let abort: EventListenerOrEventListenerObject;\n    if (signal) {\n      abort = function (err: Event) {\n        img.src = '';\n        reject(err);\n      };\n      signal.addEventListener('abort', abort, { once: true });\n    }\n    const done = function () {\n      img.onload = img.onerror = null;\n      abort && signal?.removeEventListener('abort', abort);\n      resolve(img);\n    };\n    if (!url) {\n      done();\n      return;\n    }\n    img.onload = done;\n    img.onerror = function () {\n      abort && signal?.removeEventListener('abort', abort);\n      reject(new FabricError(`Error loading ${img.src}`));\n    };\n    crossOrigin && (img.crossOrigin = crossOrigin);\n    img.src = url;\n  });\n\nexport type EnlivenObjectOptions = Abortable & {\n  /**\n   * Method for further parsing of object elements,\n   * called after each fabric object created.\n   */\n  reviver?: <\n    T extends\n      | BaseFabricObject\n      | FabricObject\n      | BaseFilter<string>\n      | Shadow\n      | TFiller,\n  >(\n    serializedObj: Record<string, any>,\n    instance: T,\n  ) => void;\n};\n\n/**\n * @TODO type this correctly.\n * Creates corresponding fabric instances from their object representations\n * @param {Object[]} objects Objects to enliven\n * @param {EnlivenObjectOptions} [options]\n * @param {(serializedObj: object, instance: FabricObject) => any} [options.reviver] Method for further parsing of object elements,\n * called after each fabric object created.\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<FabricObject[]>}\n */\nexport const enlivenObjects = <\n  T extends\n    | BaseFabricObject\n    | FabricObject\n    | BaseFilter<string>\n    | Shadow\n    | TFiller,\n>(\n  objects: any[],\n  { signal, reviver = noop }: EnlivenObjectOptions = {},\n) =>\n  new Promise<T[]>((resolve, reject) => {\n    const instances: T[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    Promise.all(\n      objects.map((obj) =>\n        classRegistry\n          .getClass<\n            Constructor<T> & {\n              fromObject(options: any, context: Abortable): Promise<T>;\n            }\n          >(obj.type)\n          .fromObject(obj, { signal })\n          .then((fabricInstance) => {\n            reviver(obj, fabricInstance);\n            instances.push(fabricInstance);\n            return fabricInstance;\n          }),\n      ),\n    )\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance) => {\n          (instance as FabricObject).dispose &&\n            (instance as FabricObject).dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n\n/**\n * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n * @param {Object} object with properties to enlive ( fill, stroke, clipPath, path )\n * @param {object} [options]\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<Record<string, FabricObject | TFiller | null>>} the input object with enlived values\n */\nexport const enlivenObjectEnlivables = <\n  R = Record<string, FabricObject | TFiller | null>,\n>(\n  serializedObject: any,\n  { signal }: Abortable = {},\n) =>\n  new Promise<R>((resolve, reject) => {\n    const instances: (FabricObject | TFiller | Shadow)[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    // enlive every possible property\n    const promises = Object.values(serializedObject).map((value: any) => {\n      if (!value) {\n        return value;\n      }\n      /**\n       * clipPath or shadow or gradient or text on a path or a pattern,\n       * or the backgroundImage or overlayImage of canvas\n       * If we have a type and there is a classe registered for it, we enlive it.\n       * If there is no class registered for it we return the value as is\n       * */\n      if (value.type && classRegistry.has(value.type)) {\n        return enlivenObjects<FabricObject | Shadow | TFiller>([value], {\n          signal,\n        }).then(([enlived]) => {\n          instances.push(enlived);\n          return enlived;\n        });\n      }\n      return value;\n    });\n    const keys = Object.keys(serializedObject);\n    Promise.all(promises)\n      .then((enlived) => {\n        return enlived.reduce((acc, instance, index) => {\n          acc[keys[index]] = instance;\n          return acc;\n        }, {});\n      })\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance: any) => {\n          instance.dispose && instance.dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n","/**\n * Populates an object with properties of another object\n * @param {Object} source Source object\n * @param {string[]} properties Properties names to include\n * @returns object populated with the picked keys\n */\nexport const pick = <T extends Record<string, any>>(\n  source: T,\n  keys: (keyof T)[] = [],\n) => {\n  return keys.reduce((o, key) => {\n    if (key in source) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n\nexport const pickBy = <T extends Record<string, any>>(\n  source: T,\n  predicate: <K extends keyof T>(value: T[K], key: K, collection: T) => boolean,\n) => {\n  return (Object.keys(source) as (keyof T)[]).reduce((o, key) => {\n    if (predicate(source[key], key, source)) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n","/**\n * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n * @param {number|string} number number to operate on\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {number}\n */\nexport const toFixed = (number: number | string, fractionDigits: number) =>\n  parseFloat(Number(number).toFixed(fractionDigits));\n","import type { TMat2D } from '../../typedefs';\nimport { toFixed } from './toFixed';\nimport { config } from '../../config';\n\n/**\n * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n * @param {TMat2D} transform an array with 6 numbers\n * @return {String} transform matrix for svg\n */\nexport const matrixToSVG = (transform: TMat2D) =>\n  'matrix(' +\n  transform\n    .map((value) => toFixed(value, config.NUM_FRACTION_DIGITS))\n    .join(' ') +\n  ')';\n","import type { FabricObject } from '../shapes/Object/Object';\nimport type { TFiller } from '../typedefs';\nimport type { FabricText } from '../shapes/Text/Text';\nimport type { Pattern } from '../Pattern';\nimport type { Path } from '../shapes/Path';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\n\nexport const isFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && (filler as TFiller).toLive !== undefined;\n};\n\nexport const isSerializableFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && typeof (filler as TFiller).toObject === 'function';\n};\n\nexport const isPattern = (filler: TFiller): filler is Pattern => {\n  return (\n    !!filler && (filler as Pattern).offsetX !== undefined && 'source' in filler\n  );\n};\n\nexport const isTextObject = (\n  fabricObject?: FabricObject,\n): fabricObject is FabricText => {\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as FabricText)._renderText === 'function'\n  );\n};\n\nexport const isPath = (fabricObject?: FabricObject): fabricObject is Path => {\n  // we could use instanceof but that would mean pulling in Text code for a simple check\n  // @todo discuss what to do and how to do\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as Path)._renderPathCommands === 'function'\n  );\n};\n\nexport const isActiveSelection = (\n  fabricObject?: FabricObject,\n): fabricObject is ActiveSelection =>\n  !!fabricObject && 'multiSelectionStacking' in fabricObject;\n","/**\n * Returns element scroll offsets\n * @param {HTMLElement} element Element to operate on\n * @return {Object} Object with left/top values\n */\nexport function getScrollLeftTop(element: HTMLElement | null) {\n  const doc = element && getDocumentFromElement(element);\n  let left = 0,\n    top = 0;\n  if (!element || !doc) {\n    return { left, top };\n  }\n  let elementLoop: HTMLElement | Document | ShadowRoot = element;\n  const docElement = doc.documentElement,\n    body = doc.body || {\n      scrollLeft: 0,\n      scrollTop: 0,\n    };\n  // While loop checks (and then sets element to) .parentNode OR .host\n  //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n  //  but the .parentNode of a root ShadowDOM node will always be null, instead\n  //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n  while (\n    elementLoop &&\n    (elementLoop.parentNode || (elementLoop as unknown as ShadowRoot).host)\n  ) {\n    elementLoop = (elementLoop.parentNode ||\n      (elementLoop as unknown as ShadowRoot).host) as\n      | HTMLElement\n      | Document\n      | ShadowRoot;\n    if (elementLoop === doc) {\n      left = body.scrollLeft || docElement.scrollLeft || 0;\n      top = body.scrollTop || docElement.scrollTop || 0;\n    } else {\n      left += (elementLoop as HTMLElement).scrollLeft || 0;\n      top += (elementLoop as HTMLElement).scrollTop || 0;\n    }\n\n    if (\n      elementLoop.nodeType === 1 &&\n      (elementLoop as HTMLElement).style.position === 'fixed'\n    ) {\n      break;\n    }\n  }\n\n  return { left, top };\n}\n\nexport const getDocumentFromElement = (el: HTMLElement) =>\n  el.ownerDocument || null;\n\nexport const getWindowFromElement = (el: HTMLElement) =>\n  el.ownerDocument?.defaultView || null;\n","import { NONE } from '../../constants';\nimport type { TSize } from '../../typedefs';\nimport {\n  getDocumentFromElement,\n  getWindowFromElement,\n  getScrollLeftTop,\n} from '../../util/dom_misc';\n\nexport const setCanvasDimensions = (\n  el: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  { width, height }: TSize,\n  retinaScaling = 1,\n) => {\n  el.width = width;\n  el.height = height;\n  if (retinaScaling > 1) {\n    el.setAttribute('width', (width * retinaScaling).toString());\n    el.setAttribute('height', (height * retinaScaling).toString());\n    ctx.scale(retinaScaling, retinaScaling);\n  }\n};\n\nexport type CSSDimensions = {\n  width: number | string;\n  height: number | string;\n};\n\nexport const setCSSDimensions = (\n  el: HTMLElement,\n  { width, height }: Partial<CSSDimensions>,\n) => {\n  width && (el.style.width = typeof width === 'number' ? `${width}px` : width);\n  height &&\n    (el.style.height = typeof height === 'number' ? `${height}px` : height);\n};\n\n/**\n * Returns offset for a given element\n * @param {HTMLElement} element Element to get offset for\n * @return {Object} Object with \"left\" and \"top\" properties\n */\nexport function getElementOffset(element: HTMLElement) {\n  const doc = element && getDocumentFromElement(element),\n    offset = { left: 0, top: 0 };\n\n  if (!doc) {\n    return offset;\n  }\n  const elemStyle: CSSStyleDeclaration =\n    getWindowFromElement(element)?.getComputedStyle(element, null) ||\n    ({} as CSSStyleDeclaration);\n  offset.left += parseInt(elemStyle.borderLeftWidth, 10) || 0;\n  offset.top += parseInt(elemStyle.borderTopWidth, 10) || 0;\n  offset.left += parseInt(elemStyle.paddingLeft, 10) || 0;\n  offset.top += parseInt(elemStyle.paddingTop, 10) || 0;\n\n  let box = { left: 0, top: 0 };\n\n  const docElem = doc.documentElement;\n  if (typeof element.getBoundingClientRect !== 'undefined') {\n    box = element.getBoundingClientRect();\n  }\n\n  const scrollLeftTop = getScrollLeftTop(element);\n\n  return {\n    left:\n      box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n    top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top,\n  };\n}\n\n/**\n * Makes element unselectable\n * @param {HTMLElement} element Element to make unselectable\n * @return {HTMLElement} Element that was passed in\n */\nexport function makeElementUnselectable(element: HTMLElement) {\n  if (typeof element.onselectstart !== 'undefined') {\n    element.onselectstart = () => false;\n  }\n  element.style.userSelect = NONE;\n  return element;\n}\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport type { CSSDimensions } from './util';\nimport { setCSSDimensions, getElementOffset } from './util';\nimport { createCanvasElement, isHTMLCanvas } from '../../util/misc/dom';\nimport { setCanvasDimensions } from './util';\nimport { FabricError } from '../../util/internals/console';\n\nexport type CanvasItem = {\n  el: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nexport class StaticCanvasDOMManager {\n  /**\n   * Keeps a copy of the canvas style before setting retina scaling and other potions\n   * in order to return it to original state on dispose\n   * @type string\n   */\n  private _originalCanvasStyle?: string;\n\n  lower: CanvasItem;\n\n  constructor(arg0?: string | HTMLCanvasElement) {\n    const el = this.createLowerCanvas(arg0);\n    this.lower = { el, ctx: el.getContext('2d')! };\n  }\n\n  protected createLowerCanvas(arg0?: HTMLCanvasElement | string) {\n    // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n    const el = isHTMLCanvas(arg0)\n      ? arg0\n      : (arg0 &&\n          (getFabricDocument().getElementById(arg0) as HTMLCanvasElement)) ||\n        createCanvasElement();\n    if (el.hasAttribute('data-fabric')) {\n      throw new FabricError(\n        'Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?',\n      );\n    }\n    this._originalCanvasStyle = el.style.cssText;\n    el.setAttribute('data-fabric', 'main');\n    el.classList.add('lower-canvas');\n    return el;\n  }\n\n  cleanupDOM({ width, height }: TSize) {\n    const { el } = this.lower;\n    // restore canvas style and attributes\n    el.classList.remove('lower-canvas');\n    el.removeAttribute('data-fabric');\n    // restore canvas size to original size in case retina scaling was applied\n    el.setAttribute('width', `${width}`);\n    el.setAttribute('height', `${height}`);\n    el.style.cssText = this._originalCanvasStyle || '';\n    this._originalCanvasStyle = undefined;\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    const { el, ctx } = this.lower;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>) {\n    setCSSDimensions(this.lower.el, size);\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   */\n  calcOffset() {\n    return getElementOffset(this.lower.el);\n  }\n\n  dispose() {\n    getEnv().dispose(this.lower.el);\n    // @ts-expect-error disposing\n    delete this.lower;\n  }\n}\n","import { iMatrix } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TFiller, TMat2D, TOptions } from '../typedefs';\n\ninterface CanvasDrawableOptions {\n  /**\n   * if set to false background image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  backgroundVpt: boolean;\n\n  /**\n   * Background color of canvas instance.\n   * @type {(String|TFiller)}\n   * @default\n   */\n  backgroundColor: TFiller | string;\n\n  /**\n   * Background image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as background, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  backgroundImage?: FabricObject;\n\n  /**\n   * if set to false overlay image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  overlayVpt: boolean;\n\n  /**\n   * Overlay color of canvas instance.\n   * @since 1.3.9\n   * @type {(String|TFiller)}\n   * @default\n   */\n  overlayColor: TFiller | string;\n\n  /**\n   * Overlay image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  overlayImage?: FabricObject;\n}\n\ninterface CanvasRenderingOptions {\n  /**\n   * Indicates whether {@link StaticCanvas#add}, {@link StaticCanvas#insertAt} and {@link StaticCanvas#remove},\n   * {@link StaticCanvas#moveTo}, {@link StaticCanvas#clear} and many more, should also re-render canvas.\n   * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n   * since the renders are queued and executed one per frame.\n   * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n   * Left default to true to do not break documentation and old app, fiddles.\n   * @type Boolean\n   * @default\n   */\n  renderOnAddRemove: boolean;\n\n  /**\n   * Based on vptCoords and object.aCoords, skip rendering of objects that\n   * are not included in current viewport.\n   * May greatly help in applications with crowded canvas and use of zoom/pan\n   * If One of the corner of the bounding box of the object is on the canvas\n   * the objects get rendered.\n   * @type Boolean\n   * @default true\n   */\n  skipOffscreen: boolean;\n\n  /**\n   * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n   * @type Boolean\n   * @default\n   */\n  enableRetinaScaling: boolean;\n\n  /**\n   * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n   * @type Boolean\n   * @default\n   */\n  imageSmoothingEnabled: boolean;\n\n  /**\n   * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n   * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n   * top left corner of the canvas.\n   * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n   * @type FabricObject\n   */\n  clipPath?: FabricObject;\n}\n\nexport interface CanvasExportOptions {\n  /**\n   * Indicates whether toObject/toDatalessObject should include default values\n   * if set to false, takes precedence over the object value.\n   * @type Boolean\n   * @default\n   */\n  includeDefaultValues: boolean;\n\n  /**\n   * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n   * a zoomed canvas will then produce zoomed SVG output.\n   * @type Boolean\n   * @default\n   */\n  svgViewportTransformation: boolean;\n}\n\nexport interface StaticCanvasOptions\n  extends CanvasDrawableOptions,\n    CanvasRenderingOptions,\n    CanvasExportOptions {\n  /**\n   * Width in virtual/logical pixels of the canvas.\n   * The canvas can be larger than width if retina scaling is active\n   * @type number\n   */\n  width: number;\n\n  /**\n   * Height in virtual/logical pixels of the canvas.\n   * The canvas can be taller than width if retina scaling is active\n   * @type height\n   */\n  height: number;\n\n  /**\n   * Indicates whether object controls (borders/controls) are rendered above overlay image\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: boolean;\n\n  /**\n   * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n   * It gives PRIORITY to DOM scrolling, it doesn't make it always possible.\n   * If is true, when using a touch event on the canvas, the canvas will scroll if scroll is possible.\n   * If we are in drawing mode or if we are selecting an object the canvas preventDefault and so it won't scroll\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: boolean;\n\n  /**\n   * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n   * @type Array\n   * @example <caption>Default transform</caption>\n   * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n   * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n   * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n   * @default\n   */\n  viewportTransform: TMat2D;\n}\n\nexport const staticCanvasDefaults: TOptions<StaticCanvasOptions> = {\n  backgroundVpt: true,\n  backgroundColor: '',\n  overlayVpt: true,\n  overlayColor: '',\n\n  includeDefaultValues: true,\n  svgViewportTransformation: true,\n\n  renderOnAddRemove: true,\n  skipOffscreen: true,\n  enableRetinaScaling: true,\n  imageSmoothingEnabled: true,\n\n  /**\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: false,\n  /**\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: false,\n\n  viewportTransform: [...iMatrix],\n};\n","import { config } from '../config';\nimport { CENTER, VERSION } from '../constants';\nimport type { CanvasEvents, StaticCanvasEvents } from '../EventTypeDefs';\nimport type { Gradient } from '../gradient/Gradient';\nimport { createCollectionMixin, isCollection } from '../Collection';\nimport { CommonMethods } from '../CommonMethods';\nimport type { Pattern } from '../Pattern';\nimport { Point } from '../Point';\nimport type { TCachedFabricObject } from '../shapes/Object/Object';\nimport type {\n  Abortable,\n  Constructor,\n  TCornerPoint,\n  TDataUrlOptions,\n  TFiller,\n  TMat2D,\n  TSize,\n  TSVGReviver,\n  TToCanvasElementOptions,\n  TValidToObjectMethod,\n  TOptions,\n} from '../typedefs';\nimport {\n  cancelAnimFrame,\n  requestAnimFrame,\n} from '../util/animation/AnimationFrameProvider';\nimport { runningAnimations } from '../util/animation/AnimationRegistry';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor, toBlob, toDataURL } from '../util/misc/dom';\nimport { invertTransform, transformPoint } from '../util/misc/matrix';\nimport type { EnlivenObjectOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { toFixed } from '../util/misc/toFixed';\nimport { isFiller, isPattern, isTextObject } from '../util/typeAssertions';\nimport { StaticCanvasDOMManager } from './DOMManagers/StaticCanvasDOMManager';\nimport type { CSSDimensions } from './DOMManagers/util';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\nimport { staticCanvasDefaults } from './StaticCanvasOptions';\nimport { log, FabricError } from '../util/internals/console';\nimport { getDevicePixelRatio } from '../env';\n\n/**\n * Having both options in TCanvasSizeOptions set to true transform the call in a calcOffset\n * Better try to restrict with types to avoid confusion.\n */\nexport type TCanvasSizeOptions =\n  | {\n      backstoreOnly?: true;\n      cssOnly?: false;\n    }\n  | {\n      backstoreOnly?: false;\n      cssOnly?: true;\n    };\n\nexport type TSVGExportOptions = {\n  suppressPreamble?: boolean;\n  viewBox?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  encoding?: 'UTF-8'; // test Encoding type and see what happens\n  width?: string;\n  height?: string;\n  reviver?: TSVGReviver;\n};\n\n/**\n * Static canvas class\n * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n * @fires before:render\n * @fires after:render\n * @fires canvas:cleared\n * @fires object:added\n * @fires object:removed\n */\n// TODO: fix `EventSpec` inheritance https://github.com/microsoft/TypeScript/issues/26154#issuecomment-1366616260\nexport class StaticCanvas<\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EventSpec extends StaticCanvasEvents = StaticCanvasEvents,\n  >\n  extends createCollectionMixin(CommonMethods<CanvasEvents>)\n  implements StaticCanvasOptions\n{\n  declare width: number;\n  declare height: number;\n\n  // background\n  declare backgroundVpt: boolean;\n  declare backgroundColor: TFiller | string;\n  declare backgroundImage?: FabricObject;\n  // overlay\n  declare overlayVpt: boolean;\n  declare overlayColor: TFiller | string;\n  declare overlayImage?: FabricObject;\n\n  declare clipPath?: FabricObject;\n\n  declare includeDefaultValues: boolean;\n\n  // rendering config\n  declare renderOnAddRemove: boolean;\n  declare skipOffscreen: boolean;\n  declare enableRetinaScaling: boolean;\n  declare imageSmoothingEnabled: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare controlsAboveOverlay: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare allowTouchScrolling: boolean;\n\n  declare viewportTransform: TMat2D;\n\n  /**\n   * The viewport bounding box in scene plane coordinates, see {@link calcViewportBoundaries}\n   */\n  declare vptCoords: TCornerPoint;\n\n  /**\n   * A reference to the canvas actual HTMLCanvasElement.\n   * Can be use to read the raw pixels, but never write or manipulate\n   * @type HTMLCanvasElement\n   */\n  get lowerCanvasEl() {\n    return this.elements.lower?.el;\n  }\n\n  get contextContainer() {\n    return this.elements.lower?.ctx;\n  }\n\n  /**\n   * If true the Canvas is in the process or has been disposed/destroyed.\n   * No more rendering operation will be executed on this canvas.\n   * @type boolean\n   */\n  declare destroyed?: boolean;\n\n  /**\n   * Started the process of disposing but not done yet.\n   * WIll likely complete the render cycle already scheduled but stopping adding more.\n   * @type boolean\n   */\n  declare disposed?: boolean;\n\n  declare _offset: { left: number; top: number };\n  protected declare hasLostContext: boolean;\n  protected declare nextRenderHandle: number;\n\n  declare elements: StaticCanvasDOMManager;\n\n  /**\n   * When true control drawing is skipped.\n   * This boolean is used to avoid toDataURL to export controls.\n   * Usage of this boolean to build up other flows and features is not supported\n   * @type Boolean\n   * @default false\n   */\n  protected declare skipControlsDrawing: boolean;\n\n  static ownDefaults = staticCanvasDefaults;\n\n  // reference to\n  protected declare __cleanupTask?: {\n    (): void;\n    kill: (reason?: any) => void;\n  };\n\n  static getDefaults(): Record<string, any> {\n    return StaticCanvas.ownDefaults;\n  }\n\n  constructor(\n    el?: string | HTMLCanvasElement,\n    options: TOptions<StaticCanvasOptions> = {},\n  ) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof StaticCanvas).getDefaults(),\n    );\n    this.set(options);\n    this.initElements(el);\n    this._setDimensionsImpl({\n      width: this.width || this.elements.lower.el.width || 0,\n      height: this.height || this.elements.lower.el.height || 0,\n    });\n    this.skipControlsDrawing = false;\n    this.viewportTransform = [...this.viewportTransform];\n    this.calcViewportBoundaries();\n  }\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new StaticCanvasDOMManager(el);\n  }\n\n  add(...objects: FabricObject[]) {\n    const size = super.add(...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const size = super.insertAt(index, ...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    removed.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return removed;\n  }\n\n  _onObjectAdded(obj: FabricObject) {\n    if (obj.canvas && (obj.canvas as StaticCanvas) !== this) {\n      log(\n        'warn',\n        'Canvas is trying to add an object that belongs to a different canvas.\\n' +\n          'Resulting to default behavior: removing object from previous canvas and adding to new canvas',\n      );\n      obj.canvas.remove(obj);\n    }\n    obj._set('canvas', this);\n    obj.setCoords();\n    this.fire('object:added', { target: obj });\n    obj.fire('added', { target: this });\n  }\n\n  _onObjectRemoved(obj: FabricObject) {\n    obj._set('canvas', undefined);\n    this.fire('object:removed', { target: obj });\n    obj.fire('removed', { target: this });\n  }\n\n  _onStackOrderChanged() {\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   * @return {Number} retinaScaling if applied, otherwise 1;\n   */\n  getRetinaScaling() {\n    return this.enableRetinaScaling ? getDevicePixelRatio() : 1;\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   * This method is also attached as \"resize\" event handler of window\n   */\n  calcOffset() {\n    return (this._offset = this.elements.calcOffset());\n  }\n\n  /**\n   * Returns canvas width (in px)\n   * @return {Number}\n   */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /**\n   * Returns canvas height (in px)\n   * @return {Number}\n   */\n  getHeight(): number {\n    return this.height;\n  }\n\n  /**\n   * Sets width of this canvas instance\n   * @param {Number|String} value                         Value to set width to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setWidth(\n    value: TSize['width'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setWidth(\n    value: CSSDimensions['width'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setWidth(value: number, options?: never) {\n    return this.setDimensions({ width: value }, options);\n  }\n\n  /**s\n   * Sets height of this canvas instance\n   * @param {Number|String} value                         Value to set height to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setHeight(\n    value: TSize['height'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setHeight(\n    value: CSSDimensions['height'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setHeight(value: CSSDimensions['height'], options?: never) {\n    return this.setDimensions({ height: value }, options);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: Partial<TSize | CSSDimensions>,\n    { cssOnly = false, backstoreOnly = false }: TCanvasSizeOptions = {},\n  ) {\n    if (!cssOnly) {\n      const size = {\n        width: this.width,\n        height: this.height,\n        ...(dimensions as Partial<TSize>),\n      };\n      this.elements.setDimensions(size, this.getRetinaScaling());\n      this.hasLostContext = true;\n      this.width = size.width;\n      this.height = size.height;\n    }\n    if (!backstoreOnly) {\n      this.elements.setCSSDimensions(dimensions);\n    }\n\n    this.calcOffset();\n  }\n\n  /**\n   * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n   * @param {Object}        dimensions                    Object with width/height properties\n   * @param {Number|String} [dimensions.width]            Width of canvas element\n   * @param {Number|String} [dimensions.height]           Height of canvas element\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   */\n  setDimensions(\n    dimensions: Partial<CSSDimensions>,\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setDimensions(\n    dimensions: Partial<TSize>,\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setDimensions(dimensions: Partial<TSize>, options?: never): void;\n  setDimensions(\n    dimensions: Partial<TSize | CSSDimensions>,\n    options?: TCanvasSizeOptions,\n  ) {\n    this._setDimensionsImpl(dimensions, options);\n    if (!options || !options.cssOnly) {\n      this.requestRenderAll();\n    }\n  }\n\n  /**\n   * Returns canvas zoom level\n   * @return {Number}\n   */\n  getZoom() {\n    return this.viewportTransform[0];\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    this.viewportTransform = vpt;\n    this.calcViewportBoundaries();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Sets zoom level of this canvas instance, the zoom centered around point\n   * meaning that following zoom to point with the same point will have the visual\n   * effect of the zoom originating from that point. The point won't move.\n   * It has nothing to do with canvas center or visual center of the viewport.\n   * @param {Point} point to zoom with respect to\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  zoomToPoint(point: Point, value: number) {\n    // TODO: just change the scale, preserve other transformations\n    const before = point,\n      vpt: TMat2D = [...this.viewportTransform];\n    const newPoint = transformPoint(point, invertTransform(vpt));\n    vpt[0] = value;\n    vpt[3] = value;\n    const after = transformPoint(newPoint, vpt);\n    vpt[4] += before.x - after.x;\n    vpt[5] += before.y - after.y;\n    this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Sets zoom level of this canvas instance\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  setZoom(value: number) {\n    this.zoomToPoint(new Point(0, 0), value);\n  }\n\n  /**\n   * Pan viewport so as to place point at top left corner of canvas\n   * @param {Point} point to move to\n   */\n  absolutePan(point: Point) {\n    const vpt: TMat2D = [...this.viewportTransform];\n    vpt[4] = -point.x;\n    vpt[5] = -point.y;\n    return this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Pans viewpoint relatively\n   * @param {Point} point (position vector) to move by\n   */\n  relativePan(point: Point) {\n    return this.absolutePan(\n      new Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5],\n      ),\n    );\n  }\n\n  /**\n   * Returns &lt;canvas> element corresponding to this instance\n   * @return {HTMLCanvasElement}\n   */\n  getElement(): HTMLCanvasElement {\n    return this.elements.lower.el;\n  }\n\n  /**\n   * Clears specified context of canvas element\n   * @param {CanvasRenderingContext2D} ctx Context to clear\n   */\n  clearContext(ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Returns context of canvas where objects are drawn\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.elements.lower.ctx;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    this.remove(...this.getObjects());\n    this.backgroundImage = undefined;\n    this.overlayImage = undefined;\n    this.backgroundColor = '';\n    this.overlayColor = '';\n    this.clearContext(this.getContext());\n    this.fire('canvas:cleared');\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Renders the canvas\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    this.renderCanvas(this.getContext(), this._objects);\n  }\n\n  /**\n   * Function created to be instance bound at initialization\n   * used in requestAnimationFrame rendering\n   * Let the fabricJS call it. If you call it manually you could have more\n   * animationFrame stacking on to of each other\n   * for an imperative rendering, use canvas.renderAll\n   * @private\n   */\n  renderAndReset() {\n    this.nextRenderHandle = 0;\n    this.renderAll();\n  }\n\n  /**\n   * Append a renderAll request to next animation frame.\n   * unless one is already in progress, in that case nothing is done\n   * a boolean flag will avoid appending more.\n   */\n  requestRenderAll() {\n    if (!this.nextRenderHandle && !this.disposed && !this.destroyed) {\n      this.nextRenderHandle = requestAnimFrame(() => this.renderAndReset());\n    }\n  }\n\n  /**\n   * Calculate the position of the 4 corner of canvas with current viewportTransform.\n   * helps to determinate when an object is in the current rendering viewport\n   */\n  calcViewportBoundaries(): TCornerPoint {\n    const width = this.width,\n      height = this.height,\n      iVpt = invertTransform(this.viewportTransform),\n      a = transformPoint({ x: 0, y: 0 }, iVpt),\n      b = transformPoint({ x: width, y: height }, iVpt),\n      // we don't support vpt flipping\n      // but the code is robust enough to mostly work with flipping\n      min = a.min(b),\n      max = a.max(b);\n    return (this.vptCoords = {\n      tl: min,\n      tr: new Point(max.x, min.y),\n      bl: new Point(min.x, max.y),\n      br: max,\n    });\n  }\n\n  cancelRequestedRender() {\n    if (this.nextRenderHandle) {\n      cancelAnimFrame(this.nextRenderHandle);\n      this.nextRenderHandle = 0;\n    }\n  }\n\n  drawControls(_ctx: CanvasRenderingContext2D) {\n    // Static canvas has no controls\n  }\n\n  /**\n   * Renders background, objects, overlay and controls.\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Array} objects to render\n   */\n  renderCanvas(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    if (this.destroyed) {\n      return;\n    }\n\n    const v = this.viewportTransform,\n      path = this.clipPath;\n    this.calcViewportBoundaries();\n    this.clearContext(ctx);\n    ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    // @ts-expect-error node-canvas stuff\n    ctx.patternQuality = 'best';\n    this.fire('before:render', { ctx });\n    this._renderBackground(ctx);\n\n    ctx.save();\n    //apply viewport transform once for all rendering process\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this._renderObjects(ctx, objects);\n    ctx.restore();\n    if (!this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    if (path) {\n      path._set('canvas', this);\n      // needed to setup a couple of variables\n      // todo migrate to the newer one\n      path.shouldCache();\n      path._transformDone = true;\n      (path as TCachedFabricObject).renderCache({ forClipping: true });\n      this.drawClipPathOnCanvas(ctx, path as TCachedFabricObject);\n    }\n    this._renderOverlay(ctx);\n    if (this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    this.fire('after:render', { ctx });\n\n    if (this.__cleanupTask) {\n      this.__cleanupTask();\n      this.__cleanupTask = undefined;\n    }\n  }\n\n  /**\n   * Paint the cached clipPath on the lowerCanvasEl\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawClipPathOnCanvas(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject,\n  ) {\n    const v = this.viewportTransform;\n    ctx.save();\n    ctx.transform(...v);\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4;\n    ctx.globalCompositeOperation = 'destination-in';\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY,\n    );\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} objects to render\n   */\n  _renderObjects(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    for (let i = 0, len = objects.length; i < len; ++i) {\n      objects[i] && objects[i].render(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {string} property 'background' or 'overlay'\n   */\n  _renderBackgroundOrOverlay(\n    ctx: CanvasRenderingContext2D,\n    property: 'background' | 'overlay',\n  ) {\n    const fill = this[`${property}Color`],\n      object = this[`${property}Image`],\n      v = this.viewportTransform,\n      needsVpt = this[`${property}Vpt`];\n    if (!fill && !object) {\n      return;\n    }\n    const isAFiller = isFiller(fill);\n    if (fill) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(this.width, 0);\n      ctx.lineTo(this.width, this.height);\n      ctx.lineTo(0, this.height);\n      ctx.closePath();\n      ctx.fillStyle = isAFiller ? fill.toLive(ctx /* this */)! : fill;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      if (isAFiller) {\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n        const m = ((fill as Gradient<'linear'>).gradientTransform ||\n          (fill as Pattern).patternTransform) as TMat2D;\n        m && ctx.transform(...m);\n      }\n      ctx.fill();\n      ctx.restore();\n    }\n    if (object) {\n      ctx.save();\n      const { skipOffscreen } = this;\n      // if the object doesn't move with the viewport,\n      // the offscreen concept does not apply;\n      this.skipOffscreen = needsVpt;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      object.render(ctx);\n      this.skipOffscreen = skipOffscreen;\n      ctx.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'background');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderOverlay(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'overlay');\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * Returned value is an object with top and left properties\n   * @return {Object} object with \"top\" and \"left\" number values\n   * @deprecated migrate to `getCenterPoint`\n   */\n  getCenter() {\n    return {\n      top: this.height / 2,\n      left: this.width / 2,\n    };\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * @return {Point}\n   */\n  getCenterPoint() {\n    return new Point(this.width / 2, this.height / 2);\n  }\n\n  /**\n   * Centers object horizontally in the canvas\n   */\n  centerObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getCenterPoint().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically in the canvas\n   * @param {FabricObject} object Object to center vertically\n   */\n  centerObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically and horizontally in the canvas\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  centerObject(object: FabricObject) {\n    return this._centerObject(object, this.getCenterPoint());\n  }\n\n  /**\n   * Centers object vertically and horizontally in the viewport\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObject(object: FabricObject) {\n    return this._centerObject(object, this.getVpCenter());\n  }\n\n  /**\n   * Centers object horizontally in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getVpCenter().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object Vertically in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getVpCenter().y),\n    );\n  }\n\n  /**\n   * Calculate the point in canvas that correspond to the center of actual viewport.\n   * @return {Point} vpCenter, viewport center\n   */\n  getVpCenter(): Point {\n    return transformPoint(\n      this.getCenterPoint(),\n      invertTransform(this.viewportTransform),\n    );\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object Object to center\n   * @param {Point} center Center point\n   */\n  _centerObject(object: FabricObject, center: Point) {\n    object.setXY(center, CENTER, CENTER);\n    object.setCoords();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Returns dataless JSON representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} json string\n   */\n  toDatalessJSON(propertiesToInclude?: string[]) {\n    return this.toDatalessObject(propertiesToInclude);\n  }\n\n  /**\n   * Returns object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toObject', propertiesToInclude);\n  }\n\n  /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\n   * @example <caption>JSON without default values</caption>\n   * var json = canvas.toJSON();\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Returns dataless object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n  }\n\n  /**\n   * @private\n   */\n  _toObjectMethod(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const clipPath = this.clipPath;\n    const clipPathData =\n      clipPath && !clipPath.excludeFromExport\n        ? this._toObject(clipPath, methodName, propertiesToInclude)\n        : null;\n    return {\n      version: VERSION,\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      objects: this._objects\n        .filter((object) => !object.excludeFromExport)\n        .map((instance) =>\n          this._toObject(instance, methodName, propertiesToInclude),\n        ),\n      ...this.__serializeBgOverlay(methodName, propertiesToInclude),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    let originalValue;\n\n    if (!this.includeDefaultValues) {\n      originalValue = instance.includeDefaultValues;\n      instance.includeDefaultValues = false;\n    }\n\n    const object = instance[methodName](propertiesToInclude);\n    if (!this.includeDefaultValues) {\n      instance.includeDefaultValues = !!originalValue;\n    }\n    return object;\n  }\n\n  /**\n   * @private\n   */\n  __serializeBgOverlay(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const data: any = {},\n      bgImage = this.backgroundImage,\n      overlayImage = this.overlayImage,\n      bgColor = this.backgroundColor,\n      overlayColor = this.overlayColor;\n\n    if (isFiller(bgColor)) {\n      if (!bgColor.excludeFromExport) {\n        data.background = bgColor.toObject(propertiesToInclude);\n      }\n    } else if (bgColor) {\n      data.background = bgColor;\n    }\n\n    if (isFiller(overlayColor)) {\n      if (!overlayColor.excludeFromExport) {\n        data.overlay = overlayColor.toObject(propertiesToInclude);\n      }\n    } else if (overlayColor) {\n      data.overlay = overlayColor;\n    }\n\n    if (bgImage && !bgImage.excludeFromExport) {\n      data.backgroundImage = this._toObject(\n        bgImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n    if (overlayImage && !overlayImage.excludeFromExport) {\n      data.overlayImage = this._toObject(\n        overlayImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n\n    return data;\n  }\n\n  /* _TO_SVG_START_ */\n\n  declare svgViewportTransformation: boolean;\n\n  /**\n   * Returns SVG representation of canvas\n   * @function\n   * @param {Object} [options] Options object for SVG output\n   * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n   * @param {Object} [options.viewBox] SVG viewbox object\n   * @param {Number} [options.viewBox.x] x-coordinate of viewbox\n   * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n   * @param {Number} [options.viewBox.width] Width of viewbox\n   * @param {Number} [options.viewBox.height] Height of viewbox\n   * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n   * @param {String} [options.width] desired width of svg with or without units\n   * @param {String} [options.height] desired height of svg with or without units\n   * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n   * @return {String} SVG string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n   * @example <caption>Normal SVG output</caption>\n   * var svg = canvas.toSVG();\n   * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n   * var svg = canvas.toSVG({suppressPreamble: true});\n   * @example <caption>SVG output with viewBox attribute</caption>\n   * var svg = canvas.toSVG({\n   *   viewBox: {\n   *     x: 100,\n   *     y: 100,\n   *     width: 200,\n   *     height: 300\n   *   }\n   * });\n   * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n   * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n   * @example <caption>Modify SVG output with reviver function</caption>\n   * var svg = canvas.toSVG(null, function(svg) {\n   *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n   * });\n   */\n  toSVG(options: TSVGExportOptions = {}, reviver?: TSVGReviver) {\n    options.reviver = reviver;\n    const markup: string[] = [];\n\n    this._setSVGPreamble(markup, options);\n    this._setSVGHeader(markup, options);\n    if (this.clipPath) {\n      markup.push(`<g clip-path=\"url(#${this.clipPath.clipPathId})\" >\\n`);\n    }\n    this._setSVGBgOverlayColor(markup, 'background');\n    this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n    this._setSVGObjects(markup, reviver);\n    if (this.clipPath) {\n      markup.push('</g>\\n');\n    }\n    this._setSVGBgOverlayColor(markup, 'overlay');\n    this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n    markup.push('</svg>');\n\n    return markup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _setSVGPreamble(markup: string[], options: TSVGExportOptions): void {\n    if (options.suppressPreamble) {\n      return;\n    }\n    markup.push(\n      '<?xml version=\"1.0\" encoding=\"',\n      options.encoding || 'UTF-8',\n      '\" standalone=\"no\" ?>\\n',\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n      '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n',\n    );\n  }\n\n  /**\n   * @private\n   */\n  _setSVGHeader(markup: string[], options: TSVGExportOptions): void {\n    const width = options.width || `${this.width}`,\n      height = options.height || `${this.height}`,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      optViewBox = options.viewBox;\n    let viewBox: string;\n    if (optViewBox) {\n      viewBox = `viewBox=\"${optViewBox.x} ${optViewBox.y} ${optViewBox.width} ${optViewBox.height}\" `;\n    } else if (this.svgViewportTransformation) {\n      const vpt = this.viewportTransform;\n      viewBox = `viewBox=\"${toFixed(\n        -vpt[4] / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS)} ${toFixed(\n        this.width / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS)}\" `;\n    } else {\n      viewBox = `viewBox=\"0 0 ${this.width} ${this.height}\" `;\n    }\n\n    markup.push(\n      '<svg ',\n      'xmlns=\"http://www.w3.org/2000/svg\" ',\n      'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n      'version=\"1.1\" ',\n      'width=\"',\n      width,\n      '\" ',\n      'height=\"',\n      height,\n      '\" ',\n      viewBox,\n      'xml:space=\"preserve\">\\n',\n      '<desc>Created with Fabric.js ',\n      VERSION,\n      '</desc>\\n',\n      '<defs>\\n',\n      this.createSVGFontFacesMarkup(),\n      this.createSVGRefElementsMarkup(),\n      this.createSVGClipPathMarkup(options),\n      '</defs>\\n',\n    );\n  }\n\n  createSVGClipPathMarkup(options: TSVGExportOptions): string {\n    const clipPath = this.clipPath;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      return `<clipPath id=\"${clipPath.clipPathId}\" >\\n${clipPath.toClipPathSVG(\n        options.reviver,\n      )}</clipPath>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Creates markup containing SVG referenced elements like patterns, gradients etc.\n   * @return {String}\n   */\n  createSVGRefElementsMarkup(): string {\n    return (['background', 'overlay'] as const)\n      .map((prop) => {\n        const fill = this[`${prop}Color`];\n        if (isFiller(fill)) {\n          const shouldTransform = this[`${prop}Vpt`],\n            vpt = this.viewportTransform,\n            object = {\n              // otherwise circular dependency\n              isType: () => false,\n              width: this.width / (shouldTransform ? vpt[0] : 1),\n              height: this.height / (shouldTransform ? vpt[3] : 1),\n            };\n          return fill.toSVG(object as FabricObject, {\n            additionalTransform: shouldTransform ? matrixToSVG(vpt) : '',\n          });\n        }\n      })\n      .join('');\n  }\n\n  /**\n   * Creates markup containing SVG font faces,\n   * font URLs for font faces must be collected by developers\n   * and are not extracted from the DOM by fabricjs\n   * @param {Array} objects Array of fabric objects\n   * @return {String}\n   */\n  createSVGFontFacesMarkup(): string {\n    const objects: FabricObject[] = [],\n      fontList: Record<string, boolean> = {},\n      fontPaths = config.fontPaths;\n\n    this._objects.forEach(function add(object) {\n      objects.push(object);\n      if (isCollection(object)) {\n        object._objects.forEach(add);\n      }\n    });\n\n    objects.forEach((obj) => {\n      if (!isTextObject(obj)) {\n        return;\n      }\n      const { styles, fontFamily } = obj;\n      if (fontList[fontFamily] || !fontPaths[fontFamily]) {\n        return;\n      }\n      fontList[fontFamily] = true;\n      if (!styles) {\n        return;\n      }\n      Object.values(styles).forEach((styleRow) => {\n        Object.values(styleRow).forEach(({ fontFamily = '' }) => {\n          if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n            fontList[fontFamily] = true;\n          }\n        });\n      });\n    });\n\n    const fontListMarkup = Object.keys(fontList)\n      .map(\n        (fontFamily) =>\n          `\\t\\t@font-face {\\n\\t\\t\\tfont-family: '${fontFamily}';\\n\\t\\t\\tsrc: url('${fontPaths[fontFamily]}');\\n\\t\\t}\\n`,\n      )\n      .join('');\n\n    if (fontListMarkup) {\n      return `\\t<style type=\"text/css\"><![CDATA[\\n${fontListMarkup}]]></style>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObjects(markup: string[], reviver?: TSVGReviver) {\n    this.forEachObject((fabricObject) => {\n      if (fabricObject.excludeFromExport) {\n        return;\n      }\n      this._setSVGObject(markup, fabricObject, reviver);\n    });\n  }\n\n  /**\n   * This is its own function because the Canvas ( non static ) requires extra code here\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    markup.push(instance.toSVG(reviver));\n  }\n\n  /**\n   * @private\n   */\n  _setSVGBgOverlayImage(\n    markup: string[],\n    property: 'overlayImage' | 'backgroundImage',\n    reviver?: TSVGReviver,\n  ) {\n    const bgOrOverlay = this[property];\n    if (bgOrOverlay && !bgOrOverlay.excludeFromExport && bgOrOverlay.toSVG) {\n      markup.push(bgOrOverlay.toSVG(reviver));\n    }\n  }\n\n  /**\n   * @TODO this seems to handle patterns but fail at gradients.\n   * @private\n   */\n  _setSVGBgOverlayColor(markup: string[], property: 'background' | 'overlay') {\n    const filler = this[`${property}Color`];\n    if (!filler) {\n      return;\n    }\n    if (isFiller(filler)) {\n      const repeat = (filler as Pattern).repeat || '',\n        finalWidth = this.width,\n        finalHeight = this.height,\n        shouldInvert = this[`${property}Vpt`],\n        additionalTransform = shouldInvert\n          ? matrixToSVG(invertTransform(this.viewportTransform))\n          : '';\n      markup.push(\n        `<rect transform=\"${additionalTransform} translate(${finalWidth / 2},${\n          finalHeight / 2\n        })\" x=\"${filler.offsetX - finalWidth / 2}\" y=\"${\n          filler.offsetY - finalHeight / 2\n        }\" width=\"${\n          (repeat === 'repeat-y' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).width\n            : finalWidth\n        }\" height=\"${\n          (repeat === 'repeat-x' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).height\n            : finalHeight\n        }\" fill=\"url(#SVGID_${filler.id})\"></rect>\\n`,\n      );\n    } else {\n      markup.push(\n        '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n        'fill=\"',\n        filler,\n        '\"',\n        '></rect>\\n',\n      );\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   *\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   *\n   * @param {String|Object} json JSON string or object\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @param {Object} [options] options\n   * @param {AbortSignal} [options.signal] see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @return {Promise<Canvas | StaticCanvas>} instance\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json).then((canvas) => canvas.requestRenderAll());\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * }).then((canvas) => {\n   *   ... canvas is restored, add your code.\n   * });\n   *\n   */\n  loadFromJSON(\n    json: string | Record<string, any>,\n    reviver?: EnlivenObjectOptions['reviver'],\n    { signal }: Abortable = {},\n  ): Promise<this> {\n    if (!json) {\n      return Promise.reject(new FabricError('`json` is undefined'));\n    }\n\n    // parse json if it wasn't already\n    const serialized = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n      objects = [],\n      backgroundImage,\n      background,\n      overlayImage,\n      overlay,\n      clipPath,\n    } = serialized;\n    const renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, {\n        reviver,\n        signal,\n      }),\n      enlivenObjectEnlivables(\n        {\n          backgroundImage,\n          backgroundColor: background,\n          overlayImage,\n          overlayColor: overlay,\n          clipPath,\n        },\n        { signal },\n      ),\n    ]).then(([enlived, enlivedMap]) => {\n      this.clear();\n      this.add(...enlived);\n      this.set(serialized);\n      this.set(enlivedMap);\n      this.renderOnAddRemove = renderOnAddRemove;\n      return this;\n    });\n  }\n\n  /**\n   * Clones canvas instance\n   * @param {string[]} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone(properties: string[]) {\n    const data = this.toObject(properties);\n    const canvas = this.cloneWithoutData();\n    return canvas.loadFromJSON(data);\n  }\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions since loadFromJSON does not affect canvas size.\n   */\n  cloneWithoutData() {\n    const el = createCanvasElementFor(this);\n    return new (this.constructor as Constructor<this>)(el);\n  }\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link https://jsfiddle.net/xsjua1rd/ demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   * @example <caption>Generate dataURL with objects that overlap a specified object</caption>\n   * var myObject;\n   * var dataURL = canvas.toDataURL({\n   *   filter: (object) => object.isContainedWithinObject(myObject) || object.intersectsWithObject(myObject)\n   * });\n   */\n  toDataURL(options = {} as TDataUrlOptions): string {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toDataURL(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n  toBlob(options = {} as TDataUrlOptions): Promise<Blob | null> {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toBlob(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n\n  /**\n   * Create a new HTMLCanvas element painted with the current canvas content.\n   * No need to resize the actual one or repaint it.\n   * Will transfer object ownership to a new canvas, paint it, and set everything back.\n   * This is an intermediary step used to get to a dataUrl but also it is useful to\n   * create quick image copies of a canvas without passing for the dataUrl string\n   * @param {Number} [multiplier] a zoom factor.\n   * @param {Object} [options] Cropping informations\n   * @param {Number} [options.left] Cropping left offset.\n   * @param {Number} [options.top] Cropping top offset.\n   * @param {Number} [options.width] Cropping width.\n   * @param {Number} [options.height] Cropping height.\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   */\n  toCanvasElement(\n    multiplier = 1,\n    { width, height, left, top, filter } = {} as TToCanvasElementOptions,\n  ): HTMLCanvasElement {\n    const scaledWidth = (width || this.width) * multiplier,\n      scaledHeight = (height || this.height) * multiplier,\n      zoom = this.getZoom(),\n      originalWidth = this.width,\n      originalHeight = this.height,\n      originalSkipControlsDrawing = this.skipControlsDrawing,\n      newZoom = zoom * multiplier,\n      vp = this.viewportTransform,\n      translateX = (vp[4] - (left || 0)) * multiplier,\n      translateY = (vp[5] - (top || 0)) * multiplier,\n      newVp = [newZoom, 0, 0, newZoom, translateX, translateY] as TMat2D,\n      originalRetina = this.enableRetinaScaling,\n      canvasEl = createCanvasElementFor({\n        width: scaledWidth,\n        height: scaledHeight,\n      }),\n      objectsToRender = filter\n        ? this._objects.filter((obj) => filter(obj))\n        : this._objects;\n    this.enableRetinaScaling = false;\n    this.viewportTransform = newVp;\n    this.width = scaledWidth;\n    this.height = scaledHeight;\n    this.skipControlsDrawing = true;\n    this.calcViewportBoundaries();\n    this.renderCanvas(canvasEl.getContext('2d')!, objectsToRender);\n    this.viewportTransform = vp;\n    this.width = originalWidth;\n    this.height = originalHeight;\n    this.calcViewportBoundaries();\n    this.enableRetinaScaling = originalRetina;\n    this.skipControlsDrawing = originalSkipControlsDrawing;\n    return canvasEl;\n  }\n\n  /**\n   * Waits until rendering has settled to destroy the canvas\n   * @returns {Promise<boolean>} a promise resolving to `true` once the canvas has been destroyed or to `false` if the canvas has was already destroyed\n   * @throws if aborted by a consequent call\n   */\n  dispose() {\n    !this.disposed &&\n      this.elements.cleanupDOM({ width: this.width, height: this.height });\n    runningAnimations.cancelByCanvas(this);\n    this.disposed = true;\n    return new Promise<boolean>((resolve, reject) => {\n      const task = () => {\n        this.destroy();\n        resolve(true);\n      };\n      task.kill = reject;\n      if (this.__cleanupTask) {\n        this.__cleanupTask.kill('aborted');\n      }\n\n      if (this.destroyed) {\n        resolve(false);\n      } else if (this.nextRenderHandle) {\n        this.__cleanupTask = task;\n      } else {\n        task();\n      }\n    });\n  }\n\n  /**\n   * Clears the canvas element, disposes objects and frees resources.\n   *\n   * Invoked as part of the **async** operation of {@link dispose}.\n   *\n   * **CAUTION**:\n   *\n   * This method is **UNSAFE**.\n   * You may encounter a race condition using it if there's a requested render.\n   * Call this method only if you are sure rendering has settled.\n   * Consider using {@link dispose} as it is **SAFE**\n   *\n   * @private\n   */\n  destroy() {\n    this.destroyed = true;\n    this.cancelRequestedRender();\n    this.forEachObject((object) => object.dispose());\n    this._objects = [];\n    if (this.backgroundImage) {\n      this.backgroundImage.dispose();\n    }\n    this.backgroundImage = undefined;\n    if (this.overlayImage) {\n      this.overlayImage.dispose();\n    }\n    this.overlayImage = undefined;\n    this.elements.dispose();\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String} string representation of an instance\n   */\n  toString() {\n    return `#<Canvas (${this.complexity()}): { objects: ${\n      this._objects.length\n    } }>`;\n  }\n}\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport { getScrollLeftTop } from './dom_misc';\n\nconst touchEvents = ['touchstart', 'touchmove', 'touchend'];\n\nfunction getTouchInfo(event: TouchEvent | MouseEvent): MouseEvent | Touch {\n  const touchProp = (event as TouchEvent).changedTouches;\n  if (touchProp && touchProp[0]) {\n    return touchProp[0];\n  }\n  return event as MouseEvent;\n}\n\nexport const getPointer = (event: TPointerEvent): Point => {\n  const element = event.target as HTMLElement,\n    scroll = getScrollLeftTop(element),\n    _evt = getTouchInfo(event);\n  return new Point(_evt.clientX + scroll.left, _evt.clientY + scroll.top);\n};\n\nexport const isTouchEvent = (event: TPointerEvent) =>\n  touchEvents.includes(event.type) ||\n  (event as PointerEvent).pointerType === 'touch';\n\nexport const stopEvent = (e: Event) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\n","import type { XY } from '../../Point';\nimport type { TBBox } from '../../typedefs';\n\n/**\n * Calculates bounding box (left, top, width, height) from given `points`\n * @param {XY[]} points\n * @return {Object} Object with left, top, width, height properties\n */\nexport const makeBoundingBoxFromPoints = (points: XY[]): TBBox => {\n  let left = 0,\n    top = 0,\n    width = 0,\n    height = 0;\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const { x, y } = points[i];\n    if (x > width || !i) width = x;\n    if (x < left || !i) left = x;\n    if (y > height || !i) height = y;\n    if (y < top || !i) top = y;\n  }\n\n  return {\n    left,\n    top,\n    width: width - left,\n    height: height - top,\n  };\n};\n","import { Point } from '../../Point';\nimport { CENTER } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { makeBoundingBoxFromPoints } from './boundingBoxFromPoints';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from './matrix';\n\n/**\n * given an object and a transform, apply the inverse transform to the object,\n * this is equivalent to remove from that object that transformation, so that\n * added in a space with the removed transform, the object will be the same as before.\n * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n * Removing from an object a transform that rotate by 30deg is like rotating by 30deg\n * in the opposite direction.\n * This util is used to add objects inside transformed groups or nested groups.\n * @param {FabricObject} object the object you want to transform\n * @param {TMat2D} transform the destination transform\n */\nexport const removeTransformFromObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const inverted = invertTransform(transform),\n    finalTransform = multiplyTransformMatrices(\n      inverted,\n      object.calcOwnMatrix(),\n    );\n  applyTransformToObject(object, finalTransform);\n};\n\n/**\n * given an object and a transform, apply the transform to the object.\n * this is equivalent to change the space where the object is drawn.\n * Adding to an object a transform that scale by 2 is like scaling it by 2.\n * This is used when removing an object from an active selection for example.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const addTransformToObject = (object: FabricObject, transform: TMat2D) =>\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(transform, object.calcOwnMatrix()),\n  );\n\n/**\n * discard an object transform state and apply the one from the matrix.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const applyTransformToObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const { translateX, translateY, scaleX, scaleY, ...otherOptions } =\n      qrDecompose(transform),\n    center = new Point(translateX, translateY);\n  object.flipX = false;\n  object.flipY = false;\n  Object.assign(object, otherOptions);\n  object.set({ scaleX, scaleY });\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n/**\n * reset an object transform state to neutral. Top and left are not accounted for\n * @param  {FabricObject} target object to transform\n */\nexport const resetObjectTransform = (target: FabricObject) => {\n  target.scaleX = 1;\n  target.scaleY = 1;\n  target.skewX = 0;\n  target.skewY = 0;\n  target.flipX = false;\n  target.flipY = false;\n  target.rotate(0);\n};\n\n/**\n * Extract Object transform values\n * @param  {FabricObject} target object to read from\n * @return {Object} Components of transform\n */\nexport const saveObjectTransform = (target: FabricObject) => ({\n  scaleX: target.scaleX,\n  scaleY: target.scaleY,\n  skewX: target.skewX,\n  skewY: target.skewY,\n  angle: target.angle,\n  left: target.left,\n  flipX: target.flipX,\n  flipY: target.flipY,\n  top: target.top,\n});\n\n/**\n * given a width and height, return the size of the bounding box\n * that can contains the box with width/height with applied transform.\n * Use to calculate the boxes around objects for controls.\n * @param {Number} width\n * @param {Number} height\n * @param {TMat2D} t\n * @returns {Point} size\n */\nexport const sizeAfterTransform = (\n  width: number,\n  height: number,\n  t: TMat2D,\n) => {\n  const dimX = width / 2,\n    dimY = height / 2,\n    points = [\n      new Point(-dimX, -dimY),\n      new Point(dimX, -dimY),\n      new Point(-dimX, dimY),\n      new Point(dimX, dimY),\n    ].map((p) => p.transform(t)),\n    bbox = makeBoundingBoxFromPoints(points);\n  return new Point(bbox.width, bbox.height);\n};\n","import { iMatrix } from '../../constants';\nimport type { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { invertTransform, multiplyTransformMatrices } from './matrix';\nimport { applyTransformToObject } from './objectTransforms';\n\n/**\n * We are actually looking for the transformation from the destination plane to the source plane (change of basis matrix)\\\n * The object will exist on the destination plane and we want it to seem unchanged by it so we invert the destination matrix (`to`) and then apply the source matrix (`from`)\n * @param [from]\n * @param [to]\n * @returns\n */\nexport const calcPlaneChangeMatrix = (\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n) => multiplyTransformMatrices(invertTransform(to), from);\n\n/**\n * Sends a point from the source coordinate plane to the destination coordinate plane.\\\n * From the canvas/viewer's perspective the point remains unchanged.\n *\n * @example <caption>Send point from canvas plane to group plane</caption>\n * var obj = new Rect({ left: 20, top: 20, width: 60, height: 60, strokeWidth: 0 });\n * var group = new Group([obj], { strokeWidth: 0 });\n * var sentPoint1 = sendPointToPlane(new Point(50, 50), undefined, group.calcTransformMatrix());\n * var sentPoint2 = sendPointToPlane(new Point(50, 50), iMatrix, group.calcTransformMatrix());\n * console.log(sentPoint1, sentPoint2) //  both points print (0,0) which is the center of group\n *\n * @param {Point} point\n * @param {TMat2D} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `point` exists in the canvas coordinate plane.\n * @param {TMat2D} [to] destination plane matrix to contain object. Passing `undefined` means `point` should be sent to the canvas coordinate plane.\n * @returns {Point} transformed point\n */\nexport const sendPointToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to));\n\n/**\n * See {@link sendPointToPlane}\n */\nexport const sendVectorToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to), true);\n\n/**\n *\n * A util that abstracts applying transform to objects.\\\n * Sends `object` to the destination coordinate plane by applying the relevant transformations.\\\n * Changes the space/plane where `object` is drawn.\\\n * From the canvas/viewer's perspective `object` remains unchanged.\n *\n * @example <caption>Move clip path from one object to another while preserving it's appearance as viewed by canvas/viewer</caption>\n * let obj, obj2;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * // render\n * sendObjectToPlane(clipPath, obj.calcTransformMatrix(), obj2.calcTransformMatrix());\n * obj.clipPath = undefined;\n * obj2.clipPath = clipPath;\n * // render, clipPath now clips obj2 but seems unchanged from the eyes of the viewer\n *\n * @example <caption>Clip an object's clip path with an existing object</caption>\n * let obj, existingObj;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * let transformTo = multiplyTransformMatrices(obj.calcTransformMatrix(), clipPath.calcTransformMatrix());\n * sendObjectToPlane(existingObj, existingObj.group?.calcTransformMatrix(), transformTo);\n * clipPath.clipPath = existingObj;\n *\n * @param {FabricObject} object\n * @param {Matrix} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `object` is a direct child of canvas.\n * @param {Matrix} [to] destination plane matrix to contain object. Passing `undefined` means `object` should be sent to the canvas coordinate plane.\n * @returns {Matrix} the transform matrix that was applied to `object`\n */\nexport const sendObjectToPlane = (\n  object: FabricObject,\n  from?: TMat2D,\n  to?: TMat2D,\n): TMat2D => {\n  const t = calcPlaneChangeMatrix(from, to);\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(t, object.calcOwnMatrix()),\n  );\n  return t;\n};\n","import type {\n  ObjectModificationEvents,\n  TModificationEvents,\n} from '../EventTypeDefs';\n\nexport const fireEvent = (\n  eventName: TModificationEvents,\n  options: ObjectModificationEvents[typeof eventName],\n) => {\n  const {\n    transform: { target },\n  } = options;\n  target.canvas?.fire(`object:${eventName}`, {\n    ...options,\n    target,\n  });\n  target.fire(eventName, options);\n};\n","import type { TOriginX, TOriginY } from '../../typedefs';\n\nconst originOffset = {\n  left: -0.5,\n  top: -0.5,\n  center: 0,\n  bottom: 0.5,\n  right: 0.5,\n};\n/**\n * Resolves origin value relative to center\n * @private\n * @param {TOriginX | TOriginY} originValue originX / originY\n * @returns number\n */\n\nexport const resolveOrigin = (\n  originValue: TOriginX | TOriginY | number,\n): number =>\n  typeof originValue === 'string'\n    ? originOffset[originValue]\n    : originValue - 0.5;\n","import type {\n  TPointerEvent,\n  Transform,\n  TransformAction,\n  BasicTransformEvent,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TOriginX, TOriginY } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { CENTER } from '../constants';\n\nexport const NOT_ALLOWED_CURSOR = 'not-allowed';\n\n/**\n * @param {Boolean} alreadySelected true if target is already selected\n * @param {String} corner a string representing the corner ml, mr, tl ...\n * @param {Event} e Event object\n * @param {FabricObject} [target] inserted back to help overriding. Unused\n */\nexport const getActionFromCorner = (\n  alreadySelected: boolean,\n  corner: string | undefined,\n  e: TPointerEvent,\n  target: FabricObject,\n) => {\n  if (!corner || !alreadySelected) {\n    return 'drag';\n  }\n  const control = target.controls[corner];\n  return control.getActionName(e, control, target);\n};\n\n/**\n * Checks if transform is centered\n * @param {Object} transform transform data\n * @return {Boolean} true if transform is centered\n */\nexport function isTransformCentered(transform: Transform) {\n  return (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) &&\n    resolveOrigin(transform.originY) === resolveOrigin(CENTER)\n  );\n}\n\nexport function invertOrigin(origin: TOriginX | TOriginY) {\n  return -resolveOrigin(origin) + 0.5;\n}\n\nexport const isLocked = (\n  target: FabricObject,\n  lockingKey:\n    | 'lockMovementX'\n    | 'lockMovementY'\n    | 'lockRotation'\n    | 'lockScalingX'\n    | 'lockScalingY'\n    | 'lockSkewingX'\n    | 'lockSkewingY'\n    | 'lockScalingFlip',\n) => target[lockingKey];\n\nexport const commonEventInfo: TransformAction<\n  Transform,\n  BasicTransformEvent\n> = (eventData, transform, x, y) => {\n  return {\n    e: eventData,\n    transform,\n    pointer: new Point(x, y),\n  };\n};\n\n/**\n * Combine control position and object angle to find the control direction compared\n * to the object center.\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n * @param {Control} control the control class\n * @return {Number} 0 - 7 a quadrant number\n */\nexport function findCornerQuadrant(\n  fabricObject: FabricObject,\n  control: Control,\n): number {\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle(),\n    cornerAngle =\n      angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\n  return Math.round((cornerAngle % 360) / 45);\n}\n\n/**\n * @returns the normalized point (rotated relative to center) in local coordinates\n */\nfunction normalizePoint(\n  target: FabricObject,\n  point: Point,\n  originX: TOriginX,\n  originY: TOriginY,\n): Point {\n  const center = target.getRelativeCenterPoint(),\n    p =\n      typeof originX !== 'undefined' && typeof originY !== 'undefined'\n        ? target.translateToGivenOrigin(\n            center,\n            CENTER,\n            CENTER,\n            originX,\n            originY,\n          )\n        : new Point(target.left, target.top),\n    p2 = target.angle\n      ? point.rotate(-degreesToRadians(target.angle), center)\n      : point;\n  return p2.subtract(p);\n}\n\n/**\n * Transforms a point to the offset from the given origin\n * @param {Object} transform\n * @param {String} originX\n * @param {String} originY\n * @param {number} x\n * @param {number} y\n * @return {Fabric.Point} the normalized point\n */\nexport function getLocalPoint(\n  { target, corner }: Transform,\n  originX: TOriginX,\n  originY: TOriginY,\n  x: number,\n  y: number,\n) {\n  const control = target.controls[corner],\n    zoom = target.canvas?.getZoom() || 1,\n    padding = target.padding / zoom,\n    localPoint = normalizePoint(target, new Point(x, y), originX, originY);\n  if (localPoint.x >= padding) {\n    localPoint.x -= padding;\n  }\n  if (localPoint.x <= -padding) {\n    localPoint.x += padding;\n  }\n  if (localPoint.y >= padding) {\n    localPoint.y -= padding;\n  }\n  if (localPoint.y <= padding) {\n    localPoint.y += padding;\n  }\n  localPoint.x -= control.offsetX;\n  localPoint.y -= control.offsetY;\n  return localPoint;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { LEFT, TOP, MOVING } from '../constants';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo, isLocked } from './util';\n\n/**\n * Action handler\n * @private\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if the translation occurred\n */\nexport const dragHandler: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const { target, offsetX, offsetY } = transform,\n    newLeft = x - offsetX,\n    newTop = y - offsetY,\n    moveX = !isLocked(target, 'lockMovementX') && target.left !== newLeft,\n    moveY = !isLocked(target, 'lockMovementY') && target.top !== newTop;\n  moveX && target.set(LEFT, newLeft);\n  moveY && target.set(TOP, newTop);\n  if (moveX || moveY) {\n    fireEvent(MOVING, commonEventInfo(eventData, transform, x, y));\n  }\n  return moveX || moveY;\n};\n","/**\n * Map of the 148 color names with HEX code\n * @see: https://www.w3.org/TR/css3-color/#svg-color\n */\nexport const ColorNameMap = {\n  aliceblue: '#F0F8FF',\n  antiquewhite: '#FAEBD7',\n  aqua: '#0FF',\n  aquamarine: '#7FFFD4',\n  azure: '#F0FFFF',\n  beige: '#F5F5DC',\n  bisque: '#FFE4C4',\n  black: '#000',\n  blanchedalmond: '#FFEBCD',\n  blue: '#00F',\n  blueviolet: '#8A2BE2',\n  brown: '#A52A2A',\n  burlywood: '#DEB887',\n  cadetblue: '#5F9EA0',\n  chartreuse: '#7FFF00',\n  chocolate: '#D2691E',\n  coral: '#FF7F50',\n  cornflowerblue: '#6495ED',\n  cornsilk: '#FFF8DC',\n  crimson: '#DC143C',\n  cyan: '#0FF',\n  darkblue: '#00008B',\n  darkcyan: '#008B8B',\n  darkgoldenrod: '#B8860B',\n  darkgray: '#A9A9A9',\n  darkgrey: '#A9A9A9',\n  darkgreen: '#006400',\n  darkkhaki: '#BDB76B',\n  darkmagenta: '#8B008B',\n  darkolivegreen: '#556B2F',\n  darkorange: '#FF8C00',\n  darkorchid: '#9932CC',\n  darkred: '#8B0000',\n  darksalmon: '#E9967A',\n  darkseagreen: '#8FBC8F',\n  darkslateblue: '#483D8B',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  darkturquoise: '#00CED1',\n  darkviolet: '#9400D3',\n  deeppink: '#FF1493',\n  deepskyblue: '#00BFFF',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1E90FF',\n  firebrick: '#B22222',\n  floralwhite: '#FFFAF0',\n  forestgreen: '#228B22',\n  fuchsia: '#F0F',\n  gainsboro: '#DCDCDC',\n  ghostwhite: '#F8F8FF',\n  gold: '#FFD700',\n  goldenrod: '#DAA520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#ADFF2F',\n  honeydew: '#F0FFF0',\n  hotpink: '#FF69B4',\n  indianred: '#CD5C5C',\n  indigo: '#4B0082',\n  ivory: '#FFFFF0',\n  khaki: '#F0E68C',\n  lavender: '#E6E6FA',\n  lavenderblush: '#FFF0F5',\n  lawngreen: '#7CFC00',\n  lemonchiffon: '#FFFACD',\n  lightblue: '#ADD8E6',\n  lightcoral: '#F08080',\n  lightcyan: '#E0FFFF',\n  lightgoldenrodyellow: '#FAFAD2',\n  lightgray: '#D3D3D3',\n  lightgrey: '#D3D3D3',\n  lightgreen: '#90EE90',\n  lightpink: '#FFB6C1',\n  lightsalmon: '#FFA07A',\n  lightseagreen: '#20B2AA',\n  lightskyblue: '#87CEFA',\n  lightslategray: '#789',\n  lightslategrey: '#789',\n  lightsteelblue: '#B0C4DE',\n  lightyellow: '#FFFFE0',\n  lime: '#0F0',\n  limegreen: '#32CD32',\n  linen: '#FAF0E6',\n  magenta: '#F0F',\n  maroon: '#800000',\n  mediumaquamarine: '#66CDAA',\n  mediumblue: '#0000CD',\n  mediumorchid: '#BA55D3',\n  mediumpurple: '#9370DB',\n  mediumseagreen: '#3CB371',\n  mediumslateblue: '#7B68EE',\n  mediumspringgreen: '#00FA9A',\n  mediumturquoise: '#48D1CC',\n  mediumvioletred: '#C71585',\n  midnightblue: '#191970',\n  mintcream: '#F5FFFA',\n  mistyrose: '#FFE4E1',\n  moccasin: '#FFE4B5',\n  navajowhite: '#FFDEAD',\n  navy: '#000080',\n  oldlace: '#FDF5E6',\n  olive: '#808000',\n  olivedrab: '#6B8E23',\n  orange: '#FFA500',\n  orangered: '#FF4500',\n  orchid: '#DA70D6',\n  palegoldenrod: '#EEE8AA',\n  palegreen: '#98FB98',\n  paleturquoise: '#AFEEEE',\n  palevioletred: '#DB7093',\n  papayawhip: '#FFEFD5',\n  peachpuff: '#FFDAB9',\n  peru: '#CD853F',\n  pink: '#FFC0CB',\n  plum: '#DDA0DD',\n  powderblue: '#B0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#639',\n  red: '#F00',\n  rosybrown: '#BC8F8F',\n  royalblue: '#4169E1',\n  saddlebrown: '#8B4513',\n  salmon: '#FA8072',\n  sandybrown: '#F4A460',\n  seagreen: '#2E8B57',\n  seashell: '#FFF5EE',\n  sienna: '#A0522D',\n  silver: '#C0C0C0',\n  skyblue: '#87CEEB',\n  slateblue: '#6A5ACD',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#FFFAFA',\n  springgreen: '#00FF7F',\n  steelblue: '#4682B4',\n  tan: '#D2B48C',\n  teal: '#008080',\n  thistle: '#D8BFD8',\n  tomato: '#FF6347',\n  turquoise: '#40E0D0',\n  violet: '#EE82EE',\n  wheat: '#F5DEB3',\n  white: '#FFF',\n  whitesmoke: '#F5F5F5',\n  yellow: '#FF0',\n  yellowgreen: '#9ACD32',\n};\n","import type { TRGBAColorSource } from './typedefs';\n\n/**\n * @param {Number} p\n * @param {Number} q\n * @param {Number} t\n * @return {Number}\n */\nexport const hue2rgb = (p: number, q: number, t: number): number => {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n};\n\n/**\n * Adapted from {@link https://gist.github.com/mjackson/5311256 https://gist.github.com/mjackson}\n * @param {Number} r Red color value\n * @param {Number} g Green color value\n * @param {Number} b Blue color value\n * @param {Number} a Alpha color value pass through\n * @return {TRGBColorSource} Hsl color\n */\nexport const rgb2Hsl = (\n  r: number,\n  g: number,\n  b: number,\n  a: number,\n): TRGBAColorSource => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const maxValue = Math.max(r, g, b),\n    minValue = Math.min(r, g, b);\n\n  let h!: number, s: number;\n  const l = (maxValue + minValue) / 2;\n\n  if (maxValue === minValue) {\n    h = s = 0; // achromatic\n  } else {\n    const d = maxValue - minValue;\n    s = l > 0.5 ? d / (2 - maxValue - minValue) : d / (maxValue + minValue);\n    switch (maxValue) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100), a];\n};\n\nexport const fromAlphaToFloat = (value = '1') =>\n  parseFloat(value) / (value.endsWith('%') ? 100 : 1);\n\n/**\n * Convert a value in the inclusive range [0, 255] to hex\n */\nexport const hexify = (value: number) =>\n  Math.min(Math.round(value), 255).toString(16).toUpperCase().padStart(2, '0');\n\n/**\n * Calculate the grey average value for rgb and pass through alpha\n */\nexport const greyAverage = ([\n  r,\n  g,\n  b,\n  a = 1,\n]: TRGBAColorSource): TRGBAColorSource => {\n  const avg = Math.round(r * 0.3 + g * 0.59 + b * 0.11);\n  return [avg, avg, avg, a];\n};\n","import { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { ColorNameMap } from './color_map';\nimport { reHSLa, reHex, reRGBa } from './constants';\nimport type { TRGBAColorSource, TColorArg } from './typedefs';\nimport {\n  hue2rgb,\n  hexify,\n  rgb2Hsl,\n  fromAlphaToFloat,\n  greyAverage,\n} from './util';\n\n/**\n * @class Color common color operations\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors colors}\n */\nexport class Color {\n  private declare _source: TRGBAColorSource;\n  isUnrecognised = false;\n\n  /**\n   *\n   * @param {string} [color] optional in hex or rgb(a) or hsl format or from known color list\n   */\n  constructor(color?: TColorArg) {\n    if (!color) {\n      // we default to black as canvas does\n      this.setSource([0, 0, 0, 1]);\n    } else if (color instanceof Color) {\n      this.setSource([...color._source]);\n    } else if (Array.isArray(color)) {\n      const [r, g, b, a = 1] = color;\n      this.setSource([r, g, b, a]);\n    } else {\n      this.setSource(this._tryParsingColor(color));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} [color] Color value to parse\n   * @returns {TRGBAColorSource}\n   */\n  protected _tryParsingColor(color: string) {\n    color = color.toLowerCase();\n    if (color in ColorNameMap) {\n      color = ColorNameMap[color as keyof typeof ColorNameMap];\n    }\n    return color === 'transparent'\n      ? ([255, 255, 255, 0] as TRGBAColorSource)\n      : Color.sourceFromHex(color) ||\n          Color.sourceFromRgb(color) ||\n          Color.sourceFromHsl(color) ||\n          // color is not recognized\n          // we default to black as canvas does\n          // eslint-disable-next-line no-constant-binary-expression\n          ((this.isUnrecognised = true) && ([0, 0, 0, 1] as TRGBAColorSource));\n  }\n\n  /**\n   * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @return {TRGBAColorSource}\n   */\n  getSource() {\n    return this._source;\n  }\n\n  /**\n   * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @param {TRGBAColorSource} source\n   */\n  setSource(source: TRGBAColorSource) {\n    this._source = source;\n  }\n\n  /**\n   * Returns color representation in RGB format\n   * @return {String} ex: rgb(0-255,0-255,0-255)\n   */\n  toRgb() {\n    const [r, g, b] = this.getSource();\n    return `rgb(${r},${g},${b})`;\n  }\n\n  /**\n   * Returns color representation in RGBA format\n   * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n   */\n  toRgba() {\n    return `rgba(${this.getSource().join(',')})`;\n  }\n\n  /**\n   * Returns color representation in HSL format\n   * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n   */\n  toHsl() {\n    const [h, s, l] = rgb2Hsl(...this.getSource());\n    return `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /**\n   * Returns color representation in HSLA format\n   * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n   */\n  toHsla() {\n    const [h, s, l, a] = rgb2Hsl(...this.getSource());\n    return `hsla(${h},${s}%,${l}%,${a})`;\n  }\n\n  /**\n   * Returns color representation in HEX format\n   * @return {String} ex: FF5555\n   */\n  toHex() {\n    const fullHex = this.toHexa();\n    return fullHex.slice(0, 6);\n  }\n\n  /**\n   * Returns color representation in HEXA format\n   * @return {String} ex: FF5555CC\n   */\n  toHexa() {\n    const [r, g, b, a] = this.getSource();\n    return `${hexify(r)}${hexify(g)}${hexify(b)}${hexify(Math.round(a * 255))}`;\n  }\n\n  /**\n   * Gets value of alpha channel for this color\n   * @return {Number} 0-1\n   */\n  getAlpha() {\n    return this.getSource()[3];\n  }\n\n  /**\n   * Sets value of alpha channel for this color\n   * @param {Number} alpha Alpha value 0-1\n   * @return {Color} thisArg\n   */\n  setAlpha(alpha: number) {\n    this._source[3] = alpha;\n    return this;\n  }\n\n  /**\n   * Transforms color to its grayscale representation\n   * @return {Color} thisArg\n   */\n  toGrayscale() {\n    this.setSource(greyAverage(this.getSource()));\n    return this;\n  }\n\n  /**\n   * Transforms color to its black and white representation\n   * @param {Number} threshold\n   * @return {Color} thisArg\n   */\n  toBlackWhite(threshold: number) {\n    const [average, , , a] = greyAverage(this.getSource()),\n      bOrW = average < (threshold || 127) ? 0 : 255;\n    this.setSource([bOrW, bOrW, bOrW, a]);\n    return this;\n  }\n\n  /**\n   * Overlays color with another color\n   * @param {String|Color} otherColor\n   * @return {Color} thisArg\n   */\n  overlayWith(otherColor: string | Color) {\n    if (!(otherColor instanceof Color)) {\n      otherColor = new Color(otherColor);\n    }\n\n    const source = this.getSource(),\n      otherAlpha = 0.5,\n      otherSource = otherColor.getSource(),\n      [R, G, B] = source.map((value, index) =>\n        Math.round(value * (1 - otherAlpha) + otherSource[index] * otherAlpha),\n      );\n\n    this.setSource([R, G, B, source[3]]);\n    return this;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {Color}\n   */\n  static fromRgb(color: string): Color {\n    return Color.fromRgba(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromRgba(color: string): Color {\n    return new Color(Color.sourceFromRgb(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromRgb(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reRGBa());\n    if (match) {\n      const [r, g, b] = match.slice(1, 4).map((value) => {\n        const parsedValue = parseFloat(value);\n        return value.endsWith('%')\n          ? Math.round(parsedValue * 2.55)\n          : parsedValue;\n      });\n      return [r, g, b, fromAlphaToFloat(match[4])];\n    }\n  }\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf Color\n   * @return {Color}\n   */\n  static fromHsl(color: string): Color {\n    return Color.fromHsla(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromHsla(color: string): Color {\n    return new Color(Color.sourceFromHsl(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {TRGBAColorSource | undefined} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  static sourceFromHsl(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reHSLa());\n    if (!match) {\n      return;\n    }\n    const match1degrees = Color.parseAngletoDegrees(match[1]);\n\n    const h = (((match1degrees % 360) + 360) % 360) / 360,\n      s = parseFloat(match[2]) / 100,\n      l = parseFloat(match[3]) / 100;\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      const q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n        p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      fromAlphaToFloat(match[4]),\n    ];\n  }\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color Color value ex: FF5555\n   * @return {Color}\n   */\n  static fromHex(color: string): Color {\n    return new Color(Color.sourceFromHex(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromHex(color: string): TRGBAColorSource | undefined {\n    if (color.match(reHex())) {\n      const value = color.slice(color.indexOf('#') + 1),\n        isShortNotation = value.length <= 4;\n      let expandedValue: string[];\n      if (isShortNotation) {\n        expandedValue = value.split('').map((hex) => hex + hex);\n      } else {\n        expandedValue = value.match(/.{2}/g)!;\n      }\n      const [r, g, b, a = 255] = expandedValue.map((hexCouple) =>\n        parseInt(hexCouple, 16),\n      );\n      return [r, g, b, a / 255];\n    }\n  }\n\n  /**\n   * Converts a string that could be any angle notation (50deg, 0.5turn, 2rad)\n   * into degrees without the 'deg' suffix\n   * @static\n   * @memberOf Color\n   * @param {String} value ex: 0deg, 0.5turn, 2rad\n   * @return {Number} number in degrees or NaN if inputs are invalid\n   */\n  static parseAngletoDegrees(value: string): number {\n    const lowercase = value.toLowerCase();\n    const numeric = parseFloat(lowercase);\n\n    if (lowercase.includes('rad')) {\n      return radiansToDegrees(numeric);\n    }\n\n    if (lowercase.includes('turn')) {\n      return numeric * 360;\n    }\n\n    // Value is probably just a number already in degrees eg '50'\n    return numeric;\n  }\n}\n","/**\n * Regex matching color in RGB or RGBA formats (ex: `rgb(0, 0, 0)`, `rgba(255, 100, 10, 0.5)`, `rgba( 255 , 100 , 10 , 0.5 )`, `rgb(1,1,1)`, `rgba(100%, 60%, 10%, 0.5)`)\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb\n * Formal syntax at the time of writing:\n * <rgb()> =\n *  rgb( [ <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )  |\n *  rgb( [ <number> | none ]{3} [ / [ <alpha-value> | none ] ]? )\n * <alpha-value> = <number> | <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an rgba or rgb CSS color value\n *\n * /^          # Beginning of the string\n * rgba?       # \"rgb\" or \"rgba\"\n * \\(\\s*       # Opening parenthesis and optional whitespace\n * (\\d{0,3}    # 0 to three digits R channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the first color component\n * %?          # Optional percent sign after the first color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits G channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the second color component\n * %?          # Optional percent sign after the second color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits B channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the third color component\n * %?          # Optional percent sign after the third color component\n * \\s*         # Optional whitespace\n * (?:         # Beginning of non-capturing group for alpha value\n *  \\s*        # Optional whitespace\n *  [,/]       # Comma or slash separator for alpha value\n *  \\s*        # Optional whitespace\n *  (\\d{0,3}   # Zero to three digits\n *    (?:\\.\\d+)? # Optional decimal with one or more digits\n *  )          # End of capturing group for alpha value\n *  %?         # Optional percent sign after alpha value\n *  \\s*        # Optional whitespace\n * )?          # End of non-capturing group for alpha value (optional)\n * \\)          # Closing parenthesis\n * $           # End of the string\n *\n * The alpha channel can be in the format 0.4 .7 or 1 or 73%\n *\n * WARNING this regex doesn't fail on off spec colors. it matches everything that could be a color.\n * So the spec does not allow for `rgba(30 , 45%  35, 49%)` but this will work anyways for us\n */\nexport const reRGBa = () =>\n  /^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HSL or HSLA formats (ex: hsl(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl\n * Formal syntax at the time of writing:\n * <hsl()> =\n *   hsl( [ <hue> | none ] [ <percentage> | none ] [ <percentage> | none ] [ / [ <alpha-value> | none ] ]? )\n *\n * <hue> =\n *   <number>  |\n *   <angle>\n *\n * <alpha-value> =\n *   <number>      |\n *   <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an hsla or hsl CSS color value\n *\n * /^hsla?\\(         // Matches the beginning of the string and the opening parenthesis of \"hsl\" or \"hsla\"\n * \\s*               // Matches any whitespace characters (space, tab, etc.) zero or more times\n * (\\d{0,3}          // Hue: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Hue: Optional (non capture group) decimal with one or more digits.\n * (?:deg|turn|rad)? // Hue: Optionally include suffix deg or turn or rad\n * )                 // Hue: End capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Saturation: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Saturation: Optional decimal with one or more digits in a non-capturing group\n * %?)               // Saturation: match optional % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Lightness: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Lightness: Optional decimal with one or more digits in a non-capturing group\n * %?)                // Lightness: match % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * (?:               // Alpha: Begins a non-capturing group for the alpha value\n *   \\s*             // Matches any whitespace characters zero or more times\n *   [,/]            // Matches a comma or forward slash\n *   \\s*             // Matches any whitespace characters zero or more times\n *   (\\d*(?:\\.\\d+)?%?) // Matches zero or more digits, optionally followed by a decimal point and one or more digits, followed by an optional percentage sign and captures it in a group\n *   \\s*             // Matches any whitespace characters zero or more times\n * )?                // Makes the alpha value group optional\n * \\)                // Matches the closing parenthesis\n * $/i               // Matches the end of the string and sets the regular expression to case-insensitive mode\n *\n * WARNING this regex doesn't fail on off spec colors. It matches everything that could be a color.\n * So the spec does not allow `hsl(30 , 45%  35, 49%)` but this will work anyways for us.\n */\nexport const reHSLa = () =>\n  /^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n */\nexport const reHex = () => /^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i;\n","import { Color } from '../../color/Color';\nimport { config } from '../../config';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, NONE } from '../../constants';\nimport type { TBBox, SVGElementName, SupportedSVGUnit } from '../../typedefs';\nimport { toFixed } from './toFixed';\n\n/**\n * Returns array of attributes for given svg that fabric parses\n * @param {SVGElementName} type Type of svg element (eg. 'circle')\n * @return {Array} string names of supported attributes\n */\nexport const getSvgAttributes = (type: SVGElementName) => {\n  const commonAttributes = ['instantiated_by_use', 'style', 'id', 'class'];\n  switch (type) {\n    case 'linearGradient':\n      return commonAttributes.concat([\n        'x1',\n        'y1',\n        'x2',\n        'y2',\n        'gradientUnits',\n        'gradientTransform',\n      ]);\n    case 'radialGradient':\n      return commonAttributes.concat([\n        'gradientUnits',\n        'gradientTransform',\n        'cx',\n        'cy',\n        'r',\n        'fx',\n        'fy',\n        'fr',\n      ]);\n    case 'stop':\n      return commonAttributes.concat(['offset', 'stop-color', 'stop-opacity']);\n  }\n  return commonAttributes;\n};\n\n/**\n * Converts from attribute value to pixel value if applicable.\n * Returns converted pixels or original value not converted.\n * @param {string} value number to operate on\n * @param {number} fontSize\n * @return {number}\n */\nexport const parseUnit = (value: string, fontSize = DEFAULT_SVG_FONT_SIZE) => {\n  const unit = /\\D{0,2}$/.exec(value),\n    number = parseFloat(value);\n  const dpi = config.DPI;\n  switch (unit?.[0] as SupportedSVGUnit) {\n    case 'mm':\n      return (number * dpi) / 25.4;\n\n    case 'cm':\n      return (number * dpi) / 2.54;\n\n    case 'in':\n      return number * dpi;\n\n    case 'pt':\n      return (number * dpi) / 72; // or * 4 / 3\n\n    case 'pc':\n      return ((number * dpi) / 72) * 12; // or * 16\n\n    case 'em':\n      return number * fontSize;\n\n    default:\n      return number;\n  }\n};\n\nexport type MeetOrSlice = 'meet' | 'slice';\n\nexport type MinMidMax = 'Min' | 'Mid' | 'Max' | 'none';\n\nexport type TPreserveArParsed = {\n  meetOrSlice: MeetOrSlice;\n  alignX: MinMidMax;\n  alignY: MinMidMax;\n};\n\n// align can be either none or undefined or a combination of mid/max\nconst parseAlign = (align: string): MinMidMax[] => {\n  //divide align in alignX and alignY\n  if (align && align !== NONE) {\n    return [align.slice(1, 4) as MinMidMax, align.slice(5, 8) as MinMidMax];\n  } else if (align === NONE) {\n    return [align, align];\n  }\n  return ['Mid', 'Mid'];\n};\n\n/**\n * Parse preserveAspectRatio attribute from element\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n * @param {string} attribute to be parsed\n * @return {Object} an object containing align and meetOrSlice attribute\n */\nexport const parsePreserveAspectRatioAttribute = (\n  attribute: string,\n): TPreserveArParsed => {\n  const [firstPart, secondPart] = attribute.trim().split(' ') as [\n    MinMidMax,\n    MeetOrSlice | undefined,\n  ];\n  const [alignX, alignY] = parseAlign(firstPart);\n  return {\n    meetOrSlice: secondPart || 'meet',\n    alignX,\n    alignY,\n  };\n};\n\n/**\n * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n * @param prop\n * @param value\n * @param {boolean} inlineStyle The default is inline style, the separator used is \":\", The other is \"=\"\n * @returns\n */\nexport const colorPropToSVG = (\n  prop: string,\n  value?: any,\n  inlineStyle = true,\n) => {\n  let colorValue;\n  let opacityValue;\n  if (!value) {\n    colorValue = 'none';\n  } else if (value.toLive) {\n    colorValue = `url(#SVGID_${value.id})`;\n  } else {\n    const color = new Color(value),\n      opacity = color.getAlpha();\n\n    colorValue = color.toRgb();\n    if (opacity !== 1) {\n      opacityValue = opacity.toString();\n    }\n  }\n  if (inlineStyle) {\n    return `${prop}: ${colorValue}; ${\n      opacityValue ? `${prop}-opacity: ${opacityValue}; ` : ''\n    }`;\n  } else {\n    return `${prop}=\"${colorValue}\" ${\n      opacityValue ? `${prop}-opacity=\"${opacityValue}\" ` : ''\n    }`;\n  }\n};\n\nexport const createSVGRect = (\n  color: string,\n  { left, top, width, height }: TBBox,\n  precision = config.NUM_FRACTION_DIGITS,\n) => {\n  const svgColor = colorPropToSVG(FILL, color, false);\n  const [x, y, w, h] = [left, top, width, height].map((value) =>\n    toFixed(value, precision),\n  );\n  return `<rect ${svgColor} x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\"></rect>`;\n};\n","import type { TSVGReviver } from '../../typedefs';\nimport { uid } from '../../util/internals/uid';\nimport { colorPropToSVG } from '../../util/misc/svgParsing';\nimport { FILL, NONE, STROKE } from '../../constants';\nimport type { FabricObject } from './FabricObject';\nimport { isFiller } from '../../util/typeAssertions';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nexport class FabricObjectSVGExportMixin {\n  /**\n   * When an object is being exported as SVG as a clippath, a reference inside the SVG is needed.\n   * This reference is a UID in the fabric namespace and is temporary stored here.\n   * @type {String}\n   */\n  declare clipPathId?: string;\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    skipShadow?: boolean,\n  ) {\n    const fillRule = this.fillRule ? this.fillRule : 'nonzero',\n      strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n      strokeDashArray = this.strokeDashArray\n        ? this.strokeDashArray.join(' ')\n        : NONE,\n      strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n      strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n      strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n      strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n      opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n      visibility = this.visible ? '' : ' visibility: hidden;',\n      filter = skipShadow ? '' : this.getSvgFilter(),\n      fill = colorPropToSVG(FILL, this.fill),\n      stroke = colorPropToSVG(STROKE, this.stroke);\n\n    return [\n      stroke,\n      'stroke-width: ',\n      strokeWidth,\n      '; ',\n      'stroke-dasharray: ',\n      strokeDashArray,\n      '; ',\n      'stroke-linecap: ',\n      strokeLineCap,\n      '; ',\n      'stroke-dashoffset: ',\n      strokeDashOffset,\n      '; ',\n      'stroke-linejoin: ',\n      strokeLineJoin,\n      '; ',\n      'stroke-miterlimit: ',\n      strokeMiterLimit,\n      '; ',\n      fill,\n      'fill-rule: ',\n      fillRule,\n      '; ',\n      'opacity: ',\n      opacity,\n      ';',\n      filter,\n      visibility,\n    ].join('');\n  }\n\n  /**\n   * Returns filter for svg shadow\n   * @return {String}\n   */\n  getSvgFilter(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.shadow ? `filter: url(#SVGID_${this.shadow.id});` : '';\n  }\n\n  /**\n   * Returns id attribute for svg output\n   * @return {String}\n   */\n  getSvgCommons(\n    this: FabricObjectSVGExportMixin & FabricObject & { id?: string },\n  ) {\n    return [\n      this.id ? `id=\"${this.id}\" ` : '',\n      this.clipPath\n        ? `clip-path=\"url(#${\n            (this.clipPath as FabricObjectSVGExportMixin & FabricObject)\n              .clipPathId\n          })\" `\n        : '',\n    ].join('');\n  }\n\n  /**\n   * Returns transform-string for svg-export\n   * @param {Boolean} use the full transform or the single object one.\n   * @return {String}\n   */\n  getSvgTransform(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    full?: boolean,\n    additionalTransform = '',\n  ) {\n    const transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n      svgTransform = `transform=\"${matrixToSVG(transform)}`;\n    return `${svgTransform}${additionalTransform}\" `;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * This function is implemented in each subclass\n   * This is just because typescript otherwise cryies all the time\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(_reviver?: TSVGReviver): string[] {\n    return [''];\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return this._createBaseSVGMarkup(this._toSVG(reviver), {\n      reviver,\n    });\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {\n        reviver,\n      })\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createBaseClipPathSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      reviver,\n      additionalTransform = '',\n    }: { reviver?: TSVGReviver; additionalTransform?: string } = {},\n  ) {\n    const commonPieces = [\n        this.getSvgTransform(true, additionalTransform),\n        this.getSvgCommons(),\n      ].join(''),\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    objectMarkup[index] = commonPieces;\n    return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      noStyle,\n      reviver,\n      withShadow,\n      additionalTransform,\n    }: {\n      noStyle?: boolean;\n      reviver?: TSVGReviver;\n      withShadow?: boolean;\n      additionalTransform?: string;\n    } = {},\n  ): string {\n    const styleInfo = noStyle ? '' : `style=\"${this.getSvgStyles()}\" `,\n      shadowInfo = withShadow ? `style=\"${this.getSvgFilter()}\" ` : '',\n      clipPath = this.clipPath as FabricObjectSVGExportMixin & FabricObject,\n      vectorEffect = this.strokeUniform\n        ? 'vector-effect=\"non-scaling-stroke\" '\n        : '',\n      absoluteClipPath = clipPath && clipPath.absolutePositioned,\n      stroke = this.stroke,\n      fill = this.fill,\n      shadow = this.shadow,\n      markup = [],\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    let clipPathMarkup;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      clipPathMarkup = `<clipPath id=\"${\n        clipPath.clipPathId\n      }\" >\\n${clipPath.toClipPathSVG(reviver)}</clipPath>\\n`;\n    }\n    if (absoluteClipPath) {\n      markup.push('<g ', shadowInfo, this.getSvgCommons(), ' >\\n');\n    }\n    markup.push(\n      '<g ',\n      this.getSvgTransform(false),\n      !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n      ' >\\n',\n    );\n    const commonPieces = [\n      styleInfo,\n      vectorEffect,\n      noStyle ? '' : this.addPaintOrder(),\n      ' ',\n      additionalTransform ? `transform=\"${additionalTransform}\" ` : '',\n    ].join('');\n    objectMarkup[index] = commonPieces;\n    if (isFiller(fill)) {\n      markup.push(fill.toSVG(this));\n    }\n    if (isFiller(stroke)) {\n      markup.push(stroke.toSVG(this));\n    }\n    if (shadow) {\n      markup.push(shadow.toSVG(this));\n    }\n    if (clipPath) {\n      markup.push(clipPathMarkup);\n    }\n    markup.push(objectMarkup.join(''));\n    markup.push('</g>\\n');\n    absoluteClipPath && markup.push('</g>\\n');\n    return reviver ? reviver(markup.join('')) : markup.join('');\n  }\n\n  addPaintOrder(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.paintFirst !== FILL ? ` paint-order=\"${this.paintFirst}\" ` : '';\n  }\n}\n","export function getSvgRegex(arr: string[]) {\n  return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n}\n","import { FILL, LEFT, STROKE, reNewline } from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { FabricText } from './Text';\n\nexport const TEXT_DECORATION_THICKNESS = 'textDecorationThickness';\n\nconst fontProperties = [\n  'fontSize',\n  'fontWeight',\n  'fontFamily',\n  'fontStyle',\n] as const;\n\nexport const textDecorationProperties = [\n  'underline',\n  'overline',\n  'linethrough',\n] as const;\n\nexport const textLayoutProperties: string[] = [\n  ...fontProperties,\n  'lineHeight',\n  'text',\n  'charSpacing',\n  'textAlign',\n  'styles',\n  'path',\n  'pathStartOffset',\n  'pathSide',\n  'pathAlign',\n];\n\nexport const additionalProps = [\n  ...textLayoutProperties,\n  ...textDecorationProperties,\n  'textBackgroundColor',\n  'direction',\n  TEXT_DECORATION_THICKNESS,\n] as const;\n\nexport type StylePropertiesType =\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'fontSize'\n  | 'fontFamily'\n  | 'fontWeight'\n  | 'fontStyle'\n  | 'textBackgroundColor'\n  | 'deltaY'\n  | 'overline'\n  | 'underline'\n  | 'linethrough'\n  | typeof TEXT_DECORATION_THICKNESS;\n\nexport const styleProperties: Readonly<StylePropertiesType[]> = [\n  ...fontProperties,\n  ...textDecorationProperties,\n  STROKE,\n  'strokeWidth',\n  FILL,\n  'deltaY',\n  'textBackgroundColor',\n  TEXT_DECORATION_THICKNESS,\n] as const;\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textDefaultValues: Partial<TClassProperties<FabricText>> = {\n  _reNewline: reNewline,\n  _reSpacesAndTabs: /[ \\t\\r]/g,\n  _reSpaceAndTab: /[ \\t\\r]/,\n  _reWords: /\\S+/g,\n  fontSize: 40,\n  fontWeight: 'normal',\n  fontFamily: 'Times New Roman',\n  underline: false,\n  overline: false,\n  linethrough: false,\n  textAlign: LEFT,\n  fontStyle: 'normal',\n  lineHeight: 1.16,\n  textBackgroundColor: '',\n  stroke: null,\n  shadow: null,\n  path: undefined,\n  pathStartOffset: 0,\n  pathSide: LEFT,\n  pathAlign: 'baseline',\n  charSpacing: 0,\n  deltaY: 0,\n  direction: 'ltr',\n  CACHE_FONT_SIZE: 400,\n  MIN_TEXT_WIDTH: 2,\n  // Text magic numbers\n  superscript: {\n    size: 0.6, // fontSize factor\n    baseline: -0.35, // baseline-shift factor (upwards)\n  },\n  subscript: {\n    size: 0.6, // fontSize factor\n    baseline: 0.11, // baseline-shift factor (downwards)\n  },\n  _fontSizeFraction: 0.222,\n  offsets: {\n    underline: 0.1,\n    linethrough: -0.28167, // added 1/30 to original number\n    overline: -0.81333, // added 1/15 to original number\n  },\n  _fontSizeMult: 1.13,\n  [TEXT_DECORATION_THICKNESS]: 66.667, // before implementation was 1/15\n};\n\nexport const JUSTIFY = 'justify';\nexport const JUSTIFY_LEFT = 'justify-left';\nexport const JUSTIFY_RIGHT = 'justify-right';\nexport const JUSTIFY_CENTER = 'justify-center';\n","import { getSvgRegex } from './getSvgRegex';\nimport { LEFT, TOP } from '../constants';\nimport { TEXT_DECORATION_THICKNESS } from '../shapes/Text/constants';\n\n// matches, e.g.: +14.56e-12, etc.\nexport const reNum = String.raw`[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?`;\nexport const viewportSeparator = String.raw`(?:\\s*,?\\s+|\\s*,\\s*)`;\n\nexport const svgNS = 'http://www.w3.org/2000/svg';\n\nexport const reFontDeclaration = new RegExp(\n  '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n    reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' +\n    reNum +\n    '))?\\\\s+(.*)',\n);\n\nexport const svgValidTagNames = [\n    'path',\n    'circle',\n    'polygon',\n    'polyline',\n    'ellipse',\n    'rect',\n    'line',\n    'image',\n    'text',\n  ],\n  svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n  svgInvalidAncestors = [\n    'pattern',\n    'defs',\n    'symbol',\n    'metadata',\n    'clipPath',\n    'mask',\n    'desc',\n  ],\n  svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n  attributesMap = {\n    cx: LEFT,\n    x: LEFT,\n    r: 'radius',\n    cy: TOP,\n    y: TOP,\n    display: 'visible',\n    visibility: 'visible',\n    transform: 'transformMatrix',\n    'fill-opacity': 'fillOpacity',\n    'fill-rule': 'fillRule',\n    'font-family': 'fontFamily',\n    'font-size': 'fontSize',\n    'font-style': 'fontStyle',\n    'font-weight': 'fontWeight',\n    'letter-spacing': 'charSpacing',\n    'paint-order': 'paintFirst',\n    'stroke-dasharray': 'strokeDashArray',\n    'stroke-dashoffset': 'strokeDashOffset',\n    'stroke-linecap': 'strokeLineCap',\n    'stroke-linejoin': 'strokeLineJoin',\n    'stroke-miterlimit': 'strokeMiterLimit',\n    'stroke-opacity': 'strokeOpacity',\n    'stroke-width': 'strokeWidth',\n    'text-decoration': 'textDecoration',\n    'text-anchor': 'textAnchor',\n    opacity: 'opacity',\n    'clip-path': 'clipPath',\n    'clip-rule': 'clipRule',\n    'vector-effect': 'strokeUniform',\n    'image-rendering': 'imageSmoothing',\n    'text-decoration-thickness': TEXT_DECORATION_THICKNESS,\n  },\n  fSize = 'font-size',\n  cPath = 'clip-path';\n\nexport const svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n\nexport const svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n\nexport const svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n\nexport const reViewBoxAttrValue = new RegExp(\n  String.raw`^\\s*(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})${viewportSeparator}(${reNum})\\s*$`,\n);\n","import type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n\nconst unitVectorX = new Point(1, 0);\nconst zero = new Point();\n\n/**\n * Rotates `vector` with `radians`\n * @param {Point} vector The vector to rotate (x and y)\n * @param {Number} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotateVector = (vector: Point, radians: TRadian) =>\n  vector.rotate(radians);\n\n/**\n * Creates a vector from points represented as a point\n *\n * @param {Point} from\n * @param {Point} to\n * @returns {Point} vector\n */\nexport const createVector = (from: XY, to: XY): Point =>\n  new Point(to).subtract(from);\n\n/**\n * return the magnitude of a vector\n * @return {number}\n */\nexport const magnitude = (point: Point) => point.distanceFrom(zero);\n\n/**\n * Calculates the angle between 2 vectors\n * @param {Point} a\n * @param {Point} b\n * @returns the angle in radians from `a` to `b`\n */\nexport const calcAngleBetweenVectors = (a: Point, b: Point): TRadian =>\n  Math.atan2(crossProduct(a, b), dotProduct(a, b)) as TRadian;\n\n/**\n * Calculates the angle between the x axis and the vector\n * @param {Point} v\n * @returns the angle in radians of `v`\n */\nexport const calcVectorRotation = (v: Point) =>\n  calcAngleBetweenVectors(unitVectorX, v);\n\n/**\n * @param {Point} v\n * @returns {Point} vector representing the unit vector pointing to the direction of `v`\n */\nexport const getUnitVector = (v: Point): Point =>\n  v.eq(zero) ? v : v.scalarDivide(magnitude(v));\n\n/**\n * @param {Point} v\n * @param {Boolean} [counterClockwise] the direction of the orthogonal vector, defaults to `true`\n * @returns {Point} the unit orthogonal vector\n */\nexport const getOrthonormalVector = (\n  v: Point,\n  counterClockwise = true,\n): Point =>\n  getUnitVector(new Point(-v.y, v.x).scalarMultiply(counterClockwise ? 1 : -1));\n\n/**\n * Cross product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number} the magnitude of Z vector\n */\nexport const crossProduct = (a: Point, b: Point): number =>\n  a.x * b.y - a.y * b.x;\n\n/**\n * Dot product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number}\n */\nexport const dotProduct = (a: Point, b: Point): number => a.x * b.x + a.y * b.y;\n\n/**\n * Checks if the vector is between two others. It is considered\n * to be inside when the vector to be tested is between the\n * initial vector and the final vector (included) in a counterclockwise direction.\n * @param {Point} t vector to be tested\n * @param {Point} a initial vector\n * @param {Point} b final vector\n * @returns {boolean} true if the vector is among the others\n */\nexport const isBetweenVectors = (t: Point, a: Point, b: Point): boolean => {\n  if (t.eq(a) || t.eq(b)) return true;\n  const AxB = crossProduct(a, b),\n    AxT = crossProduct(a, t),\n    BxT = crossProduct(b, t);\n  return AxB >= 0 ? AxT >= 0 && BxT <= 0 : !(AxT <= 0 && BxT >= 0);\n};\n","import { classRegistry } from './ClassRegistry';\nimport { Color } from './color/Color';\nimport { config } from './config';\nimport { reNum } from './parser/constants';\nimport { Point } from './Point';\nimport type { FabricObject } from './shapes/Object/FabricObject';\nimport type { TClassProperties } from './typedefs';\nimport { uid } from './util/internals/uid';\nimport { pickBy } from './util/misc/pick';\nimport { degreesToRadians } from './util/misc/radiansDegreesConversion';\nimport { toFixed } from './util/misc/toFixed';\nimport { rotateVector } from './util/misc/vectors';\n\n/**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * - (?:\\s|^): This part captures either a whitespace character (\\s) or the beginning of a line (^). It's non-capturing (due to (?:...)), meaning it doesn't create a capturing group.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: This captures the first component of the shadow, which is the horizontal offset. Breaking it down:\n   *   - (-?\\d+): Captures an optional minus sign followed by one or more digits (integer part of the number).\n   *   - (?:\\.\\d*)?: Optionally captures a decimal point followed by zero or more digits (decimal part of the number).\n   *   - (?:px)?: Optionally captures the \"px\" unit.\n   *   - (?:\\s?|$): Captures either an optional whitespace or the end of the line. This whole part is wrapped in a non-capturing group and marked as optional with ?.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: Similar to the previous step, this captures the vertical offset.\n\n(\\d+(?:\\.\\d*)?(?:px)?)?: This captures the blur radius. It's similar to the horizontal offset but without the optional minus sign.\n\n(?:\\s+(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?){0,1}: This captures an optional part for the color. It allows for whitespace followed by a component with an optional minus sign, digits, decimal point, and \"px\" unit.\n\n(?:$|\\s): This captures either the end of the line or a whitespace character. It ensures that the match ends either at the end of the string or with a whitespace character.\n   */\n// eslint-disable-next-line max-len\n\nconst shadowOffsetRegex = '(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?';\n\nconst reOffsetsAndBlur = new RegExp(\n  '(?:\\\\s|^)' +\n    shadowOffsetRegex +\n    shadowOffsetRegex +\n    '(' +\n    reNum +\n    '?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)',\n);\n\nexport const shadowDefaultValues: Partial<TClassProperties<Shadow>> = {\n  color: 'rgb(0,0,0)',\n  blur: 0,\n  offsetX: 0,\n  offsetY: 0,\n  affectStroke: false,\n  includeDefaultValues: true,\n  nonScaling: false,\n};\n\nexport type SerializedShadowOptions = {\n  color: string;\n  blur: number;\n  offsetX: number;\n  offsetY: number;\n  affectStroke: boolean;\n  nonScaling: boolean;\n  type: string;\n};\n\nexport class Shadow {\n  /**\n   * Shadow color\n   * @type String\n   * @default\n   */\n  declare color: string;\n\n  /**\n   * Shadow blur\n   * @type Number\n   */\n  declare blur: number;\n\n  /**\n   * Shadow horizontal offset\n   * @type Number\n   * @default\n   */\n  declare offsetX: number;\n\n  /**\n   * Shadow vertical offset\n   * @type Number\n   * @default\n   */\n  declare offsetY: number;\n\n  /**\n   * Whether the shadow should affect stroke operations\n   * @type Boolean\n   * @default\n   */\n  declare affectStroke: boolean;\n\n  /**\n   * Indicates whether toObject should include default values\n   * @type Boolean\n   * @default\n   */\n  declare includeDefaultValues: boolean;\n\n  /**\n   * When `false`, the shadow will scale with the object.\n   * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\n   * default to false\n   * @type Boolean\n   * @default\n   */\n  declare nonScaling: boolean;\n\n  declare id: number;\n\n  static ownDefaults = shadowDefaultValues;\n\n  static type = 'shadow';\n\n  /**\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n   */\n  constructor(options: Partial<TClassProperties<Shadow>>);\n  constructor(svgAttribute: string);\n  constructor(arg0: string | Partial<TClassProperties<Shadow>>) {\n    const options: Partial<TClassProperties<Shadow>> =\n      typeof arg0 === 'string' ? Shadow.parseShadow(arg0) : arg0;\n    Object.assign(this, Shadow.ownDefaults, options);\n    this.id = uid();\n  }\n\n  /**\n   * @param {String} value Shadow value to parse\n   * @return {Object} Shadow object with color, offsetX, offsetY and blur\n   */\n  static parseShadow(value: string) {\n    const shadowStr = value.trim(),\n      [, offsetX = 0, offsetY = 0, blur = 0] = (\n        reOffsetsAndBlur.exec(shadowStr) || []\n      ).map((value) => parseFloat(value) || 0),\n      color = (shadowStr.replace(reOffsetsAndBlur, '') || 'rgb(0,0,0)').trim();\n\n    return {\n      color,\n      offsetX,\n      offsetY,\n      blur,\n    };\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n   * @return {String} Returns CSS3 text-shadow declaration\n   */\n  toString() {\n    return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n  }\n\n  /**\n   * Returns SVG representation of a shadow\n   * @param {FabricObject} object\n   * @return {String} SVG representation of a shadow\n   */\n  toSVG(object: FabricObject) {\n    const offset = rotateVector(\n        new Point(this.offsetX, this.offsetY),\n        degreesToRadians(-object.angle),\n      ),\n      BLUR_BOX = 20,\n      color = new Color(this.color);\n    let fBoxX = 40,\n      fBoxY = 40;\n\n    if (object.width && object.height) {\n      //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n      // we add some extra space to filter box to contain the blur ( 20 )\n      fBoxX =\n        toFixed(\n          (Math.abs(offset.x) + this.blur) / object.width,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n      fBoxY =\n        toFixed(\n          (Math.abs(offset.y) + this.blur) / object.height,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n    }\n    if (object.flipX) {\n      offset.x *= -1;\n    }\n    if (object.flipY) {\n      offset.y *= -1;\n    }\n\n    return `<filter id=\"SVGID_${this.id}\" y=\"-${fBoxY}%\" height=\"${\n      100 + 2 * fBoxY\n    }%\" x=\"-${fBoxX}%\" width=\"${\n      100 + 2 * fBoxX\n    }%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${toFixed(\n      this.blur ? this.blur / 2 : 0,\n      config.NUM_FRACTION_DIGITS,\n    )}\"></feGaussianBlur>\\n\\t<feOffset dx=\"${toFixed(\n      offset.x,\n      config.NUM_FRACTION_DIGITS,\n    )}\" dy=\"${toFixed(\n      offset.y,\n      config.NUM_FRACTION_DIGITS,\n    )}\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"${color.toRgb()}\" flood-opacity=\"${color.getAlpha()}\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n`;\n  }\n\n  /**\n   * Returns object representation of a shadow\n   * @return {Object} Object representation of a shadow instance\n   */\n  toObject() {\n    const data: SerializedShadowOptions = {\n      color: this.color,\n      blur: this.blur,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      affectStroke: this.affectStroke,\n      nonScaling: this.nonScaling,\n      type: (this.constructor as typeof Shadow).type,\n    };\n    const defaults = Shadow.ownDefaults as SerializedShadowOptions;\n    return !this.includeDefaultValues\n      ? pickBy(data, (value, key) => value !== defaults[key])\n      : data;\n  }\n\n  static async fromObject(options: Partial<TClassProperties<Shadow>>) {\n    return new this(options);\n  }\n}\n\nclassRegistry.setClass(Shadow, 'shadow');\n","export const capValue = (min: number, value: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n","import {\n  TOP,\n  LEFT,\n  SCALE_Y,\n  SCALE_X,\n  SKEW_X,\n  SKEW_Y,\n  FILL,\n  STROKE,\n} from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { InteractiveFabricObject } from './InteractiveObject';\nimport type { FabricObject } from './Object';\n\nexport const stateProperties = [\n  TOP,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  'flipX',\n  'flipY',\n  'originX',\n  'originY',\n  'angle',\n  'opacity',\n  'globalCompositeOperation',\n  'shadow',\n  'visible',\n  SKEW_X,\n  SKEW_Y,\n];\n\nexport const cacheProperties = [\n  FILL,\n  STROKE,\n  'strokeWidth',\n  'strokeDashArray',\n  'width',\n  'height',\n  'paintFirst',\n  'strokeUniform',\n  'strokeLineCap',\n  'strokeDashOffset',\n  'strokeLineJoin',\n  'strokeMiterLimit',\n  'backgroundColor',\n  'clipPath',\n];\n\nexport const fabricObjectDefaultValues: Partial<\n  TClassProperties<FabricObject>\n> = {\n  // see composeMatrix() to see order of transforms. First defaults listed based on this\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  angle: 0,\n  flipX: false,\n  flipY: false,\n  scaleX: 1,\n  scaleY: 1,\n  minScaleLimit: 0,\n  skewX: 0,\n  skewY: 0,\n  originX: LEFT,\n  originY: TOP,\n  strokeWidth: 1,\n  strokeUniform: false,\n  padding: 0,\n  opacity: 1,\n  paintFirst: FILL,\n  fill: 'rgb(0,0,0)',\n  fillRule: 'nonzero',\n  stroke: null,\n  strokeDashArray: null,\n  strokeDashOffset: 0,\n  strokeLineCap: 'butt',\n  strokeLineJoin: 'miter',\n  strokeMiterLimit: 4,\n  globalCompositeOperation: 'source-over',\n  backgroundColor: '',\n  shadow: null,\n  visible: true,\n  includeDefaultValues: true,\n  excludeFromExport: false,\n  objectCaching: true,\n  clipPath: undefined,\n  inverted: false,\n  absolutePositioned: false,\n  centeredRotation: true,\n  centeredScaling: false,\n  dirty: true,\n} as const;\n\nexport const interactiveObjectDefaultValues: Partial<\n  TClassProperties<InteractiveFabricObject>\n> = {\n  noScaleCache: true,\n  lockMovementX: false,\n  lockMovementY: false,\n  lockRotation: false,\n  lockScalingX: false,\n  lockScalingY: false,\n  lockSkewingX: false,\n  lockSkewingY: false,\n  lockScalingFlip: false,\n  cornerSize: 13,\n  touchCornerSize: 24,\n  transparentCorners: true,\n  cornerColor: 'rgb(178,204,255)',\n  cornerStrokeColor: '',\n  cornerStyle: 'rect',\n  cornerDashArray: null,\n  hasControls: true,\n  borderColor: 'rgb(178,204,255)',\n  borderDashArray: null,\n  borderOpacityWhenMoving: 0.4,\n  borderScaleFactor: 1,\n  hasBorders: true,\n  selectionBackgroundColor: '',\n  selectable: true,\n  evented: true,\n  perPixelTargetFind: false,\n  activeOn: 'down',\n  hoverCursor: null,\n  moveCursor: null,\n};\n","/**\n * Easing functions\n * @see {@link http://gizma.com/easing/ Easing Equations by Robert Penner}\n */\n\nimport { twoMathPi, halfPI } from '../../constants';\nimport type { TEasingFunction } from './types';\n\nconst normalize = (a: number, c: number, p: number, s: number) => {\n  if (a < Math.abs(c)) {\n    a = c;\n    s = p / 4;\n  } else {\n    //handle the 0/0 case:\n    if (c === 0 && a === 0) {\n      s = (p / twoMathPi) * Math.asin(1);\n    } else {\n      s = (p / twoMathPi) * Math.asin(c / a);\n    }\n  }\n  return { a, c, p, s };\n};\n\nconst elastic = (\n  a: number,\n  s: number,\n  p: number,\n  t: number,\n  d: number,\n): number =>\n  a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * twoMathPi) / p);\n\n/**\n * Default sinusoidal easing\n */\nexport const defaultEasing: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Cubic easing in\n */\nexport const easeInCubic: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 3 + b;\n\n/**\n * Cubic easing out\n */\nexport const easeOutCubic: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 3 + 1) + b;\n\n/**\n * Cubic easing in and out\n */\nexport const easeInOutCubic: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 3 + b;\n  }\n  return (c / 2) * ((t - 2) ** 3 + 2) + b;\n};\n\n/**\n * Quartic easing in\n */\nexport const easeInQuart: TEasingFunction = (t, b, c, d) =>\n  c * (t /= d) * t ** 3 + b;\n\n/**\n * Quartic easing out\n */\nexport const easeOutQuart: TEasingFunction = (t, b, c, d) =>\n  -c * ((t = t / d - 1) * t ** 3 - 1) + b;\n\n/**\n * Quartic easing in and out\n */\nexport const easeInOutQuart: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 4 + b;\n  }\n  return (-c / 2) * ((t -= 2) * t ** 3 - 2) + b;\n};\n\n/**\n * Quintic easing in\n */\nexport const easeInQuint: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 5 + b;\n\n/**\n * Quintic easing out\n */\nexport const easeOutQuint: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 5 + 1) + b;\n\n/**\n * Quintic easing in and out\n */\nexport const easeInOutQuint: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 5 + b;\n  }\n  return (c / 2) * ((t - 2) ** 5 + 2) + b;\n};\n\n/**\n * Sinusoidal easing in\n */\nexport const easeInSine: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Sinusoidal easing out\n */\nexport const easeOutSine: TEasingFunction = (t, b, c, d) =>\n  c * Math.sin((t / d) * halfPI) + b;\n\n/**\n * Sinusoidal easing in and out\n */\nexport const easeInOutSine: TEasingFunction = (t, b, c, d) =>\n  (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;\n\n/**\n * Exponential easing in\n */\nexport const easeInExpo: TEasingFunction = (t, b, c, d) =>\n  t === 0 ? b : c * 2 ** (10 * (t / d - 1)) + b;\n\n/**\n * Exponential easing out\n */\nexport const easeOutExpo: TEasingFunction = (t, b, c, d) =>\n  t === d ? b + c : c * -(2 ** ((-10 * t) / d) + 1) + b;\n\n/**\n * Exponential easing in and out\n */\nexport const easeInOutExpo: TEasingFunction = (t, b, c, d) => {\n  if (t === 0) {\n    return b;\n  }\n  if (t === d) {\n    return b + c;\n  }\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * 2 ** (10 * (t - 1)) + b;\n  }\n  return (c / 2) * -(2 ** (-10 * --t) + 2) + b;\n};\n\n/**\n * Circular easing in\n */\nexport const easeInCirc: TEasingFunction = (t, b, c, d) =>\n  -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\n/**\n * Circular easing out\n */\nexport const easeOutCirc: TEasingFunction = (t, b, c, d) =>\n  c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\n/**\n * Circular easing in and out\n */\nexport const easeInOutCirc: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (-c / 2) * (Math.sqrt(1 - t ** 2) - 1) + b;\n  }\n  return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n};\n\n/**\n * Elastic easing in\n */\nexport const easeInElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP } = normalize(a, c, p, s);\n  return -elastic(normA, normS, normP, t, d) + b;\n};\n\n/**\n * Elastic easing out\n */\nexport const easeOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  return (\n    normA * 2 ** (-10 * t) * Math.sin(((t * d - normS) * twoMathPi) / normP) +\n    normC +\n    b\n  );\n};\n\n/**\n * Elastic easing in and out\n */\nexport const easeInOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d / 2;\n  if (t === 2) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * (0.3 * 1.5);\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  if (t < 1) {\n    return -0.5 * elastic(normA, normS, normP, t, d) + b;\n  }\n  return (\n    normA *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t * d - normS) * twoMathPi) / normP) *\n      0.5 +\n    normC +\n    b\n  );\n};\n\n/**\n * Backwards easing in\n */\nexport const easeInBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * (t /= d) * t * ((s + 1) * t - s) + b;\n\n/**\n * Backwards easing out\n */\nexport const easeOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\n/**\n * Backwards easing in and out\n */\nexport const easeInOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n  }\n  return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n};\n\n/**\n * Bouncing easing out\n */\nexport const easeOutBounce: TEasingFunction = (t, b, c, d) => {\n  if ((t /= d) < 1 / 2.75) {\n    return c * (7.5625 * t * t) + b;\n  } else if (t < 2 / 2.75) {\n    return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n  } else if (t < 2.5 / 2.75) {\n    return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n  } else {\n    return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n  }\n};\n\n/**\n * Bouncing easing in\n */\nexport const easeInBounce: TEasingFunction = (t, b, c, d) =>\n  c - easeOutBounce(d - t, 0, c, d) + b;\n\n/**\n * Bouncing easing in and out\n */\nexport const easeInOutBounce: TEasingFunction = (t, b, c, d) =>\n  t < d / 2\n    ? easeInBounce(t * 2, 0, c, d) * 0.5 + b\n    : easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\n/**\n * Quadratic easing in\n */\nexport const easeInQuad: TEasingFunction = (t, b, c, d) => c * (t /= d) * t + b;\n\n/**\n * Quadratic easing out\n */\nexport const easeOutQuad: TEasingFunction = (t, b, c, d) =>\n  -c * (t /= d) * (t - 2) + b;\n\n/**\n * Quadratic easing in and out\n */\nexport const easeInOutQuad: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 2 + b;\n  }\n  return (-c / 2) * (--t * (t - 2) - 1) + b;\n};\n","import { noop } from '../../constants';\nimport { requestAnimFrame } from './AnimationFrameProvider';\nimport { runningAnimations } from './AnimationRegistry';\nimport { defaultEasing } from './easing';\nimport type {\n  AnimationState,\n  TAbortCallback,\n  TBaseAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultAbort = () => false;\n\nexport abstract class AnimationBase<\n  T extends number | number[] = number | number[],\n> {\n  declare readonly startValue: T;\n  declare readonly endValue: T;\n  declare readonly duration: number;\n  declare readonly delay: number;\n\n  protected declare readonly byValue: T;\n  protected declare readonly easing: TEasingFunction<T>;\n\n  private declare readonly _onStart: VoidFunction;\n  private declare readonly _onChange: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _onComplete: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _abort: TAbortCallback<T>;\n\n  /**\n   * Used to register the animation to a target object\n   * so that it can be cancelled within the object context\n   */\n  declare readonly target?: unknown;\n\n  private _state: AnimationState = 'pending';\n  /**\n   * Time %, or the ratio of `timeElapsed / duration`\n   * @see tick\n   */\n  durationProgress = 0;\n  /**\n   * Value %, or the ratio of `(currentValue - startValue) / (endValue - startValue)`\n   */\n  valueProgress = 0;\n  /**\n   * Current value\n   */\n  declare value: T;\n  /**\n   * Animation start time ms\n   */\n  private declare startTime: number;\n\n  constructor({\n    startValue,\n    byValue,\n    duration = 500,\n    delay = 0,\n    easing = defaultEasing,\n    onStart = noop,\n    onChange = noop,\n    onComplete = noop,\n    abort = defaultAbort,\n    target,\n  }: TBaseAnimationOptions<T>) {\n    this.tick = this.tick.bind(this);\n\n    this.duration = duration;\n    this.delay = delay;\n    this.easing = easing;\n    this._onStart = onStart;\n    this._onChange = onChange;\n    this._onComplete = onComplete;\n    this._abort = abort;\n    this.target = target;\n\n    this.startValue = startValue;\n    this.byValue = byValue;\n    this.value = this.startValue;\n    this.endValue = Object.freeze(this.calculate(this.duration).value);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  isDone() {\n    return this._state === 'aborted' || this._state === 'completed';\n  }\n\n  /**\n   * Calculate the current value based on the easing parameters\n   * @param timeElapsed in ms\n   * @protected\n   */\n  protected abstract calculate(timeElapsed: number): {\n    value: T;\n    valueProgress: number;\n  };\n\n  start() {\n    const firstTick: FrameRequestCallback = (timestamp) => {\n      if (this._state !== 'pending') return;\n      this.startTime = timestamp || +new Date();\n      this._state = 'running';\n      this._onStart();\n      this.tick(this.startTime);\n    };\n\n    this.register();\n\n    // setTimeout(cb, 0) will run cb on the next frame, causing a delay\n    // we don't want that\n    if (this.delay > 0) {\n      setTimeout(() => requestAnimFrame(firstTick), this.delay);\n    } else {\n      requestAnimFrame(firstTick);\n    }\n  }\n\n  private tick(t: number) {\n    const durationMs = (t || +new Date()) - this.startTime;\n    const boundDurationMs = Math.min(durationMs, this.duration);\n    this.durationProgress = boundDurationMs / this.duration;\n    const { value, valueProgress } = this.calculate(boundDurationMs);\n    this.value = Object.freeze(value);\n    this.valueProgress = valueProgress;\n\n    if (this._state === 'aborted') {\n      return;\n    } else if (\n      this._abort(this.value, this.valueProgress, this.durationProgress)\n    ) {\n      this._state = 'aborted';\n      this.unregister();\n    } else if (durationMs >= this.duration) {\n      this.durationProgress = this.valueProgress = 1;\n      this._onChange(this.endValue, this.valueProgress, this.durationProgress);\n      this._state = 'completed';\n      this._onComplete(\n        this.endValue,\n        this.valueProgress,\n        this.durationProgress,\n      );\n      this.unregister();\n    } else {\n      this._onChange(this.value, this.valueProgress, this.durationProgress);\n      requestAnimFrame(this.tick);\n    }\n  }\n\n  private register() {\n    runningAnimations.push(this as unknown as AnimationBase);\n  }\n\n  private unregister() {\n    runningAnimations.remove(this as unknown as AnimationBase);\n  }\n\n  abort() {\n    this._state = 'aborted';\n    this.unregister();\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ValueAnimationOptions } from './types';\n\nexport class ValueAnimation extends AnimationBase<number> {\n  constructor({\n    startValue = 0,\n    endValue = 100,\n    ...otherOptions\n  }: ValueAnimationOptions) {\n    super({\n      ...otherOptions,\n      startValue,\n      byValue: endValue - startValue,\n    });\n  }\n\n  protected calculate(timeElapsed: number) {\n    const value = this.easing(\n      timeElapsed,\n      this.startValue,\n      this.byValue,\n      this.duration,\n    );\n    return {\n      value,\n      valueProgress: Math.abs((value - this.startValue) / this.byValue),\n    };\n  }\n}\n","import { AnimationBase } from './AnimationBase';\nimport type { ArrayAnimationOptions } from './types';\n\nexport class ArrayAnimation extends AnimationBase<number[]> {\n  constructor({\n    startValue = [0],\n    endValue = [100],\n    ...options\n  }: ArrayAnimationOptions) {\n    super({\n      ...options,\n      startValue,\n      byValue: endValue.map((value, i) => value - startValue[i]),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const values = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    );\n    return {\n      value: values,\n      valueProgress: Math.abs(\n        (values[0] - this.startValue[0]) / this.byValue[0],\n      ),\n    };\n  }\n}\n","import { Color } from '../../color/Color';\nimport type { TRGBAColorSource } from '../../color/typedefs';\nimport { halfPI } from '../../constants';\nimport { capValue } from '../misc/capValue';\nimport { AnimationBase } from './AnimationBase';\nimport type {\n  ColorAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultColorEasing: TEasingFunction = (\n  timeElapsed,\n  startValue,\n  byValue,\n  duration,\n) => {\n  const durationProgress = 1 - Math.cos((timeElapsed / duration) * halfPI);\n  return startValue + byValue * durationProgress;\n};\n\nconst wrapColorCallback = <R>(\n  callback?: TOnAnimationChangeCallback<string, R>,\n) =>\n  callback &&\n  ((rgba: TRGBAColorSource, valueProgress: number, durationProgress: number) =>\n    callback(new Color(rgba).toRgba(), valueProgress, durationProgress));\n\nexport class ColorAnimation extends AnimationBase<TRGBAColorSource> {\n  constructor({\n    startValue,\n    endValue,\n    easing = defaultColorEasing,\n    onChange,\n    onComplete,\n    abort,\n    ...options\n  }: ColorAnimationOptions) {\n    const startColor = new Color(startValue).getSource();\n    const endColor = new Color(endValue).getSource();\n    super({\n      ...options,\n      startValue: startColor,\n      byValue: endColor.map(\n        (value, i) => value - startColor[i],\n      ) as TRGBAColorSource,\n      easing,\n      onChange: wrapColorCallback(onChange),\n      onComplete: wrapColorCallback(onComplete),\n      abort: wrapColorCallback(abort),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const [r, g, b, a] = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    ) as TRGBAColorSource;\n    const value = [\n      ...[r, g, b].map(Math.round),\n      capValue(0, a, 1),\n    ] as TRGBAColorSource;\n    return {\n      value,\n      valueProgress:\n        // to correctly calculate the change ratio we must find a changed value\n        value\n          .map((p, i) =>\n            this.byValue[i] !== 0\n              ? Math.abs((p - this.startValue[i]) / this.byValue[i])\n              : 0,\n          )\n          .find((p) => p !== 0) || 0,\n    };\n  }\n}\n","import { ValueAnimation } from './ValueAnimation';\nimport { ArrayAnimation } from './ArrayAnimation';\nimport { ColorAnimation } from './ColorAnimation';\nimport type {\n  ValueAnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n} from './types';\nimport type { TColorArg } from '../../color/typedefs';\n\nexport type TAnimation<T extends number | number[] | TColorArg> =\n  T extends TColorArg\n    ? ColorAnimation\n    : T extends number[]\n      ? ArrayAnimation\n      : ValueAnimation;\n\nconst isArrayAnimation = (\n  options: ArrayAnimationOptions | ValueAnimationOptions,\n): options is ArrayAnimationOptions => {\n  return Array.isArray(options.startValue) || Array.isArray(options.endValue);\n};\n\n/**\n * Changes value(s) from startValue to endValue within a certain period of time,\n * invoking callbacks as the value(s) change.\n *\n * @example\n * animate({\n *   startValue: 1,\n *   endValue: 0,\n *   onChange: (v) => {\n *     obj.set('opacity', v);\n *     // since we are running in a requested frame we should call `renderAll` and not `requestRenderAll`\n *     canvas.renderAll();\n *   }\n * });\n *\n * @example Using lists:\n * animate({\n *   startValue: [1, 2, 3],\n *   endValue: [2, 4, 6],\n *   onChange: ([x, y, zoom]) => {\n *     canvas.zoomToPoint(new Point(x, y), zoom);\n *     canvas.renderAll();\n *   }\n * });\n *\n */\nexport function animate(options: ArrayAnimationOptions): ArrayAnimation;\nexport function animate(options: ValueAnimationOptions): ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n>(\n  options: T,\n): T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n  R extends T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation,\n>(options: T): R {\n  const animation = (\n    isArrayAnimation(options)\n      ? new ArrayAnimation(options)\n      : new ValueAnimation(options)\n  ) as R;\n  animation.start();\n  return animation;\n}\n\nexport function animateColor(options: ColorAnimationOptions) {\n  const animation = new ColorAnimation(options);\n  animation.start();\n  return animation;\n}\n","import { Point } from './Point';\nimport { createVector } from './util/misc/vectors';\n\n/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\nexport type IntersectionType = 'Intersection' | 'Coincident' | 'Parallel';\n\nexport class Intersection {\n  declare points: Point[];\n\n  declare status?: IntersectionType;\n\n  constructor(status?: IntersectionType) {\n    this.status = status;\n    this.points = [];\n  }\n\n  /**\n   * Used to verify if a point is alredy in the collection\n   * @param {Point} point\n   * @returns {boolean}\n   */\n  private includes(point: Point): boolean {\n    return this.points.some((p) => p.eq(point));\n  }\n\n  /**\n   * Appends points of intersection\n   * @param {...Point[]} points\n   * @return {Intersection} thisArg\n   * @chainable\n   */\n  private append(...points: Point[]): Intersection {\n    this.points = this.points.concat(\n      points.filter((point) => {\n        return !this.includes(point);\n      }),\n    );\n    return this;\n  }\n\n  /**\n   * check if point T is on the segment or line defined between A and B\n   *\n   * @param {Point} T the point we are checking for\n   * @param {Point} A one extremity of the segment\n   * @param {Point} B the other extremity of the segment\n   * @param [infinite] if true checks if `T` is on the line defined by `A` and `B`\n   * @returns true if `T` is contained\n   */\n  static isPointContained(T: Point, A: Point, B: Point, infinite = false) {\n    if (A.eq(B)) {\n      // Edge case: the segment is a point, we check for coincidence,\n      // infinite param has no meaning because there are infinite lines to consider\n      return T.eq(A);\n    } else if (A.x === B.x) {\n      // Edge case: horizontal line.\n      // we first check if T.x has the same value, and then if T.y is contained between A.y and B.y\n      return (\n        T.x === A.x &&\n        (infinite || (T.y >= Math.min(A.y, B.y) && T.y <= Math.max(A.y, B.y)))\n      );\n    } else if (A.y === B.y) {\n      // Edge case: vertical line.\n      // we first check if T.y has the same value, and then if T.x is contained between A.x and B.x\n      return (\n        T.y === A.y &&\n        (infinite || (T.x >= Math.min(A.x, B.x) && T.x <= Math.max(A.x, B.x)))\n      );\n    } else {\n      // Generic case: sloped line.\n      // we check that AT has the same slope as AB\n      // for the segment case we need both the vectors to have the same direction and for AT to be lte AB in size\n      // for the infinite case we check the absolute value of the slope, since direction is meaningless\n      const AB = createVector(A, B);\n      const AT = createVector(A, T);\n      const s = AT.divide(AB);\n      return infinite\n        ? Math.abs(s.x) === Math.abs(s.y)\n        : s.x === s.y && s.x >= 0 && s.x <= 1;\n    }\n  }\n\n  /**\n   * Use the ray casting algorithm to determine if {@link Point} is in the polygon defined by [points]{@link Point}\n   * @see https://en.wikipedia.org/wiki/Point_in_polygon\n   * @param point\n   * @param points polygon points\n   * @returns\n   */\n  static isPointInPolygon(point: Point, points: Point[]) {\n    const other = new Point(point).setX(\n      Math.min(point.x - 1, ...points.map((p) => p.x)),\n    );\n    let hits = 0;\n    for (let index = 0; index < points.length; index++) {\n      const inter = this.intersectSegmentSegment(\n        // polygon side\n        points[index],\n        points[(index + 1) % points.length],\n        // ray\n        point,\n        other,\n      );\n      if (inter.includes(point)) {\n        // point is on the polygon side\n        return true;\n      }\n      hits += Number(inter.status === 'Intersection');\n    }\n    return hits % 2 === 1;\n  }\n\n  /**\n   * Checks if a line intersects another\n   * @see {@link https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection line intersection}\n   * @see {@link https://en.wikipedia.org/wiki/Cramer%27s_rule Cramer's rule}\n   * @static\n   * @param {Point} a1\n   * @param {Point} a2\n   * @param {Point} b1\n   * @param {Point} b2\n   * @param {boolean} [aInfinite=true] check segment intersection by passing `false`\n   * @param {boolean} [bInfinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLineLine(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n    aInfinite = true,\n    bInfinite = true,\n  ): Intersection {\n    const a2xa1x = a2.x - a1.x,\n      a2ya1y = a2.y - a1.y,\n      b2xb1x = b2.x - b1.x,\n      b2yb1y = b2.y - b1.y,\n      a1xb1x = a1.x - b1.x,\n      a1yb1y = a1.y - b1.y,\n      uaT = b2xb1x * a1yb1y - b2yb1y * a1xb1x,\n      ubT = a2xa1x * a1yb1y - a2ya1y * a1xb1x,\n      uB = b2yb1y * a2xa1x - b2xb1x * a2ya1y;\n    if (uB !== 0) {\n      const ua = uaT / uB,\n        ub = ubT / uB;\n      if (\n        (aInfinite || (0 <= ua && ua <= 1)) &&\n        (bInfinite || (0 <= ub && ub <= 1))\n      ) {\n        return new Intersection('Intersection').append(\n          new Point(a1.x + ua * a2xa1x, a1.y + ua * a2ya1y),\n        );\n      } else {\n        return new Intersection();\n      }\n    } else {\n      if (uaT === 0 || ubT === 0) {\n        const segmentsCoincide =\n          aInfinite ||\n          bInfinite ||\n          Intersection.isPointContained(a1, b1, b2) ||\n          Intersection.isPointContained(a2, b1, b2) ||\n          Intersection.isPointContained(b1, a1, a2) ||\n          Intersection.isPointContained(b2, a1, a2);\n        return new Intersection(segmentsCoincide ? 'Coincident' : undefined);\n      } else {\n        return new Intersection('Parallel');\n      }\n    }\n  }\n\n  /**\n   * Checks if a segment intersects a line\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} s1 boundary point of segment\n   * @param {Point} s2 other boundary point of segment\n   * @param {Point} l1 point on line\n   * @param {Point} l2 other point on line\n   * @return {Intersection}\n   */\n  static intersectSegmentLine(\n    s1: Point,\n    s2: Point,\n    l1: Point,\n    l2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(s1, s2, l1, l2, false, true);\n  }\n\n  /**\n   * Checks if a segment intersects another\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point} b1 boundary point of segment\n   * @param {Point} b2 other boundary point of segment\n   * @return {Intersection}\n   */\n  static intersectSegmentSegment(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(a1, a2, b1, b2, false, false);\n  }\n\n  /**\n   * Checks if line intersects polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @see {@link intersectSegmentPolygon} for segment intersection\n   * @param {Point} a1 point on line\n   * @param {Point} a2 other point on line\n   * @param {Point[]} points polygon points\n   * @param {boolean} [infinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLinePolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n    infinite = true,\n  ): Intersection {\n    const result = new Intersection();\n    const length = points.length;\n\n    for (let i = 0, b1, b2, inter; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2, infinite, false);\n      if (inter.status === 'Coincident') {\n        return inter;\n      }\n      result.append(...inter.points);\n    }\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if segment intersects polygon\n   * @static\n   * @see {@link intersectLinePolygon} for line intersection\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point[]} points polygon points\n   * @return {Intersection}\n   */\n  static intersectSegmentPolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n  ): Intersection {\n    return Intersection.intersectLinePolygon(a1, a2, points, false);\n  }\n\n  /**\n   * Checks if polygon intersects another polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @param {Point[]} points1\n   * @param {Point[]} points2\n   * @return {Intersection}\n   */\n  static intersectPolygonPolygon(\n    points1: Point[],\n    points2: Point[],\n  ): Intersection {\n    const result = new Intersection(),\n      length = points1.length;\n    const coincidences: Intersection[] = [];\n\n    for (let i = 0; i < length; i++) {\n      const a1 = points1[i],\n        a2 = points1[(i + 1) % length],\n        inter = Intersection.intersectSegmentPolygon(a1, a2, points2);\n      if (inter.status === 'Coincident') {\n        coincidences.push(inter);\n        result.append(a1, a2);\n      } else {\n        result.append(...inter.points);\n      }\n    }\n\n    if (coincidences.length > 0 && coincidences.length === points1.length) {\n      return new Intersection('Coincident');\n    } else if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @see {@link intersectPolygonPolygon} for polygon intersection\n   * @param {Point[]} points polygon points\n   * @param {Point} r1 top left point of rect\n   * @param {Point} r2 bottom right point of rect\n   * @return {Intersection}\n   */\n  static intersectPolygonRectangle(\n    points: Point[],\n    r1: Point,\n    r2: Point,\n  ): Intersection {\n    const min = r1.min(r2),\n      max = r1.max(r2),\n      topRight = new Point(max.x, min.y),\n      bottomLeft = new Point(min.x, max.y);\n\n    return Intersection.intersectPolygonPolygon(points, [\n      min,\n      topRight,\n      max,\n      bottomLeft,\n    ]);\n  }\n}\n","import type {\n  TBBox,\n  TCornerPoint,\n  TDegree,\n  TMat2D,\n  TOriginX,\n  TOriginY,\n} from '../../typedefs';\nimport { SCALE_X, SCALE_Y, iMatrix } from '../../constants';\nimport { Intersection } from '../../Intersection';\nimport { Point } from '../../Point';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  createRotateMatrix,\n  createTranslateMatrix,\n  composeMatrix,\n  invertTransform,\n  multiplyTransformMatrices,\n  transformPoint,\n  calcPlaneRotation,\n} from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { ControlProps } from './types/ControlProps';\nimport { resolveOrigin } from '../../util/misc/resolveOrigin';\nimport type { Group } from '../Group';\nimport { calcDimensionsMatrix } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport { CommonMethods } from '../../CommonMethods';\nimport type { BaseProps } from './types/BaseProps';\nimport type { FillStrokeProps } from './types/FillStrokeProps';\nimport { CENTER, LEFT, TOP } from '../../constants';\n\ntype TMatrixCache = {\n  key: number[];\n  value: TMat2D;\n};\n\ntype TACoords = TCornerPoint;\n\nexport class ObjectGeometry<EventSpec extends ObjectEvents = ObjectEvents>\n  extends CommonMethods<EventSpec>\n  implements\n    Pick<ControlProps, 'padding'>,\n    BaseProps,\n    Pick<FillStrokeProps, 'strokeWidth' | 'strokeUniform'>\n{\n  // #region Geometry\n\n  declare padding: number;\n\n  /**\n   * Describe object's corner position in scene coordinates.\n   * The coordinates are derived from the following:\n   * left, top, width, height, scaleX, scaleY, skewX, skewY, angle, strokeWidth.\n   * The coordinates do not depend on viewport changes.\n   * The coordinates get updated with {@link setCoords}.\n   * You can calculate them without updating with {@link calcACoords()}\n   */\n  declare aCoords: TACoords;\n\n  /**\n   * storage cache for object transform matrix\n   */\n  declare ownMatrixCache?: TMatrixCache;\n\n  /**\n   * storage cache for object full transform matrix\n   */\n  declare matrixCache?: TMatrixCache;\n\n  /**\n   * A Reference of the Canvas where the object is actually added\n   * @type StaticCanvas | Canvas;\n   * @default undefined\n   * @private\n   */\n  declare canvas?: StaticCanvas | Canvas;\n\n  /**\n   * @returns {number} x position according to object's {@link FabricObject#originX} property in canvas coordinate plane\n   */\n  getX(): number {\n    return this.getXY().x;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link FabricObject#originX} property in canvas coordinate plane\n   */\n  setX(value: number) {\n    this.setXY(this.getXY().setX(value));\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link FabricObject#originY} property in canvas coordinate plane\n   */\n  getY(): number {\n    return this.getXY().y;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link FabricObject#originY} property in canvas coordinate plane\n   */\n  setY(value: number) {\n    this.setXY(this.getXY().setY(value));\n  }\n\n  /**\n   * @returns {number} x position according to object's {@link FabricObject#originX} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getX}\n   */\n  getRelativeX(): number {\n    return this.left;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link FabricObject#originX} property in parent's coordinate plane\\\n   * if parent is canvas then this method is identical to {@link setX}\n   */\n  setRelativeX(value: number) {\n    this.left = value;\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link FabricObject#originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getY}\n   */\n  getRelativeY(): number {\n    return this.top;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link FabricObject#originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link setY}\n   */\n  setRelativeY(value: number) {\n    this.top = value;\n  }\n\n  /**\n   * @returns {Point} x position according to object's {@link FabricObject#originX} {@link FabricObject#originY} properties in canvas coordinate plane\n   */\n  getXY(): Point {\n    const relativePosition = this.getRelativeXY();\n    return this.group\n      ? transformPoint(relativePosition, this.group.calcTransformMatrix())\n      : relativePosition;\n  }\n\n  /**\n   * Set an object position to a particular point, the point is intended in absolute ( canvas ) coordinate.\n   * You can specify {@link FabricObject#originX} and {@link FabricObject#originY} values,\n   * that otherwise are the object's current values.\n   * @example <caption>Set object's bottom left corner to point (5,5) on canvas</caption>\n   * object.setXY(new Point(5, 5), 'left', 'bottom').\n   * @param {Point} point position in scene coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setXY(point: Point, originX?: TOriginX, originY?: TOriginY) {\n    if (this.group) {\n      point = transformPoint(\n        point,\n        invertTransform(this.group.calcTransformMatrix()),\n      );\n    }\n    this.setRelativeXY(point, originX, originY);\n  }\n\n  /**\n   * @returns {Point} x,y position according to object's {@link FabricObject#originX} {@link FabricObject#originY} properties in parent's coordinate plane\n   */\n  getRelativeXY(): Point {\n    return new Point(this.left, this.top);\n  }\n\n  /**\n   * As {@link setXY}, but in current parent's coordinate plane (the current group if any or the canvas)\n   * @param {Point} point position according to object's {@link FabricObject#originX} {@link FabricObject#originY} properties in parent's coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setRelativeXY(\n    point: Point,\n    originX: TOriginX = this.originX,\n    originY: TOriginY = this.originY,\n  ) {\n    this.setPositionByOrigin(point, originX, originY);\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return false;\n  }\n\n  /**\n   * @return {Point[]} [tl, tr, br, bl] in the scene plane\n   */\n  getCoords(): Point[] {\n    const { tl, tr, br, bl } =\n      this.aCoords || (this.aCoords = this.calcACoords());\n    const coords = [tl, tr, br, bl];\n    if (this.group) {\n      const t = this.group.calcTransformMatrix();\n      return coords.map((p) => transformPoint(p, t));\n    }\n    return coords;\n  }\n\n  /**\n   * Checks if object intersects with the scene rect formed by TL and BR\n   * In this case the rect is meant aligned with the axis of the canvas.\n   * TL is the TOP LEFT point while br is the BOTTOM RIGHT point\n   */\n  intersectsWithRect(tl: Point, br: Point): boolean {\n    const intersection = Intersection.intersectPolygonRectangle(\n      this.getCoords(),\n      tl,\n      br,\n    );\n    return intersection.status === 'Intersection';\n  }\n\n  /**\n   * Checks if object intersects with another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object intersects with another object\n   */\n  intersectsWithObject(other: ObjectGeometry): boolean {\n    const intersection = Intersection.intersectPolygonPolygon(\n      this.getCoords(),\n      other.getCoords(),\n    );\n\n    return (\n      intersection.status === 'Intersection' ||\n      intersection.status === 'Coincident' ||\n      other.isContainedWithinObject(this) ||\n      this.isContainedWithinObject(other)\n    );\n  }\n\n  /**\n   * Checks if object is fully contained within area of another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object is fully contained within area of another object\n   */\n  isContainedWithinObject(other: ObjectGeometry): boolean {\n    const points = this.getCoords();\n    return points.every((point) => other.containsPoint(point));\n  }\n\n  /**\n   * Checks if object is fully contained within the scene rect formed by TL and BR\n   */\n  isContainedWithinRect(tl: Point, br: Point): boolean {\n    const { left, top, width, height } = this.getBoundingRect();\n    return (\n      left >= tl.x &&\n      left + width <= br.x &&\n      top >= tl.y &&\n      top + height <= br.y\n    );\n  }\n\n  isOverlapping<T extends ObjectGeometry>(other: T): boolean {\n    return (\n      this.intersectsWithObject(other) ||\n      this.isContainedWithinObject(other) ||\n      other.isContainedWithinObject(this)\n    );\n  }\n\n  /**\n   * Checks if point is inside the object\n   * @param {Point} point Point to check against\n   * @return {Boolean} true if point is inside the object\n   */\n  containsPoint(point: Point): boolean {\n    return Intersection.isPointInPolygon(point, this.getCoords());\n  }\n\n  /**\n   * Checks if object is contained within the canvas with current viewportTransform\n   * the check is done stopping at first point that appears on screen\n   * @return {Boolean} true if object is fully or partially contained within canvas\n   */\n  isOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    const points = this.getCoords();\n    // if some point is on screen, the object is on screen.\n    if (\n      points.some(\n        (point) =>\n          point.x <= br.x &&\n          point.x >= tl.x &&\n          point.y <= br.y &&\n          point.y >= tl.y,\n      )\n    ) {\n      return true;\n    }\n    // no points on screen, check intersection with absolute coordinates\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    // check if the object is so big that it contains the entire viewport\n    return this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Checks if object is partially contained within the canvas with current viewportTransform\n   * @return {Boolean} true if object is partially contained within canvas\n   */\n  isPartiallyOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    const allPointsAreOutside = this.getCoords().every(\n      (point) =>\n        (point.x >= br.x || point.x <= tl.x) &&\n        (point.y >= br.y || point.y <= tl.y),\n    );\n    // check if the object is so big that it contains the entire viewport\n    return allPointsAreOutside && this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Returns coordinates of object's bounding rectangle (left, top, width, height)\n   * the box is intended as aligned to axis of canvas.\n   * @return {Object} Object with left, top, width, height properties\n   */\n  getBoundingRect(): TBBox {\n    return makeBoundingBoxFromPoints(this.getCoords());\n  }\n\n  /**\n   * Returns width of an object's bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} width value\n   */\n  getScaledWidth(): number {\n    return this._getTransformedDimensions().x;\n  }\n\n  /**\n   * Returns height of an object bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} height value\n   */\n  getScaledHeight(): number {\n    return this._getTransformedDimensions().y;\n  }\n\n  /**\n   * Scales an object (equally by x and y)\n   * @param {Number} value Scale factor\n   * @return {void}\n   */\n  scale(value: number): void {\n    this._set(SCALE_X, value);\n    this._set(SCALE_Y, value);\n    this.setCoords();\n  }\n\n  /**\n   * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New width value\n   * @return {void}\n   */\n  scaleToWidth(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().width / this.getScaledWidth();\n    return this.scale(value / this.width / boundingRectFactor);\n  }\n\n  /**\n   * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New height value\n   * @return {void}\n   */\n  scaleToHeight(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().height / this.getScaledHeight();\n    return this.scale(value / this.height / boundingRectFactor);\n  }\n\n  getCanvasRetinaScaling() {\n    return this.canvas?.getRetinaScaling() || 1;\n  }\n\n  /**\n   * Returns the object angle relative to canvas counting also the group property\n   * @returns {TDegree}\n   */\n  getTotalAngle(): TDegree {\n    return this.group\n      ? radiansToDegrees(calcPlaneRotation(this.calcTransformMatrix()))\n      : this.angle;\n  }\n\n  /**\n   * Retrieves viewportTransform from Object's canvas if available\n   * @return {TMat2D}\n   */\n  getViewportTransform(): TMat2D {\n    return this.canvas?.viewportTransform || (iMatrix.concat() as TMat2D);\n  }\n\n  /**\n   * Calculates the coordinates of the 4 corner of the bbox, in absolute coordinates.\n   * those never change with zoom or viewport changes.\n   * @return {TCornerPoint}\n   */\n  calcACoords(): TCornerPoint {\n    const rotateMatrix = createRotateMatrix({ angle: this.angle }),\n      { x, y } = this.getRelativeCenterPoint(),\n      tMatrix = createTranslateMatrix(x, y),\n      finalMatrix = multiplyTransformMatrices(tMatrix, rotateMatrix),\n      dim = this._getTransformedDimensions(),\n      w = dim.x / 2,\n      h = dim.y / 2;\n    return {\n      // corners\n      tl: transformPoint({ x: -w, y: -h }, finalMatrix),\n      tr: transformPoint({ x: w, y: -h }, finalMatrix),\n      bl: transformPoint({ x: -w, y: h }, finalMatrix),\n      br: transformPoint({ x: w, y: h }, finalMatrix),\n    };\n  }\n\n  /**\n   * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n   * aCoords are used to quickly find an object on the canvas.\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   */\n  setCoords(): void {\n    this.aCoords = this.calcACoords();\n  }\n\n  transformMatrixKey(skipGroup = false): number[] {\n    let prefix: number[] = [];\n    if (!skipGroup && this.group) {\n      prefix = this.group.transformMatrixKey(skipGroup);\n    }\n    prefix.push(\n      this.top,\n      this.left,\n      this.width,\n      this.height,\n      this.scaleX,\n      this.scaleY,\n      this.angle,\n      this.strokeWidth,\n      this.skewX,\n      this.skewY,\n      +this.flipX,\n      +this.flipY,\n      resolveOrigin(this.originX),\n      resolveOrigin(this.originY),\n    );\n\n    return prefix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties.\n   * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n   * There are some situation in which this is useful to avoid the fake rotation.\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcTransformMatrix(skipGroup = false): TMat2D {\n    let matrix = this.calcOwnMatrix();\n    if (skipGroup || !this.group) {\n      return matrix;\n    }\n    const key = this.transformMatrixKey(skipGroup),\n      cache = this.matrixCache;\n    if (cache && cache.key.every((x, i) => x === key[i])) {\n      return cache.value;\n    }\n    if (this.group) {\n      matrix = multiplyTransformMatrices(\n        this.group.calcTransformMatrix(false),\n        matrix,\n      );\n    }\n    this.matrixCache = {\n      key,\n      value: matrix,\n    };\n    return matrix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties, this matrix does not include the group transformation\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcOwnMatrix(): TMat2D {\n    const key = this.transformMatrixKey(true),\n      cache = this.ownMatrixCache;\n    if (cache && cache.key === key) {\n      return cache.value;\n    }\n    const center = this.getRelativeCenterPoint(),\n      options = {\n        angle: this.angle,\n        translateX: center.x,\n        translateY: center.y,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        flipX: this.flipX,\n        flipY: this.flipY,\n      },\n      value = composeMatrix(options);\n    this.ownMatrixCache = {\n      key,\n      value,\n    };\n    return value;\n  }\n\n  /**\n   * Calculate object dimensions from its properties\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getNonTransformedDimensions(): Point {\n    return new Point(this.width, this.height).scalarAdd(this.strokeWidth);\n  }\n\n  /**\n   * Calculate object dimensions for controls box, including padding and canvas zoom.\n   * and active selection\n   * @private\n   * @param {object} [options] transform options\n   * @returns {Point} dimensions\n   */\n  _calculateCurrentDimensions(options?: any): Point {\n    return this._getTransformedDimensions(options)\n      .transform(this.getViewportTransform(), true)\n      .scalarAdd(2 * this.padding);\n  }\n\n  // #region Origin\n\n  declare top: number;\n  declare left: number;\n  declare width: number;\n  declare height: number;\n  declare flipX: boolean;\n  declare flipY: boolean;\n  declare scaleX: number;\n  declare scaleY: number;\n  declare skewX: number;\n  declare skewY: number;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originX: TOriginX;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originY: TOriginY;\n  declare angle: TDegree;\n  declare strokeWidth: number;\n  declare strokeUniform: boolean;\n\n  /**\n   * Object containing this object.\n   * can influence its size and position\n   */\n  declare group?: Group;\n\n  /**\n   * Calculate object bounding box dimensions from its properties scale, skew.\n   * This bounding box is aligned with object angle and not with canvas axis or screen.\n   * @param {Object} [options]\n   * @param {Number} [options.scaleX]\n   * @param {Number} [options.scaleY]\n   * @param {Number} [options.skewX]\n   * @param {Number} [options.skewY]\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getTransformedDimensions(options: any = {}): Point {\n    const dimOptions = {\n      // if scaleX or scaleY are negative numbers,\n      // this will return dimensions that are negative.\n      // and this will break assumptions around the codebase\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      width: this.width,\n      height: this.height,\n      strokeWidth: this.strokeWidth,\n      // TODO remove this spread. is visible in the performance inspection\n      ...options,\n    };\n    // stroke is applied before/after transformations are applied according to `strokeUniform`\n    const strokeWidth = dimOptions.strokeWidth;\n    let preScalingStrokeValue = strokeWidth,\n      postScalingStrokeValue = 0;\n\n    if (this.strokeUniform) {\n      preScalingStrokeValue = 0;\n      postScalingStrokeValue = strokeWidth;\n    }\n    const dimX = dimOptions.width + preScalingStrokeValue,\n      dimY = dimOptions.height + preScalingStrokeValue,\n      noSkew = dimOptions.skewX === 0 && dimOptions.skewY === 0;\n    let finalDimensions;\n    if (noSkew) {\n      finalDimensions = new Point(\n        dimX * dimOptions.scaleX,\n        dimY * dimOptions.scaleY,\n      );\n    } else {\n      finalDimensions = sizeAfterTransform(\n        dimX,\n        dimY,\n        calcDimensionsMatrix(dimOptions),\n      );\n    }\n\n    return finalDimensions.scalarAdd(postScalingStrokeValue);\n  }\n\n  /**\n   * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @param {TOriginX} toOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToGivenOrigin(\n    point: Point,\n    fromOriginX: TOriginX,\n    fromOriginY: TOriginY,\n    toOriginX: TOriginX,\n    toOriginY: TOriginY,\n  ): Point {\n    let x = point.x,\n      y = point.y;\n    const offsetX = resolveOrigin(toOriginX) - resolveOrigin(fromOriginX),\n      offsetY = resolveOrigin(toOriginY) - resolveOrigin(fromOriginY);\n\n    if (offsetX || offsetY) {\n      const dim = this._getTransformedDimensions();\n      x += offsetX * dim.x;\n      y += offsetY * dim.y;\n    }\n\n    return new Point(x, y);\n  }\n\n  /**\n   * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToCenterPoint(\n    point: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    if (originX === CENTER && originY === CENTER) {\n      return point;\n    }\n    const p = this.translateToGivenOrigin(\n      point,\n      originX,\n      originY,\n      CENTER,\n      CENTER,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), point);\n    }\n    return p;\n  }\n\n  /**\n   * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n   * @param {Point} center The point which corresponds to center of the object\n   * @param {OriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {OriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToOriginPoint(\n    center: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    const p = this.translateToGivenOrigin(\n      center,\n      CENTER,\n      CENTER,\n      originX,\n      originY,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), center);\n    }\n    return p;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to canvas\n   * @return {Point}\n   */\n  getCenterPoint(): Point {\n    const relCenter = this.getRelativeCenterPoint();\n    return this.group\n      ? transformPoint(relCenter, this.group.calcTransformMatrix())\n      : relCenter;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to it's parent\n   * @return {Point}\n   */\n  getRelativeCenterPoint(): Point {\n    return this.translateToCenterPoint(\n      new Point(this.left, this.top),\n      this.originX,\n      this.originY,\n    );\n  }\n\n  /**\n   * Returns the position of the object as if it has a different origin.\n   * Take an object that has left, top set to 100, 100 with origin 'left', 'top'.\n   * Return the values of left top ( wrapped in a point ) that you would need to keep\n   * the same position if origin where different.\n   * Alternatively you can use this to also find which point in the parent plane is a specific origin\n   * ( where is the bottom right corner of my object? )\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  getPointByOrigin(originX: TOriginX, originY: TOriginY): Point {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      originX,\n      originY,\n    );\n  }\n\n  /**\n   * Sets the position of the object taking into consideration the object's origin\n   * @param {Point} pos The new position of the object\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {void}\n   */\n  setPositionByOrigin(pos: Point, originX: TOriginX, originY: TOriginY) {\n    const center = this.translateToCenterPoint(pos, originX, originY),\n      position = this.translateToOriginPoint(\n        center,\n        this.originX,\n        this.originY,\n      );\n    this.set({ left: position.x, top: position.y });\n  }\n\n  /**\n   * @private\n   */\n  _getLeftTopCoords() {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      LEFT,\n      TOP,\n    );\n  }\n}\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  STROKE,\n  FILL,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { capValue } from '../../util/misc/capValue';\nimport {\n  createCanvasElement,\n  createCanvasElementFor,\n  toDataURL,\n  toBlob,\n} from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport { isFiller, isSerializableFiller } from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\nimport type { TColorArg } from '../../color/typedefs';\nimport type { TAnimation } from '../../util/animation/animate';\nimport { animate, animateColor } from '../../util/animation/animate';\nimport type {\n  AnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n  ValueAnimationOptions,\n} from '../../util/animation/types';\nimport { ObjectGeometry } from './ObjectGeometry';\n\ntype TAncestor = FabricObject;\ntype TCollection = Group;\n\nexport type Ancestors =\n  | [FabricObject | Group]\n  | [FabricObject | Group, ...Group[]]\n  | Group[];\n\nexport type AncestryComparison = {\n  /**\n   * common ancestors of `this` and`other`(may include`this` | `other`)\n   */\n  common: Ancestors;\n  /**\n   * ancestors that are of `this` only\n   */\n  fork: Ancestors;\n  /**\n   * ancestors that are of `other` only\n   */\n  otherFork: Ancestors;\n};\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\nexport type DrawContext =\n  | {\n      parentClipPaths: FabricObject[];\n      width: number;\n      height: number;\n      cacheTranslationX: number;\n      cacheTranslationY: number;\n      zoomX: number;\n      zoomY: number;\n    }\n  | Record<string, never>;\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends ObjectGeometry<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return FabricObject.ownDefaults;\n  }\n\n  /**\n   * The class type.\n   * This is used for serialization and deserialization purposes and internally it can be used\n   * to identify classes.\n   * When we transform a class in a plain JS object we need a way to recognize which class it was,\n   * and the type is the way we do that. It has no other purposes and you should not give one.\n   * Hard to reach on instances and please do not use to drive instance's logic (this.constructor.type).\n   * To idenfity a class use instanceof class ( instanceof Rect ).\n   * We do not do that in fabricJS code because we want to try to have code splitting possible.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists to avoid type errors in old code and possibly current deserialization code.\n   * DO NOT build new code around this type value\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, FabricObject.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any,\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: Math.ceil(neededX + ALIASING_LIMIT),\n      height: Math.ceil(neededY + ALIASING_LIMIT),\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas!,\n      context = this._cacheContext,\n      { width, height, zoomX, zoomY, x, y } = this._limitCacheSize(\n        this._getCacheCanvasDimensions(),\n      ),\n      dimensionsChanged = width !== canvas.width || height !== canvas.height,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    const shouldRedraw = dimensionsChanged || zoomChanged;\n\n    if (shouldRedraw) {\n      if (width !== canvas.width || height !== canvas.height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      const drawingWidth = x / 2;\n      const drawingHeight = y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (key === SCALE_X || key === SCALE_Y) {\n      value = this._constrainScale(value);\n    }\n    if (key === SCALE_X && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    }\n\n    const isChanged = this[key as keyof this] !== value;\n    this[key as keyof this] = value;\n\n    // invalidate caches\n    if (\n      isChanged &&\n      (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n    ) {\n      this.dirty = true;\n    }\n    // a dirty child makes the parent dirty.\n    // but a non dirty child does not make the parent not dirty.\n    // the parent could be dirty for some other reason.\n    this.parent &&\n      (this.dirty ||\n        (isChanged &&\n          (this.constructor as typeof FabricObject).stateProperties.includes(\n            key,\n          ))) &&\n      this.parent._set('dirty', true);\n\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      (this as TCachedFabricObject).renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx, false, {});\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(_ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(this: TCachedFabricObject, options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      const { zoomX, zoomY, cacheTranslationX, cacheTranslationY } = this;\n      const { width, height } = this._cacheCanvas;\n      this.drawObject(this._cacheContext, options.forClipping, {\n        zoomX,\n        zoomY,\n        cacheTranslationX,\n        cacheTranslationY,\n        width,\n        height,\n        parentClipPaths: [],\n      });\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke() {\n    return (\n      this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill() {\n    return this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When returns `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    // TODO re-evaluate this shadow condition\n    if (\n      this.paintFirst === STROKE &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      (this.objectCaching && (!this.parent || !this.parent.isOnACache())) ||\n      this.needsItsOwnCache();\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject,\n    canvasWithClipPath: HTMLCanvasElement,\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(canvasWithClipPath, 0, 0);\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   * @param {DrawContext} context additional context for rendering\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath, context);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  private createClipPathLayer(\n    this: TCachedFabricObject,\n    clipPath: FabricObject,\n    context: DrawContext,\n  ) {\n    const canvas = createCanvasElementFor(context as TSize);\n    const ctx = canvas.getContext('2d')!;\n    ctx.translate(context.cacheTranslationX, context.cacheTranslationY);\n    ctx.scale(context.zoomX, context.zoomY);\n    clipPath._cacheCanvas = canvas;\n    context.parentClipPaths.forEach((prevClipPath) => {\n      prevClipPath.transform(ctx);\n    });\n    context.parentClipPaths.push(clipPath);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    clipPath.drawObject(ctx, true, context);\n    return canvas;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject | undefined,\n    context: DrawContext,\n  ) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup _transformDone\n    // TODO find a better solution?\n    clipPath._transformDone = true;\n    const canvas = (this as TCachedFabricObject).createClipPathLayer(\n      clipPath,\n      context,\n    );\n    this.drawClipPathOnCache(ctx, clipPath, canvas);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY,\n    );\n  }\n\n  /**\n   * Check if cache is dirty and if is dirty clear the context.\n   * This check has a big side effect, it changes the underlying cache canvas if necessary.\n   * Do not call this method on your own to check if the cache is dirty, because if it is,\n   * it is also going to wipe the cache. This is badly designed and needs to be fixed.\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    const canvas = this._cacheCanvas;\n    const ctx = this._cacheContext;\n    if (canvas && ctx && !skipCanvas && this._updateCacheCanvas()) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (canvas && ctx && !skipCanvas) {\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    const dim = this._getNonTransformedDimensions();\n    ctx.fillStyle = this.backgroundColor;\n\n    ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >,\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} _ctx Context to render on\n   */\n  _render(_ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling,\n      pCanvas = createCanvasElementFor({\n        // in case width and height are less than 1px, we have to round up.\n        // since the pattern is no-repeat, this is fine\n        width: Math.ceil(width),\n        height: Math.ceil(height),\n      });\n\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling,\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2,\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY,\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm,\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER,\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n  toBlob(options: toDataURLOptions = {}) {\n    return toBlob(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY,\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  // #region Animation methods\n  /**\n   * List of properties to consider for animating colors.\n   * @type String[]\n   */\n  static colorProperties: string[] = [FILL, STROKE, 'backgroundColor'];\n\n  /**\n   * Animates object's properties\n   * @param {Record<string, number | number[] | TColorArg>} animatable map of keys and end values\n   * @param {Partial<AnimationOptions<T>>} options\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {Record<string, TAnimation<T>>} map of animation contexts\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   */\n  animate<T extends number | number[] | TColorArg>(\n    animatable: Record<string, T>,\n    options?: Partial<AnimationOptions<T>>,\n  ): Record<string, TAnimation<T>> {\n    return Object.entries(animatable).reduce(\n      (acc, [key, endValue]) => {\n        acc[key] = this._animate(key, endValue, options);\n        return acc;\n      },\n      {} as Record<string, TAnimation<T>>,\n    );\n  }\n\n  /**\n   * @private\n   * @param {String} key Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   */\n  _animate<T extends number | number[] | TColorArg>(\n    key: string,\n    endValue: T,\n    options: Partial<AnimationOptions<T>> = {},\n  ): TAnimation<T> {\n    const path = key.split('.');\n    const propIsColor = (\n      this.constructor as typeof FabricObject\n    ).colorProperties.includes(path[path.length - 1]);\n    const { abort, startValue, onChange, onComplete } = options;\n    const animationOptions = {\n      ...options,\n      target: this,\n      // path.reduce... is the current value in case start value isn't provided\n      startValue:\n        startValue ?? path.reduce((deep: any, key) => deep[key], this),\n      endValue,\n      abort: abort?.bind(this),\n      onChange: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        path.reduce((deep: Record<string, any>, key, index) => {\n          if (index === path.length - 1) {\n            deep[key] = value;\n          }\n          return deep[key];\n        }, this);\n        onChange &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onChange(value, valueProgress, durationProgress);\n      },\n      onComplete: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        this.setCoords();\n        onComplete &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onComplete(value, valueProgress, durationProgress);\n      },\n    } as AnimationOptions<T>;\n\n    return (\n      propIsColor\n        ? animateColor(animationOptions as ColorAnimationOptions)\n        : animate(\n            animationOptions as ValueAnimationOptions | ArrayAnimationOptions,\n          )\n    ) as TAnimation<T>;\n  }\n\n  // #region Object stacking methods\n\n  /**\n   * A reference to the parent of the object\n   * Used to keep the original parent ref when the object has been added to an ActiveSelection, hence loosing the `group` ref\n   */\n  declare parent?: Group;\n\n  /**\n   * Checks if object is descendant of target\n   * Should be used instead of {@link Group.contains} or {@link StaticCanvas.contains} for performance reasons\n   * @param {TAncestor} target\n   * @returns {boolean}\n   */\n  isDescendantOf(target: TAncestor): boolean {\n    const { parent, group } = this;\n    return (\n      parent === target ||\n      group === target ||\n      // walk up\n      (!!parent && parent.isDescendantOf(target)) ||\n      (!!group && group !== parent && group.isDescendantOf(target))\n    );\n  }\n\n  /**\n   * @returns {Ancestors} ancestors (excluding `ActiveSelection`) from bottom to top\n   */\n  getAncestors(): Ancestors {\n    const ancestors: TAncestor[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let parent: TAncestor | undefined = this;\n    do {\n      parent = parent.parent;\n      parent && ancestors.push(parent);\n    } while (parent);\n    return ancestors as Ancestors;\n  }\n\n  /**\n   * Compare ancestors\n   *\n   * @param {StackedObject} other\n   * @returns {AncestryComparison} an object that represent the ancestry situation.\n   */\n  findCommonAncestors<T extends this>(other: T): AncestryComparison {\n    if (this === other) {\n      return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors()],\n      } as AncestryComparison;\n    }\n    const ancestors = this.getAncestors();\n    const otherAncestors = other.getAncestors();\n    //  if `this` has no ancestors and `this` is top ancestor of `other` we must handle the following case\n    if (\n      ancestors.length === 0 &&\n      otherAncestors.length > 0 &&\n      this === otherAncestors[otherAncestors.length - 1]\n    ) {\n      return {\n        fork: [],\n        otherFork: [\n          other,\n          ...otherAncestors.slice(0, otherAncestors.length - 1),\n        ],\n        common: [this],\n      } as AncestryComparison;\n    }\n    //  compare ancestors\n    for (let i = 0, ancestor; i < ancestors.length; i++) {\n      ancestor = ancestors[i];\n      if (ancestor === other) {\n        return {\n          fork: [this, ...ancestors.slice(0, i)],\n          otherFork: [],\n          common: ancestors.slice(i),\n        } as AncestryComparison;\n      }\n      for (let j = 0; j < otherAncestors.length; j++) {\n        if (this === otherAncestors[j]) {\n          return {\n            fork: [],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: [this, ...ancestors],\n          } as AncestryComparison;\n        }\n        if (ancestor === otherAncestors[j]) {\n          return {\n            fork: [this, ...ancestors.slice(0, i)],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: ancestors.slice(i),\n          } as AncestryComparison;\n        }\n      }\n    }\n    // nothing shared\n    return {\n      fork: [this, ...ancestors],\n      otherFork: [other, ...otherAncestors],\n      common: [],\n    } as AncestryComparison;\n  }\n\n  /**\n   *\n   * @param {StackedObject} other\n   * @returns {boolean}\n   */\n  hasCommonAncestors<T extends this>(other: T): boolean {\n    const commonAncestors = this.findCommonAncestors(other);\n    return commonAncestors && !!commonAncestors.common.length;\n  }\n\n  /**\n   *\n   * @param {FabricObject} other object to compare against\n   * @returns {boolean | undefined} if objects do not share a common ancestor or they are strictly equal it is impossible to determine which is in front of the other; in such cases the function returns `undefined`\n   */\n  isInFrontOf<T extends this>(other: T): boolean | undefined {\n    if (this === other) {\n      return undefined;\n    }\n    const ancestorData = this.findCommonAncestors(other);\n\n    if (ancestorData.fork.includes(other as any)) {\n      return true;\n    }\n    if (ancestorData.otherFork.includes(this as any)) {\n      return false;\n    }\n    // if there isn't a common ancestor, we take the canvas.\n    // if there is no canvas, there is nothing to compare\n    const firstCommonAncestor = ancestorData.common[0] || this.canvas;\n    if (!firstCommonAncestor) {\n      return undefined;\n    }\n    const headOfFork = ancestorData.fork.pop(),\n      headOfOtherFork = ancestorData.otherFork.pop(),\n      thisIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfFork as any,\n      ),\n      otherIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfOtherFork as any,\n      );\n    return thisIndex > -1 && thisIndex > otherIndex;\n  }\n\n  // #region Serialization\n  /**\n   * Define a list of custom properties that will be serialized when\n   * instance.toObject() gets called\n   */\n  static customProperties: string[] = [];\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const propertiesToSerialize = propertiesToInclude.concat(\n      FabricObject.customProperties,\n      (this.constructor as typeof FabricObject).customProperties || [],\n    );\n    let clipPathData: Partial<SerializedObjectProps> | undefined;\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n    const {\n      clipPath,\n      fill,\n      stroke,\n      shadow,\n      strokeDashArray,\n      left,\n      top,\n      originX,\n      originY,\n      width,\n      height,\n      strokeWidth,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit,\n      scaleX,\n      scaleY,\n      angle,\n      flipX,\n      flipY,\n      opacity,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX,\n      skewY,\n    } = this;\n    if (clipPath && !clipPath.excludeFromExport) {\n      clipPathData = clipPath.toObject(\n        propertiesToSerialize.concat('inverted', 'absolutePositioned'),\n      );\n    }\n    const toFixedBound = (val: number) => toFixed(val, NUM_FRACTION_DIGITS);\n    const object = {\n      ...pick(this, propertiesToSerialize as (keyof this)[]),\n      type: (this.constructor as typeof FabricObject).type,\n      version: VERSION,\n      originX,\n      originY,\n      left: toFixedBound(left),\n      top: toFixedBound(top),\n      width: toFixedBound(width),\n      height: toFixedBound(height),\n      fill: isSerializableFiller(fill) ? fill.toObject() : fill,\n      stroke: isSerializableFiller(stroke) ? stroke.toObject() : stroke,\n      strokeWidth: toFixedBound(strokeWidth),\n      strokeDashArray: strokeDashArray\n        ? strokeDashArray.concat()\n        : strokeDashArray,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit: toFixedBound(strokeMiterLimit),\n      scaleX: toFixedBound(scaleX),\n      scaleY: toFixedBound(scaleY),\n      angle: toFixedBound(angle),\n      flipX,\n      flipY,\n      opacity: toFixedBound(opacity),\n      shadow: shadow ? shadow.toObject() : shadow,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX: toFixedBound(skewX),\n      skewY: toFixedBound(skewY),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...serializedObjectOptions }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {},\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(serializedObjectOptions, options).then(\n      (enlivedObjectOptions) => {\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          delete enlivedObjectOptions[extraParam];\n          return new this(\n            serializedObjectOptions[extraParam],\n            // @ts-expect-error different signature\n            enlivedObjectOptions,\n          );\n        } else {\n          return new this(enlivedObjectOptions);\n        }\n      },\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable,\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n","import type {\n  TModificationEvents,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\n/**\n * Wrap an action handler with firing an event if the action is performed\n * @param {TModificationEvents} eventName the event we want to fire\n * @param {TransformActionHandler<T>} actionHandler the function to wrap\n * @param {object} extraEventInfo extra information to pas to the event handler\n * @return {TransformActionHandler<T>} a function with an action handler signature\n */\nexport const wrapWithFireEvent = <\n  T extends Transform,\n  P extends object = Record<string, never>,\n>(\n  eventName: TModificationEvents,\n  actionHandler: TransformActionHandler<T>,\n  extraEventInfo?: P,\n) => {\n  return ((eventData, transform, x, y) => {\n    const actionPerformed = actionHandler(eventData, transform, x, y);\n    if (actionPerformed) {\n      fireEvent(eventName, {\n        ...commonEventInfo(eventData, transform, x, y),\n        ...extraEventInfo,\n      });\n    }\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n};\n","import type { Transform, TransformActionHandler } from '../EventTypeDefs';\n\n/**\n * Wrap an action handler with saving/restoring object position on the transform.\n * this is the code that permits to objects to keep their position while transforming.\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport function wrapWithFixedAnchor<T extends Transform>(\n  actionHandler: TransformActionHandler<T>,\n) {\n  return ((eventData, transform, x, y) => {\n    const { target, originX, originY } = transform,\n      centerPoint = target.getRelativeCenterPoint(),\n      constraint = target.translateToOriginPoint(centerPoint, originX, originY),\n      actionPerformed = actionHandler(eventData, transform, x, y);\n    // flipping requires to change the transform origin, so we read from the mutated transform\n    // instead of leveraging the one destructured before\n    target.setPositionByOrigin(\n      constraint,\n      transform.originX,\n      transform.originY,\n    );\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n}\n","import type { TransformActionHandler } from '../EventTypeDefs';\nimport { CENTER, LEFT, RESIZING, RIGHT } from '../constants';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { getLocalPoint, isTransformCentered } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Action handler to change object's width\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const changeObjectWidth: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const localPoint = getLocalPoint(\n    transform,\n    transform.originX,\n    transform.originY,\n    x,\n    y,\n  );\n  //  make sure the control changes width ONLY from it's side of target\n  if (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(RIGHT) &&\n      localPoint.x < 0) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(LEFT) &&\n      localPoint.x > 0)\n  ) {\n    const { target } = transform,\n      strokePadding =\n        target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\n      multiplier = isTransformCentered(transform) ? 2 : 1,\n      oldWidth = target.width,\n      newWidth =\n        Math.abs((localPoint.x * multiplier) / target.scaleX) - strokePadding;\n    target.set('width', Math.max(newWidth, 1));\n    //  check against actual target width in case `newWidth` was rejected\n    return oldWidth !== target.width;\n  }\n  return false;\n};\n\nexport const changeWidth = wrapWithFireEvent(\n  RESIZING,\n  wrapWithFixedAnchor(changeObjectWidth),\n);\n","import { FILL, STROKE, twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners'\n  >\n>;\n\nexport type ControlRenderer<\n  O extends InteractiveFabricObject = InteractiveFabricObject,\n> = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: O,\n) => void;\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n}\n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  ControlActionHandler,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { Intersection } from '../Intersection';\nimport { Point } from '../Point';\nimport { SCALE } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport type { TCornerPoint, TDegree, TMat2D } from '../typedefs';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { renderCircleControl, renderSquareControl } from './controlRendering';\n\nexport class Control {\n  /**\n   * keep track of control visibility.\n   * mainly for backward compatibility.\n   * if you do not want to see a control, you can remove it\n   * from the control set.\n   * @type {Boolean}\n   * @default true\n   */\n  visible = true;\n\n  /**\n   * Name of the action that the control will likely execute.\n   * This is optional. FabricJS uses to identify what the user is doing for some\n   * extra optimizations. If you are writing a custom control and you want to know\n   * somewhere else in the code what is going on, you can use this string here.\n   * you can also provide a custom getActionName if your control run multiple actions\n   * depending on some external state.\n   * default to scale since is the most common, used on 4 corners by default\n   * @type {String}\n   * @default 'scale'\n   */\n  actionName = SCALE;\n\n  /**\n   * Drawing angle of the control.\n   * NOT used for now, but name marked as needed for internal logic\n   * example: to reuse the same drawing function for different rotated controls\n   * @type {Number}\n   * @default 0\n   */\n  angle = 0;\n\n  /**\n   * Relative position of the control. X\n   * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  x = 0;\n\n  /**\n   * Relative position of the control. Y\n   * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  y = 0;\n\n  /**\n   * Horizontal offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the right, negative to the left.\n   * It used when you want to have position of control that does not scale with\n   * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n   * the boundind box, with an offset of 30 pixels vertically. Those 30 pixels will\n   * stay 30 pixels no matter how the object is big. Another example is having 2\n   * controls in the corner, that stay in the same position when the object scale.\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  offsetX = 0;\n\n  /**\n   * Vertical offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the bottom, negative to the top.\n   * @type {Number}\n   * @default 0\n   */\n  offsetY = 0;\n\n  /**\n   * Sets the length of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeX = 0;\n\n  /**\n   * Sets the height of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeY = 0;\n\n  /**\n   * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeX = 0;\n\n  /**\n   * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeY = 0;\n\n  /**\n   * Css cursor style to display when the control is hovered.\n   * if the method `cursorStyleHandler` is provided, this property is ignored.\n   * @type {String}\n   * @default 'crosshair'\n   */\n  cursorStyle = 'crosshair';\n\n  /**\n   * If controls has an offsetY or offsetX, draw a line that connects\n   * the control to the bounding box\n   * @type {Boolean}\n   * @default false\n   */\n  withConnection = false;\n\n  constructor(options?: Partial<Control>) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * The control actionHandler, provide one to handle action ( control being moved )\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare actionHandler: TransformActionHandler;\n\n  /**\n   * The control handler for mouse down, provide one to handle mouse down on control\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseDownHandler?: ControlActionHandler;\n\n  /**\n   * The control mouseUpHandler, provide one to handle an effect on mouse up.\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseUpHandler?: ControlActionHandler;\n\n  shouldActivate(\n    controlKey: string,\n    fabricObject: InteractiveFabricObject,\n    pointer: Point,\n    { tl, tr, br, bl }: TCornerPoint,\n  ) {\n    // TODO: locking logic can be handled here instead of in the control handler logic\n    return (\n      fabricObject.canvas?.getActiveObject() === fabricObject &&\n      fabricObject.isControlVisible(controlKey) &&\n      Intersection.isPointInPolygon(pointer, [tl, tr, br, bl])\n    );\n  }\n\n  /**\n   * Returns control actionHandler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getActionHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): TransformActionHandler | undefined {\n    return this.actionHandler;\n  }\n\n  /**\n   * Returns control mouseDown handler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseDownHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseDownHandler;\n  }\n\n  /**\n   * Returns control mouseUp handler.\n   * During actions the fabricObject or the control can be of different obj\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseUpHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseUpHandler;\n  }\n\n  /**\n   * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n   * function you can pass one in the constructor\n   * the cursorStyle property\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  cursorStyleHandler(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.cursorStyle;\n  }\n\n  /**\n   * Returns the action name. The basic implementation just return the actionName property.\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  getActionName(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.actionName;\n  }\n\n  /**\n   * Returns controls visibility\n   * @param {FabricObject} object on which the control is displayed\n   * @param {String} controlKey key where the control is memorized on the\n   * @return {Boolean}\n   */\n  getVisibility(fabricObject: InteractiveFabricObject, controlKey: string) {\n    return fabricObject._controlsVisibility?.[controlKey] ?? this.visible;\n  }\n\n  /**\n   * Sets controls visibility\n   * @param {Boolean} visibility for the object\n   * @return {Void}\n   */\n  setVisibility(\n    visibility: boolean,\n    name: string,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    this.visible = visibility;\n  }\n\n  positionHandler(\n    dim: Point,\n    finalMatrix: TMat2D,\n    fabricObject: InteractiveFabricObject,\n    currentControl: Control,\n  ) {\n    return new Point(\n      this.x * dim.x + this.offsetX,\n      this.y * dim.y + this.offsetY,\n    ).transform(finalMatrix);\n  }\n\n  /**\n   * Returns the coords for this control based on object values.\n   * @param {Number} objectAngle angle from the fabric object holding the control\n   * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n   *   isTouch is true)\n   * @param {Number} centerX x coordinate where the control center should be\n   * @param {Number} centerY y coordinate where the control center should be\n   * @param {boolean} isTouch true if touch corner, false if normal corner\n   */\n  calcCornerCoords(\n    angle: TDegree,\n    objectCornerSize: number,\n    centerX: number,\n    centerY: number,\n    isTouch: boolean,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    const t = multiplyTransformMatrixArray([\n      createTranslateMatrix(centerX, centerY),\n      createRotateMatrix({ angle }),\n      createScaleMatrix(\n        (isTouch ? this.touchSizeX : this.sizeX) || objectCornerSize,\n        (isTouch ? this.touchSizeY : this.sizeY) || objectCornerSize,\n      ),\n    ]);\n    return {\n      tl: new Point(-0.5, -0.5).transform(t),\n      tr: new Point(0.5, -0.5).transform(t),\n      br: new Point(0.5, 0.5).transform(t),\n      bl: new Point(-0.5, 0.5).transform(t),\n    };\n  }\n\n  /**\n   * Render function for the control.\n   * When this function runs the context is unscaled. unrotate. Just retina scaled.\n   * all the functions will have to translate to the point left,top before starting Drawing\n   * if they want to draw a control where the position is detected.\n   * left and top are the result of the positionHandler function\n   * @param {RenderingContext2D} ctx the context where the control will be drawn\n   * @param {Number} left position of the canvas where we are about to render the control.\n   * @param {Number} top position of the canvas where we are about to render the control.\n   * @param {Object} styleOverride\n   * @param {FabricObject} fabricObject the object where the control is about to be rendered\n   */\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    styleOverride = styleOverride || {};\n    switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\n      case 'circle':\n        renderCircleControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n        break;\n      default:\n        renderSquareControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n    }\n  }\n}\n","import type {\n  ControlCursorCallback,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { ROTATING } from '../constants';\nimport { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { isLocked, NOT_ALLOWED_CURSOR } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Find the correct style for the control that is used for rotation.\n * this function is very simple and it just take care of not-allowed or standard cursor\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const rotationStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (fabricObject.lockRotation) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  return control.cursorStyle;\n};\n\n/**\n * Action handler for rotation and snapping, without anchor point.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n * @private\n */\nconst rotateObjectWithSnapping: TransformActionHandler = (\n  eventData,\n  { target, ex, ey, theta, originX, originY },\n  x,\n  y,\n) => {\n  const pivotPoint = target.translateToOriginPoint(\n    target.getRelativeCenterPoint(),\n    originX,\n    originY,\n  );\n\n  if (isLocked(target, 'lockRotation')) {\n    return false;\n  }\n\n  const lastAngle = Math.atan2(ey - pivotPoint.y, ex - pivotPoint.x),\n    curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x);\n  let angle = radiansToDegrees(curAngle - lastAngle + theta);\n\n  if (target.snapAngle && target.snapAngle > 0) {\n    const snapAngle = target.snapAngle,\n      snapThreshold = target.snapThreshold || snapAngle,\n      rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n      leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n    if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n      angle = leftAngleLocked;\n    } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n      angle = rightAngleLocked;\n    }\n  }\n\n  // normalize angle to positive value\n  if (angle < 0) {\n    angle = 360 + angle;\n  }\n  angle %= 360;\n\n  const hasRotated = target.angle !== angle;\n  // TODO: why aren't we using set?\n  target.angle = angle;\n  return hasRotated;\n};\n\nexport const rotationWithSnapping = wrapWithFireEvent(\n  ROTATING,\n  wrapWithFixedAnchor(rotateObjectWithSnapping),\n);\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxis } from '../typedefs';\nimport type { Canvas } from '../canvas/Canvas';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  invertOrigin,\n  isLocked,\n  isTransformCentered,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport { SCALE_X, SCALE_Y, SCALING } from '../constants';\n\ntype ScaleTransform = Transform & {\n  gestureScale?: number;\n  signX?: number;\n  signY?: number;\n};\n\ntype ScaleBy = TAxis | 'equally' | '' | undefined;\n\n/**\n * Inspect event and fabricObject properties to understand if the scaling action\n * @param {Event} eventData from the user action\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @return {Boolean} true if scale is proportional\n */\nexport function scaleIsProportional(\n  eventData: TPointerEvent,\n  fabricObject: FabricObject,\n): boolean {\n  const canvas = fabricObject.canvas as Canvas,\n    uniformIsToggled = eventData[canvas.uniScaleKey!];\n  return (\n    (canvas.uniformScaling && !uniformIsToggled) ||\n    (!canvas.uniformScaling && uniformIsToggled)\n  );\n}\n\n/**\n * Inspect fabricObject to understand if the current scaling action is allowed\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @param {String} by 'x' or 'y' or ''\n * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n * @return {Boolean} true if scaling is not allowed at current conditions\n */\nexport function scalingIsForbidden(\n  fabricObject: FabricObject,\n  by: ScaleBy,\n  scaleProportionally: boolean,\n) {\n  const lockX = isLocked(fabricObject, 'lockScalingX'),\n    lockY = isLocked(fabricObject, 'lockScalingY');\n  if (lockX && lockY) {\n    return true;\n  }\n  if (!by && (lockX || lockY) && scaleProportionally) {\n    return true;\n  }\n  if (lockX && by === 'x') {\n    return true;\n  }\n  if (lockY && by === 'y') {\n    return true;\n  }\n  // code crashes because of a division by 0 if a 0 sized object is scaled\n  // forbid to prevent scaling to happen. ISSUE-9475\n  const { width, height, strokeWidth } = fabricObject;\n  if (width === 0 && strokeWidth === 0 && by !== 'y') {\n    return true;\n  }\n  if (height === 0 && strokeWidth === 0 && by !== 'x') {\n    return true;\n  }\n  return false;\n}\n\nconst scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n\n/**\n * return the correct cursor style for the scale action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  const scaleProportionally = scaleIsProportional(eventData, fabricObject),\n    by =\n      control.x !== 0 && control.y === 0\n        ? 'x'\n        : control.x === 0 && control.y !== 0\n          ? 'y'\n          : '';\n  if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control);\n  return `${scaleMap[n]}-resize`;\n};\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObject(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, by, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    // use of sign: We use sign to detect change of direction of an action. sign usually change when\n    // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n    // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n    // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n    // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n    signX = by !== 'y' ? Math.sign(newPoint.x || transform.signX || 1) : 1;\n    signY = by !== 'x' ? Math.sign(newPoint.y || transform.signY || 1) : 1;\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      (transform.signX !== signX || transform.signY !== signY)\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // missing detection of flip and logic to switch the origin\n    if (scaleProportionally && !by) {\n      // uniform scaling\n      const distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\n        { original } = transform,\n        originalDistance =\n          Math.abs((dim.x * original.scaleX) / target.scaleX) +\n          Math.abs((dim.y * original.scaleY) / target.scaleY),\n        scale = distance / originalDistance;\n      scaleX = original.scaleX * scale;\n      scaleY = original.scaleY * scale;\n    } else {\n      scaleX = Math.abs((newPoint.x * target.scaleX) / dim.x);\n      scaleY = Math.abs((newPoint.y * target.scaleY) / dim.y);\n    }\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX && by !== 'y') {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    if (transform.signY !== signY && by !== 'x') {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  // minScale is taken care of in the setter.\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  if (!by) {\n    !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n    !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  } else {\n    // forbidden cases already handled on top here.\n    by === 'x' && target.set(SCALE_X, scaleX);\n    by === 'y' && target.set(SCALE_Y, scaleY);\n  }\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Generic scaling logic, to scale from corners either equally or freely.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scaleObjectFromCorner: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y);\n};\n\n/**\n * Scaling logic for the X axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectX: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'x' });\n};\n\n/**\n * Scaling logic for the Y axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectY: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'y' });\n};\n\nexport const scalingEqually = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectFromCorner),\n);\n\nexport const scalingX = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectX),\n);\n\nexport const scalingY = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectY),\n);\n","import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { TAxis, TAxisKey } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  isLocked,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport {\n  CENTER,\n  SCALE_X,\n  SCALE_Y,\n  SKEWING,\n  SKEW_X,\n  SKEW_Y,\n} from '../constants';\n\nexport type SkewTransform = Transform & { skewingSide: -1 | 1 };\n\nconst AXIS_KEYS: Record<\n  TAxis,\n  {\n    counterAxis: TAxis;\n    scale: TAxisKey<'scale'>;\n    skew: TAxisKey<'skew'>;\n    lockSkewing: TAxisKey<'lockSkewing'>;\n    origin: TAxisKey<'origin'>;\n    flip: TAxisKey<'flip'>;\n  }\n> = {\n  x: {\n    counterAxis: 'y',\n    scale: SCALE_X,\n    skew: SKEW_X,\n    lockSkewing: 'lockSkewingX',\n    origin: 'originX',\n    flip: 'flipX',\n  },\n  y: {\n    counterAxis: 'x',\n    scale: SCALE_Y,\n    skew: SKEW_Y,\n    lockSkewing: 'lockSkewingY',\n    origin: 'originY',\n    flip: 'flipY',\n  },\n};\n\nconst skewMap = ['ns', 'nesw', 'ew', 'nwse'];\n\n/**\n * return the correct cursor style for the skew action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const skewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (control.x !== 0 && isLocked(fabricObject, 'lockSkewingY')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  if (control.y !== 0 && isLocked(fabricObject, 'lockSkewingX')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control) % 4;\n  return `${skewMap[n]}-resize`;\n};\n\n/**\n * Since skewing is applied before scaling, calculations are done in a scaleless plane\n * @see https://github.com/fabricjs/fabric.js/pull/8380\n */\nfunction skewObject(\n  axis: TAxis,\n  { target, ex, ey, skewingSide, ...transform }: SkewTransform,\n  pointer: Point,\n) {\n  const { skew: skewKey } = AXIS_KEYS[axis],\n    offset = pointer\n      .subtract(new Point(ex, ey))\n      .divide(new Point(target.scaleX, target.scaleY))[axis],\n    skewingBefore = target[skewKey],\n    skewingStart = transform[skewKey],\n    shearingStart = Math.tan(degreesToRadians(skewingStart)),\n    // let a, b be the size of target\n    // let a' be the value of a after applying skewing\n    // then:\n    // a' = a + b * skewA => skewA = (a' - a) / b\n    // the value b is tricky since skewY is applied before skewX\n    b =\n      axis === 'y'\n        ? target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n            // since skewY is applied before skewX, b (=width) is not affected by skewX\n            skewX: 0,\n          }).x\n        : target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n          }).y;\n\n  const shearing =\n    (2 * offset * skewingSide) /\n      // we max out fractions to safeguard from asymptotic behavior\n      Math.max(b, 1) +\n    // add starting state\n    shearingStart;\n\n  const skewing = radiansToDegrees(Math.atan(shearing));\n\n  target.set(skewKey, skewing);\n  const changed = skewingBefore !== target[skewKey];\n\n  if (changed && axis === 'y') {\n    // we don't want skewing to affect scaleX\n    // so we factor it by the inverse skewing diff to make it seem unchanged to the viewer\n    const { skewX, scaleX } = target,\n      dimBefore = target._getTransformedDimensions({ skewY: skewingBefore }),\n      dimAfter = target._getTransformedDimensions(),\n      compensationFactor = skewX !== 0 ? dimBefore.x / dimAfter.x : 1;\n    compensationFactor !== 1 &&\n      target.set(SCALE_X, compensationFactor * scaleX);\n  }\n\n  return changed;\n}\n\n/**\n * Wrapped Action handler for skewing on a given axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nfunction skewHandler(\n  axis: TAxis,\n  eventData: TPointerEvent,\n  transform: Transform,\n  x: number,\n  y: number,\n) {\n  const { target } = transform,\n    {\n      counterAxis,\n      origin: originKey,\n      lockSkewing: lockSkewingKey,\n      skew: skewKey,\n      flip: flipKey,\n    } = AXIS_KEYS[axis];\n  if (isLocked(target, lockSkewingKey)) {\n    return false;\n  }\n\n  const { origin: counterOriginKey, flip: counterFlipKey } =\n      AXIS_KEYS[counterAxis],\n    counterOriginFactor =\n      resolveOrigin(transform[counterOriginKey]) *\n      (target[counterFlipKey] ? -1 : 1),\n    // if the counter origin is top/left (= -0.5) then we are skewing x/y values on the bottom/right side of target respectively.\n    // if the counter origin is bottom/right (= 0.5) then we are skewing x/y values on the top/left side of target respectively.\n    // skewing direction on the top/left side of target is OPPOSITE to the direction of the movement of the pointer,\n    // so we factor skewing direction by this value.\n    skewingSide = (-Math.sign(counterOriginFactor) *\n      (target[flipKey] ? -1 : 1)) as 1 | -1,\n    skewingDirection =\n      ((target[skewKey] === 0 &&\n        // in case skewing equals 0 we use the pointer offset from target center to determine the direction of skewing\n        getLocalPoint(transform, CENTER, CENTER, x, y)[axis] > 0) ||\n      // in case target has skewing we use that as the direction\n      target[skewKey] > 0\n        ? 1\n        : -1) * skewingSide,\n    // anchor to the opposite side of the skewing direction\n    // normalize value from [-1, 1] to origin value [0, 1]\n    origin = -skewingDirection * 0.5 + 0.5;\n\n  const finalHandler = wrapWithFireEvent<SkewTransform>(\n    SKEWING,\n    wrapWithFixedAnchor((eventData, transform, x, y) =>\n      skewObject(axis, transform, new Point(x, y)),\n    ),\n  );\n\n  return finalHandler(\n    eventData,\n    {\n      ...transform,\n      [originKey]: origin,\n      skewingSide,\n    },\n    x,\n    y,\n  );\n}\n\n/**\n * Wrapped Action handler for skewing on the X axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('x', eventData, transform, x, y);\n};\n\n/**\n * Wrapped Action handler for skewing on the Y axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('y', eventData, transform, x, y);\n};\n","import type {\n  ControlCallback,\n  ControlCursorCallback,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { SCALE_X, SCALE_Y, SKEW_X, SKEW_Y } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxisKey } from '../typedefs';\nimport { scaleCursorStyleHandler, scalingX, scalingY } from './scale';\nimport { skewCursorStyleHandler, skewHandlerX, skewHandlerY } from './skew';\n\nfunction isAltAction(eventData: TPointerEvent, target: FabricObject) {\n  return eventData[target.canvas!.altActionKey!];\n}\n\n/**\n * Inspect event, control and fabricObject to return the correct action name\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} an action name\n */\nexport const scaleOrSkewActionName: ControlCallback<\n  TAxisKey<'skew' | 'scale'> | ''\n> = (eventData, control, fabricObject) => {\n  const isAlternative = isAltAction(eventData, fabricObject);\n  if (control.x === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_X : SCALE_Y;\n  }\n  if (control.y === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_Y : SCALE_X;\n  }\n  return '';\n};\n\n/**\n * Combine skew and scale style handlers to cover fabric standard use case\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleSkewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  return isAltAction(eventData, fabricObject)\n    ? skewCursorStyleHandler(eventData, control, fabricObject)\n    : scaleCursorStyleHandler(eventData, control, fabricObject);\n};\n/**\n * Composed action handler to either scale X or skew Y\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingXOrSkewingY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerY(eventData, transform, x, y)\n    : scalingX(eventData, transform, x, y);\n};\n\n/**\n * Composed action handler to either scale Y or skew X\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingYOrSkewingX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerX(eventData, transform, x, y)\n    : scalingY(eventData, transform, x, y);\n};\n","import { RESIZING, ROTATE } from '../constants';\nimport { changeWidth } from './changeWidth';\nimport { Control } from './Control';\nimport { rotationStyleHandler, rotationWithSnapping } from './rotate';\nimport { scaleCursorStyleHandler, scalingEqually } from './scale';\nimport {\n  scaleOrSkewActionName,\n  scaleSkewCursorStyleHandler,\n  scalingXOrSkewingY,\n  scalingYOrSkewingX,\n} from './scaleSkew';\n\n// use this function if you want to generate new controls for every instance\nexport const createObjectDefaultControls = () => ({\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mb: new Control({\n    x: 0,\n    y: 0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mt: new Control({\n    x: 0,\n    y: -0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  tl: new Control({\n    x: -0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  tr: new Control({\n    x: 0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  bl: new Control({\n    x: -0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  br: new Control({\n    x: 0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  mtr: new Control({\n    x: 0,\n    y: -0.5,\n    actionHandler: rotationWithSnapping,\n    cursorStyleHandler: rotationStyleHandler,\n    offsetY: -40,\n    withConnection: true,\n    actionName: ROTATE,\n  }),\n});\n\nexport const createResizeControls = () => ({\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n});\n\nexport const createTextboxDefaultControls = () => ({\n  ...createObjectDefaultControls(),\n  ...createResizeControls(),\n});\n","import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\nimport { SCALE } from '../../constants';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof InteractiveFabricObject).createControls(),\n      InteractiveFabricObject.ownDefaults,\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults\n   * @param {Object} [options] Options object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createObjectDefaultControls() };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith(SCALE)\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  findControl(\n    pointer: Point,\n    forTouch = false,\n  ): { key: string; control: Control; coord: TOCoord } | undefined {\n    if (!this.hasControls || !this.canvas) {\n      return undefined;\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      const control = this.controls[key];\n\n      if (\n        control.shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner,\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        this.__corner = key;\n\n        return { key, control, coord: this.oCoords[key] };\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined;\n    // decomposing could bring negative scaling and `_calculateCurrentDimensions` can't take it\n    if (transformOptions) {\n      transformOptions.scaleX = Math.abs(transformOptions.scaleX);\n      transformOptions.scaleY = Math.abs(transformOptions.scaleY);\n    }\n    const dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position),\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this,\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this,\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject,\n    ) => any,\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {},\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {},\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = this.borderScaleFactor; // 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride,\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options),\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor,\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY,\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * Be aware that since fabric 6.0 this function does not call setCoords anymore.\n   * setCoords needs to be called manually if the object of which we are rendering controls\n   * is outside the standard selection and transform process.\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {},\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility),\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean,\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(_options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {Event} [_options.e] event if the process is generated by an event\n   */\n  onSelect(_options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging(_e: TPointerEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(_e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} _e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(_e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDragSourceEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDropTargetEffect(_e: DragEvent) {\n    // for subclasses\n  }\n}\n","import type { Constructor } from '../typedefs';\n\n/***\n * https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern\n */\nexport function applyMixins<T extends Constructor, S extends Constructor>(\n  derivedCtor: T,\n  constructors: S[],\n) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      name !== 'constructor' &&\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n            Object.create(null),\n        );\n    });\n  });\n  return derivedCtor as T & { prototype: InstanceType<T & S> };\n}\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport { FabricObjectSVGExportMixin } from './FabricObjectSVGExportMixin';\nimport { InteractiveFabricObject } from './InteractiveObject';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { classRegistry } from '../../ClassRegistry';\n\n// TODO somehow we have to make a tree-shakeable import\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface FabricObject<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObjectSVGExportMixin {}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class FabricObject<\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends InteractiveFabricObject<Props, SProps, EventSpec> {}\n\napplyMixins(FabricObject, [FabricObjectSVGExportMixin]);\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n\nexport { cacheProperties } from './defaultValues';\n","/**\n * Returns true if context has transparent pixel\n * at specified location (taking tolerance into account)\n * @param {CanvasRenderingContext2D} ctx context\n * @param {Number} x x coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} y y coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} tolerance Tolerance pixels around the point, not alpha tolerance, integer\n * @return {boolean} true if transparent\n */\nexport const isTransparent = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  tolerance: number,\n): boolean => {\n  tolerance = Math.round(tolerance);\n  const size = tolerance * 2 + 1;\n  const { data } = ctx.getImageData(x - tolerance, y - tolerance, size, size);\n\n  // Split image data - for tolerance > 1, pixelDataSize = 4;\n  for (let i = 3; i < data.length; i += 4) {\n    const alphaChannel = data[i];\n    if (alphaChannel > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport { createVector } from '../vectors';\nimport type { TProjectStrokeOnPointsOptions, TProjection } from './types';\n\n/**\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n * @todo consider removing skewing from points before calculating stroke projection,\n * see https://github.com/fabricjs/fabric.js/commit/494a10ee2f8c2278ae9a55b20bf50cf6ee25b064#commitcomment-94751537\n */\nexport abstract class StrokeProjectionsBase {\n  declare options: TProjectStrokeOnPointsOptions;\n  declare scale: Point;\n  declare strokeUniformScalar: Point;\n  declare strokeProjectionMagnitude: number;\n\n  constructor(options: TProjectStrokeOnPointsOptions) {\n    this.options = options;\n    this.strokeProjectionMagnitude = this.options.strokeWidth / 2;\n    this.scale = new Point(this.options.scaleX, this.options.scaleY);\n    this.strokeUniformScalar = this.options.strokeUniform\n      ? new Point(1 / this.options.scaleX, 1 / this.options.scaleY)\n      : new Point(1, 1);\n  }\n\n  /**\n   * When the stroke is uniform, scaling affects the arrangement of points. So we must take it into account.\n   */\n  protected createSideVector(from: XY, to: XY) {\n    const v = createVector(from, to);\n    return this.options.strokeUniform ? v.multiply(this.scale) : v;\n  }\n\n  protected abstract calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude?: number,\n  ): Point;\n\n  protected projectOrthogonally(from: Point, to: Point, magnitude?: number) {\n    return this.applySkew(\n      from.add(this.calcOrthogonalProjection(from, to, magnitude)),\n    );\n  }\n\n  protected isSkewed() {\n    return this.options.skewX !== 0 || this.options.skewY !== 0;\n  }\n\n  protected applySkew(point: Point) {\n    const p = new Point(point);\n    // skewY must be applied before skewX as this distortion affects skewX calculation\n    p.y += p.x * Math.tan(degreesToRadians(this.options.skewY));\n    p.x += p.y * Math.tan(degreesToRadians(this.options.skewX));\n    return p;\n  }\n\n  protected scaleUnitVector(unitVector: Point, scalar: number) {\n    return unitVector.multiply(this.strokeUniformScalar).scalarMultiply(scalar);\n  }\n\n  protected abstract projectPoints(): Point[];\n\n  public abstract project(): TProjection[];\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { halfPI, twoMathPi } from '../../../constants';\nimport type { TRadian } from '../../../typedefs';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport {\n  calcAngleBetweenVectors,\n  calcVectorRotation,\n  crossProduct,\n  getOrthonormalVector,\n  getUnitVector,\n  isBetweenVectors,\n  magnitude,\n  rotateVector,\n} from '../vectors';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nconst zeroVector = new Point();\n\n/**\n * class in charge of finding projections for each type of line join\n * @see {@link [Closed path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#2-closed-path)}\n *\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin\n * - Spec: https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n *\n */\nexport class StrokeLineJoinProjections extends StrokeProjectionsBase {\n  /**\n   * The point being projected (the angle ∠BAC)\n   */\n  declare A: Point;\n  /**\n   * The point before A\n   */\n  declare B: Point;\n  /**\n   * The point after A\n   */\n  declare C: Point;\n  /**\n   * The AB vector\n   */\n  AB: Point;\n  /**\n   * The AC vector\n   */\n  AC: Point;\n  /**\n   * The angle of A (∠BAC)\n   */\n  alpha: TRadian;\n  /**\n   * The bisector of A (∠BAC)\n   */\n  bisector: Point;\n\n  static getOrthogonalRotationFactor(vector1: Point, vector2?: Point) {\n    const angle = vector2\n      ? calcAngleBetweenVectors(vector1, vector2)\n      : calcVectorRotation(vector1);\n    return Math.abs(angle) < halfPI ? -1 : 1;\n  }\n\n  constructor(A: XY, B: XY, C: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.B = new Point(B);\n    this.C = new Point(C);\n    this.AB = this.createSideVector(this.A, this.B);\n    this.AC = this.createSideVector(this.A, this.C);\n    this.alpha = calcAngleBetweenVectors(this.AB, this.AC);\n    this.bisector = getUnitVector(\n      // if AC is also the zero vector nothing will be projected\n      // in that case the next point will handle the projection\n      rotateVector(this.AB.eq(zeroVector) ? this.AC : this.AB, this.alpha / 2),\n    );\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    const orthogonalProjection = getOrthonormalVector(vector);\n    const correctSide = StrokeLineJoinProjections.getOrthogonalRotationFactor(\n      orthogonalProjection,\n      this.bisector,\n    );\n    return this.scaleUnitVector(orthogonalProjection, magnitude * correctSide);\n  }\n\n  /**\n   * BEVEL\n   * Calculation: the projection points are formed by the vector orthogonal to the vertex.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-2-bevel\n   */\n  projectBevel() {\n    const projections: Point[] = [];\n    // if `alpha` equals 0 or 2*PI, the projections are the same for `B` and `C`\n    (this.alpha % twoMathPi === 0 ? [this.B] : [this.B, this.C]).forEach(\n      (to) => {\n        projections.push(this.projectOrthogonally(this.A, to));\n        projections.push(\n          this.projectOrthogonally(this.A, to, -this.strokeProjectionMagnitude),\n        );\n      },\n    );\n    return projections;\n  }\n\n  /**\n   * MITER\n   * Calculation: the corner is formed by extending the outer edges of the stroke\n   * at the tangents of the path segments until they intersect.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-1-miter\n   */\n  projectMiter() {\n    const projections: Point[] = [],\n      alpha = Math.abs(this.alpha),\n      hypotUnitScalar = 1 / Math.sin(alpha / 2),\n      miterVector = this.scaleUnitVector(\n        this.bisector,\n        -this.strokeProjectionMagnitude * hypotUnitScalar,\n      );\n\n    // When two line segments meet at a sharp angle, it is possible for the join to extend,\n    // far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes\n    // a limit on the extent of the line join.\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n    // When the stroke is uniform, scaling changes the arrangement of points, this changes the miter-limit\n    const strokeMiterLimit = this.options.strokeUniform\n      ? magnitude(\n          this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit),\n        )\n      : this.options.strokeMiterLimit;\n\n    if (\n      magnitude(miterVector) / this.strokeProjectionMagnitude <=\n      strokeMiterLimit\n    ) {\n      projections.push(this.applySkew(this.A.add(miterVector)));\n    }\n    /* when the miter-limit is reached, the stroke line join becomes of type bevel.\n      We always need two orthogonal projections which are basically bevel-type projections,\n      so regardless of whether the miter-limit was reached or not, we include these projections.\n    */\n    projections.push(...this.projectBevel());\n\n    return projections;\n  }\n\n  /**\n   * ROUND (without skew)\n   * Calculation: the projections are the two vectors parallel to X and Y axes\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-1-round-without-skew\n   */\n  private projectRoundNoSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [],\n      // correctSide is used to only consider projecting for the outer side\n      correctSide = new Point(\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(this.bisector),\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(\n          new Point(this.bisector.y, this.bisector.x),\n        ),\n      ),\n      radiusOnAxisX = new Point(1, 0)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide),\n      radiusOnAxisY = new Point(0, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide);\n\n    [radiusOnAxisX, radiusOnAxisY].forEach((vector) => {\n      if (isBetweenVectors(vector, startCircle, endCircle)) {\n        projections.push(this.A.add(vector));\n      }\n    });\n    return projections;\n  }\n\n  /**\n   * ROUND (with skew)\n   * Calculation: the projections are the points furthest from the vertex in\n   * the direction of the X and Y axes after distortion.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-2-round-skew\n   */\n  private projectRoundWithSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [];\n\n    const { skewX, skewY, scaleX, scaleY, strokeUniform } = this.options,\n      shearing = new Point(\n        Math.tan(degreesToRadians(skewX)),\n        Math.tan(degreesToRadians(skewY)),\n      );\n    // The points furthest from the vertex in the direction of the X and Y axes after distortion\n    const circleRadius = this.strokeProjectionMagnitude,\n      newY = strokeUniform\n        ? circleRadius /\n          scaleY /\n          Math.sqrt(1 / scaleY ** 2 + (1 / scaleX ** 2) * shearing.y ** 2)\n        : circleRadius / Math.sqrt(1 + shearing.y ** 2),\n      furthestY = new Point(\n        // Safe guard due to floating point precision. In some situations the square root\n        // was returning NaN because of a negative number close to zero.\n        Math.sqrt(Math.max(circleRadius ** 2 - newY ** 2, 0)),\n        newY,\n      ),\n      newX = strokeUniform\n        ? circleRadius /\n          Math.sqrt(\n            1 +\n              (shearing.x ** 2 * (1 / scaleY) ** 2) /\n                (1 / scaleX + (1 / scaleX) * shearing.x * shearing.y) ** 2,\n          )\n        : circleRadius /\n          Math.sqrt(1 + shearing.x ** 2 / (1 + shearing.x * shearing.y) ** 2),\n      furthestX = new Point(\n        newX,\n        Math.sqrt(Math.max(circleRadius ** 2 - newX ** 2, 0)),\n      );\n\n    [\n      furthestX,\n      furthestX.scalarMultiply(-1),\n      furthestY,\n      furthestY.scalarMultiply(-1),\n    ]\n      // We need to skew the vector here as this information is used to check if\n      // it is between the start and end of the circle segment\n      .map((vector) =>\n        this.applySkew(\n          strokeUniform ? vector.multiply(this.strokeUniformScalar) : vector,\n        ),\n      )\n      .forEach((vector) => {\n        if (isBetweenVectors(vector, startCircle, endCircle)) {\n          projections.push(this.applySkew(this.A).add(vector));\n        }\n      });\n\n    return projections;\n  }\n\n  projectRound() {\n    const projections: Point[] = [];\n    /* Include the start and end points of the circle segment, so that only\n      the projections contained within it are included */\n    // add the orthogonal projections (start and end points of circle segment)\n    projections.push(...this.projectBevel());\n    // let's determines which one of the orthogonal projection is the beginning and end of the circle segment.\n    // when `alpha` equals 0 or 2*PI, we have a straight line, so the way to find the start/end is different.\n    const isStraightLine = this.alpha % twoMathPi === 0,\n      // change the origin of the projections to point A\n      // so that the cross product calculation is correct\n      newOrigin = this.applySkew(this.A),\n      proj0 = projections[isStraightLine ? 0 : 2].subtract(newOrigin),\n      proj1 = projections[isStraightLine ? 1 : 0].subtract(newOrigin),\n      // when `isStraightLine` === true, we compare with the vector opposite AB, otherwise we compare with the bisector.\n      comparisonVector = isStraightLine\n        ? this.applySkew(this.AB.scalarMultiply(-1))\n        : this.applySkew(\n            this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1),\n          ),\n      // the beginning of the circle segment is always to the right of the comparison vector (cross product > 0)\n      isProj0Start = crossProduct(proj0, comparisonVector) > 0,\n      startCircle = isProj0Start ? proj0 : proj1,\n      endCircle = isProj0Start ? proj1 : proj0;\n    if (!this.isSkewed()) {\n      projections.push(...this.projectRoundNoSkew(startCircle, endCircle));\n    } else {\n      projections.push(...this.projectRoundWithSkew(startCircle, endCircle));\n    }\n    return projections;\n  }\n\n  /**\n   * Project stroke width on points returning projections for each point as follows:\n   * - `miter`: 1 point corresponding to the outer boundary. If the miter limit is exceeded, it will be 2 points (becomes bevel)\n   * - `bevel`: 2 points corresponding to the bevel possible boundaries, orthogonal to the stroke.\n   * - `round`: same as `bevel` when it has no skew, with skew are 4 points.\n   */\n  protected projectPoints() {\n    switch (this.options.strokeLineJoin) {\n      case 'miter':\n        return this.projectMiter();\n      case 'round':\n        return this.projectRound();\n      default:\n        return this.projectBevel();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n      angle: this.alpha,\n      bisector: this.bisector,\n    }));\n  }\n}\n","import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { getOrthonormalVector, getUnitVector } from '../vectors';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\n/**\n * class in charge of finding projections for each type of line cap for start/end of an open path\n * @see {@link [Open path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#1-open-path)}\n *\n * Reference:\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n * - Spec: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-linecap-dev\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n */\nexport class StrokeLineCapProjections extends StrokeProjectionsBase {\n  /**\n   * edge point\n   */\n  declare A: Point;\n  /**\n   * point next to edge point\n   */\n  declare T: Point;\n\n  constructor(A: XY, T: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.T = new Point(T);\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    return this.scaleUnitVector(getOrthonormalVector(vector), magnitude);\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Butt\n   * Calculation: to find the projections, just find the points orthogonal to the stroke\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-1-butt\n   */\n  projectButt() {\n    return [\n      this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude),\n      this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude),\n    ];\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Round\n   * Calculation: same as stroke line join `round`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-2-round\n   */\n  projectRound() {\n    const projections: Point[] = [];\n\n    if (!this.isSkewed() && this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(\n        this.applySkew(this.A.add(projection)),\n        this.applySkew(this.A.subtract(projection)),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(\n          this.A,\n          this.T,\n          this.T,\n          this.options,\n        ).projectRound(),\n      );\n    }\n\n    return projections;\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Square\n   * Calculation: project a rectangle of points on the stroke in the opposite direction of the vector `AT`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-3-square\n   */\n  projectSquare() {\n    const projections: Point[] = [];\n\n    if (this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(this.A.add(projection), this.A.subtract(projection));\n    } else {\n      const orthogonalProjection = this.calcOrthogonalProjection(\n        this.A,\n        this.T,\n        this.strokeProjectionMagnitude,\n      );\n      const strokePointingOut = this.scaleUnitVector(\n        getUnitVector(this.createSideVector(this.A, this.T)),\n        -this.strokeProjectionMagnitude,\n      );\n      const projectedA = this.A.add(strokePointingOut);\n      projections.push(\n        projectedA.add(orthogonalProjection),\n        projectedA.subtract(orthogonalProjection),\n      );\n    }\n\n    return projections.map((p) => this.applySkew(p));\n  }\n\n  protected projectPoints() {\n    switch (this.options.strokeLineCap) {\n      case 'round':\n        return this.projectRound();\n      case 'square':\n        return this.projectSquare();\n      default:\n        return this.projectButt();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n    }));\n  }\n}\n","import { Point, type XY } from '../../../Point';\nimport { findIndexRight } from '../../internals/findRight';\nimport { StrokeLineCapProjections } from './StrokeLineCapProjections';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nexport * from './types';\n\n/**\n *\n * Used to calculate object's bounding box\n *\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n *\n */\nexport const projectStrokeOnPoints = (\n  points: XY[],\n  options: TProjectStrokeOnPointsOptions,\n  openPath = false,\n): TProjection[] => {\n  const projections: TProjection[] = [];\n\n  if (points.length === 0) {\n    return projections;\n  }\n\n  // first we remove duplicate neighboring points\n  const reduced = points.reduce(\n    (reduced, point) => {\n      if (!reduced[reduced.length - 1].eq(point)) {\n        reduced.push(new Point(point));\n      }\n      return reduced;\n    },\n    [new Point(points[0])],\n  );\n\n  if (reduced.length === 1) {\n    openPath = true;\n  } else if (!openPath) {\n    // remove points from end in case they equal the first point\n    // in order to correctly project the first point\n    const start = reduced[0];\n    const index = findIndexRight(reduced, (point) => !point.eq(start));\n    reduced.splice(index + 1);\n  }\n\n  reduced.forEach((A, index, points) => {\n    let B: XY, C: XY;\n    if (index === 0) {\n      C = points[1];\n      B = openPath ? A : points[points.length - 1];\n    } else if (index === points.length - 1) {\n      B = points[index - 1];\n      C = openPath ? A : points[0];\n    } else {\n      B = points[index - 1];\n      C = points[index + 1];\n    }\n\n    if (openPath && points.length === 1) {\n      projections.push(\n        ...new StrokeLineCapProjections(A, A, options).project(),\n      );\n    } else if (openPath && (index === 0 || index === points.length - 1)) {\n      projections.push(\n        ...new StrokeLineCapProjections(\n          A,\n          index === 0 ? C : B,\n          options,\n        ).project(),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(A, B, C, options).project(),\n      );\n    }\n  });\n\n  return projections;\n};\n","export const findIndexRight = <T>(\n  array: T[],\n  predicate: (value: T, index: number, array: T[]) => boolean,\n) => {\n  for (let index = array.length - 1; index >= 0; index--) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n","import type { TextStyle } from '../../shapes/Text/StyledText';\n\nexport const cloneStyles = (style: TextStyle): TextStyle => {\n  const newObj: TextStyle = {};\n  Object.keys(style).forEach((key) => {\n    newObj[key] = {};\n    Object.keys(style[key]).forEach((keyInner) => {\n      newObj[key][keyInner] = { ...style[key][keyInner] };\n    });\n  });\n  return newObj;\n};\n","import { getFabricWindow } from '../env';\n\n/**\n * Capitalizes a string\n * @param {String} string String to capitalize\n * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n * and other letters stay untouched, if false first letter is capitalized\n * and other letters are converted to lowercase.\n * @return {String} Capitalized version of a string\n */\nexport const capitalize = (string: string, firstLetterOnly = false): string =>\n  `${string.charAt(0).toUpperCase()}${\n    firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase()\n  }`;\n\n/**\n * Escapes XML in a string\n * @param {String} string String to escape\n * @return {String} Escaped version of a string\n */\nexport const escapeXml = (string: string): string =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n\nlet segmenter: Intl.Segmenter | false;\n\nconst getSegmenter = () => {\n  if (!segmenter) {\n    segmenter =\n      'Intl' in getFabricWindow() &&\n      'Segmenter' in Intl &&\n      new Intl.Segmenter(undefined, {\n        granularity: 'grapheme',\n      });\n  }\n  return segmenter;\n};\n\n/**\n * Divide a string in the user perceived single units\n * @param {String} textstring String to escape\n * @return {Array} array containing the graphemes\n */\nexport const graphemeSplit = (textstring: string): string[] => {\n  segmenter || getSegmenter();\n  if (segmenter) {\n    const segments = segmenter.segment(textstring);\n    return Array.from(segments).map(({ segment }) => segment);\n  }\n\n  //Fallback\n  return graphemeSplitImpl(textstring);\n};\n\nconst graphemeSplitImpl = (textstring: string): string[] => {\n  const graphemes: string[] = [];\n  for (let i = 0, chr; i < textstring.length; i++) {\n    if ((chr = getWholeChar(textstring, i)) === false) {\n      continue;\n    }\n    graphemes.push(chr as string);\n  }\n  return graphemes;\n};\n\n// taken from mdn in the charAt doc page.\nconst getWholeChar = (str: string, i: number): string | false => {\n  const code = str.charCodeAt(i);\n  if (isNaN(code)) {\n    return ''; // Position not found\n  }\n  if (code < 0xd800 || code > 0xdfff) {\n    return str.charAt(i);\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 <= code && code <= 0xdbff) {\n    if (str.length <= i + 1) {\n      throw 'High surrogate without following low surrogate';\n    }\n    const next = str.charCodeAt(i + 1);\n    if (0xdc00 > next || next > 0xdfff) {\n      throw 'High surrogate without following low surrogate';\n    }\n    return str.charAt(i) + str.charAt(i + 1);\n  }\n  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n  if (i === 0) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  const prev = str.charCodeAt(i - 1);\n\n  // (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 > prev || prev > 0xdbff) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  // We can pass over low surrogates now as the second component\n  // in a pair which we have already processed\n  return false;\n};\n","import { reNewline } from '../../constants';\nimport type {\n  TextStyle,\n  TextStyleDeclaration,\n} from '../../shapes/Text/StyledText';\nimport { cloneStyles } from '../internals/cloneStyles';\nimport { graphemeSplit } from '../lang_string';\n\nexport type TextStyleArray = {\n  start: number;\n  end: number;\n  style: TextStyleDeclaration;\n}[];\n\n/**\n * @param {Object} prevStyle first style to compare\n * @param {Object} thisStyle second style to compare\n * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n * @return {boolean} true if the style changed\n */\nexport const hasStyleChanged = (\n  prevStyle: TextStyleDeclaration,\n  thisStyle: TextStyleDeclaration,\n  forTextSpans = false,\n) =>\n  prevStyle.fill !== thisStyle.fill ||\n  prevStyle.stroke !== thisStyle.stroke ||\n  prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n  prevStyle.fontSize !== thisStyle.fontSize ||\n  prevStyle.fontFamily !== thisStyle.fontFamily ||\n  prevStyle.fontWeight !== thisStyle.fontWeight ||\n  prevStyle.fontStyle !== thisStyle.fontStyle ||\n  prevStyle.textDecorationThickness !== thisStyle.textDecorationThickness ||\n  prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n  prevStyle.deltaY !== thisStyle.deltaY ||\n  (forTextSpans &&\n    (prevStyle.overline !== thisStyle.overline ||\n      prevStyle.underline !== thisStyle.underline ||\n      prevStyle.linethrough !== thisStyle.linethrough));\n\n/**\n * Returns the array form of a text object's inline styles property with styles grouped in ranges\n * rather than per character. This format is less verbose, and is better suited for storage\n * so it is used in serialization (not during runtime).\n * @param {object} styles per character styles for a text object\n * @param {String} text the text string that the styles are applied to\n * @return {{start: number, end: number, style: object}[]}\n */\nexport const stylesToArray = (\n  styles: TextStyle,\n  text: string,\n): TextStyleArray => {\n  const textLines = text.split('\\n'),\n    stylesArray = [];\n  let charIndex = -1,\n    prevStyle = {};\n  // clone style structure to prevent mutation\n  styles = cloneStyles(styles);\n\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n    if (!styles[i]) {\n      //no styles exist for this line, so add the line's length to the charIndex total and reset prevStyle\n      charIndex += chars.length;\n      prevStyle = {};\n      continue;\n    }\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      const thisStyle = styles[i][c];\n      //check if style exists for this character\n      if (thisStyle && Object.keys(thisStyle).length > 0) {\n        if (hasStyleChanged(prevStyle, thisStyle, true)) {\n          stylesArray.push({\n            start: charIndex,\n            end: charIndex + 1,\n            style: thisStyle,\n          });\n        } else {\n          //if style is the same as previous character, increase end index\n          stylesArray[stylesArray.length - 1].end++;\n        }\n      }\n      prevStyle = thisStyle || {};\n    }\n  }\n  return stylesArray;\n};\n\n/**\n * Returns the object form of the styles property with styles that are assigned per\n * character rather than grouped by range. This format is more verbose, and is\n * only used during runtime (not for serialization/storage)\n * @param {Array} styles the serialized form of a text object's styles\n * @param {String} text the text string that the styles are applied to\n * @return {Object}\n */\nexport const stylesFromArray = (\n  styles: TextStyleArray | TextStyle,\n  text: string,\n): TextStyle => {\n  if (!Array.isArray(styles)) {\n    // clone to prevent mutation\n    return cloneStyles(styles);\n  }\n  const textLines = text.split(reNewline),\n    stylesObject: TextStyle = {};\n  let charIndex = -1,\n    styleIndex = 0;\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      //check if there's a style collection that includes the current character\n      if (\n        styles[styleIndex] &&\n        styles[styleIndex].start <= charIndex &&\n        charIndex < styles[styleIndex].end\n      ) {\n        //create object for line index if it doesn't exist\n        stylesObject[i] = stylesObject[i] || {};\n        //assign a style at this character's index\n        stylesObject[i][c] = { ...styles[styleIndex].style };\n        //if character is at the end of the current style collection, move to the next\n        if (charIndex === styles[styleIndex].end - 1) {\n          styleIndex++;\n        }\n      }\n    }\n  }\n  return stylesObject;\n};\n","import { FILL, STROKE } from '../constants';\n\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nexport const SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  FILL,\n  'fill-opacity',\n  'fill-rule',\n  'opacity',\n  STROKE,\n  'stroke-dasharray',\n  'stroke-linecap',\n  'stroke-dashoffset',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke-width',\n  'id',\n  'paint-order',\n  'vector-effect',\n  'instantiated_by_use',\n  'clip-path',\n];\n","export function selectorMatches(element: HTMLElement, selector: string) {\n  const nodeName = element.nodeName;\n  const classNames = element.getAttribute('class');\n  const id = element.getAttribute('id');\n  const azAz = '(?![a-zA-Z\\\\-]+)';\n  let matcher;\n  // i check if a selector matches slicing away part from it.\n  // if i get empty string i should match\n  matcher = new RegExp('^' + nodeName, 'i');\n  selector = selector.replace(matcher, '');\n  if (id && selector.length) {\n    matcher = new RegExp('#' + id + azAz, 'i');\n    selector = selector.replace(matcher, '');\n  }\n  if (classNames && selector.length) {\n    const splitClassNames = classNames.split(' ');\n    for (let i = splitClassNames.length; i--; ) {\n      matcher = new RegExp('\\\\.' + splitClassNames[i] + azAz, 'i');\n      selector = selector.replace(matcher, '');\n    }\n  }\n  return selector.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\nimport { doesSomeParentMatch } from './doesSomeParentMatch';\n\n/**\n * @private\n */\n\nexport function elementMatchesRule(element: HTMLElement, selectors: string[]) {\n  let parentMatching = true;\n  // start from rightmost selector.\n  const firstMatching = selectorMatches(element, selectors.pop()!);\n  if (firstMatching && selectors.length) {\n    parentMatching = doesSomeParentMatch(element, selectors);\n  }\n  return firstMatching && parentMatching && selectors.length === 0;\n}\n","import { selectorMatches } from './selectorMatches';\n\nexport function doesSomeParentMatch(element: HTMLElement, selectors: string[]) {\n  let selector: string,\n    parentMatching = true;\n  while (\n    element.parentElement &&\n    element.parentElement.nodeType === 1 &&\n    selectors.length\n  ) {\n    if (parentMatching) {\n      selector = selectors.pop()!;\n    }\n    element = element.parentElement;\n    parentMatching = selectorMatches(element, selector!);\n  }\n  return selectors.length === 0;\n}\n","import { attributesMap } from './constants';\n\nexport const normalizeAttr = (\n  attr: keyof typeof attributesMap | string,\n): string => attributesMap[attr as keyof typeof attributesMap] ?? attr;\n","import { reNum } from '../../parser/constants';\n\nconst regex = new RegExp(`(${reNum})`, 'gi');\n\nexport const cleanupSvgAttribute = (attributeValue: string) =>\n  attributeValue\n    .replace(regex, ' $1 ')\n    // replace annoying commas and arbitrary whitespace with single spaces\n    .replace(/,/gi, ' ')\n    .replace(/\\s+/gi, ' ');\n","import { ROTATE, SCALE, SKEW_X, SKEW_Y, iMatrix } from '../constants';\nimport { reNum } from './constants';\nimport type { TMat2D } from '../typedefs';\nimport { cleanupSvgAttribute } from '../util/internals/cleanupSvgAttribute';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createSkewXMatrix,\n  createSkewYMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\n\n// == begin transform regexp\nconst p = `(${reNum})`;\nconst skewX = String.raw`(skewX)\\(${p}\\)`;\nconst skewY = String.raw`(skewY)\\(${p}\\)`;\nconst rotate = String.raw`(rotate)\\(${p}(?: ${p} ${p})?\\)`;\nconst scale = String.raw`(scale)\\(${p}(?: ${p})?\\)`;\nconst translate = String.raw`(translate)\\(${p}(?: ${p})?\\)`;\nconst matrix = String.raw`(matrix)\\(${p} ${p} ${p} ${p} ${p} ${p}\\)`;\nconst transform = `(?:${matrix}|${translate}|${rotate}|${scale}|${skewX}|${skewY})`;\nconst transforms = `(?:${transform}*)`;\nconst transformList = String.raw`^\\s*(?:${transforms}?)\\s*$`;\n// http://www.w3.org/TR/SVG/coords.html#TransformAttribute\nconst reTransformList = new RegExp(transformList);\nconst reTransform = new RegExp(transform);\nconst reTransformAll = new RegExp(transform, 'g');\n// == end transform regexp\n\n/**\n * Parses \"transform\" attribute, returning an array of values\n * @static\n * @function\n * @memberOf fabric\n * @param {String} attributeValue String containing attribute value\n * @return {TTransformMatrix} Array of 6 elements representing transformation matrix\n */\nexport function parseTransformAttribute(attributeValue: string): TMat2D {\n  // first we clean the string\n  attributeValue = cleanupSvgAttribute(attributeValue)\n    // remove spaces around front parentheses\n    .replace(/\\s*([()])\\s*/gi, '$1');\n\n  // start with identity matrix\n  const matrices: TMat2D[] = [];\n\n  // return if no argument was given or\n  // an argument does not match transform attribute regexp\n  if (\n    !attributeValue ||\n    (attributeValue && !reTransformList.test(attributeValue))\n  ) {\n    return [...iMatrix];\n  }\n\n  for (const match of attributeValue.matchAll(reTransformAll)) {\n    const transformMatch = reTransform.exec(match[0]);\n    if (!transformMatch) {\n      continue;\n    }\n    let matrix: TMat2D = iMatrix;\n    const matchedParams = transformMatch.filter((m) => !!m);\n    const [, operation, ...rawArgs] = matchedParams;\n    const [arg0, arg1, arg2, arg3, arg4, arg5] = rawArgs.map((arg) =>\n      parseFloat(arg),\n    );\n\n    switch (operation) {\n      case 'translate':\n        matrix = createTranslateMatrix(arg0, arg1);\n        break;\n      case ROTATE:\n        matrix = createRotateMatrix({ angle: arg0 }, { x: arg1, y: arg2 });\n        break;\n      case SCALE:\n        matrix = createScaleMatrix(arg0, arg1);\n        break;\n      case SKEW_X:\n        matrix = createSkewXMatrix(arg0);\n        break;\n      case SKEW_Y:\n        matrix = createSkewYMatrix(arg0);\n        break;\n      case 'matrix':\n        matrix = [arg0, arg1, arg2, arg3, arg4, arg5];\n        break;\n    }\n\n    // snapshot current matrix into matrices array\n    matrices.push(matrix);\n  }\n\n  return multiplyTransformMatrixArray(matrices);\n}\n","import { multiplyTransformMatrices } from '../util/misc/matrix';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { parseTransformAttribute } from './parseTransformAttribute';\nimport { CENTER, LEFT, RIGHT, NONE, FILL, STROKE } from '../constants';\nimport { TEXT_DECORATION_THICKNESS } from '../shapes/Text/constants';\n\nexport function normalizeValue(\n  attr: string,\n  value: any,\n  parentAttributes: Record<string, any>,\n  fontSize: number,\n): string | null | boolean | number[] | number {\n  const isArray = Array.isArray(value);\n  let parsed: number | number[];\n  let ouputValue: string | null | boolean | number[] | number = value;\n  if ((attr === FILL || attr === STROKE) && value === NONE) {\n    ouputValue = '';\n  } else if (attr === 'strokeUniform') {\n    return value === 'non-scaling-stroke';\n  } else if (attr === 'strokeDashArray') {\n    if (value === NONE) {\n      ouputValue = null;\n    } else {\n      ouputValue = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n    }\n  } else if (attr === 'transformMatrix') {\n    if (parentAttributes && parentAttributes.transformMatrix) {\n      ouputValue = multiplyTransformMatrices(\n        parentAttributes.transformMatrix,\n        parseTransformAttribute(value),\n      );\n    } else {\n      ouputValue = parseTransformAttribute(value);\n    }\n  } else if (attr === 'visible') {\n    ouputValue = value !== NONE && value !== 'hidden';\n    // display=none on parent element always takes precedence over child element\n    if (parentAttributes && parentAttributes.visible === false) {\n      ouputValue = false;\n    }\n  } else if (attr === 'opacity') {\n    ouputValue = parseFloat(value);\n    if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n      ouputValue *= parentAttributes.opacity as number;\n    }\n  } else if (attr === 'textAnchor' /* text-anchor */) {\n    ouputValue = value === 'start' ? LEFT : value === 'end' ? RIGHT : CENTER;\n  } else if (attr === 'charSpacing' || attr === TEXT_DECORATION_THICKNESS) {\n    // parseUnit returns px and we convert it to em\n    parsed = (parseUnit(value, fontSize) / fontSize) * 1000;\n  } else if (attr === 'paintFirst') {\n    const fillIndex = value.indexOf(FILL);\n    const strokeIndex = value.indexOf(STROKE);\n    ouputValue = FILL;\n    if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n      ouputValue = STROKE;\n    } else if (fillIndex === -1 && strokeIndex > -1) {\n      ouputValue = STROKE;\n    }\n  } else if (\n    attr === 'href' ||\n    attr === 'xlink:href' ||\n    attr === 'font' ||\n    attr === 'id'\n  ) {\n    return value;\n  } else if (attr === 'imageSmoothing') {\n    return value === 'optimizeQuality';\n  } else {\n    parsed = isArray\n      ? (value as string[]).map(parseUnit)\n      : parseUnit(value, fontSize);\n  }\n\n  return !isArray && isNaN(parsed! as number) ? ouputValue : parsed!;\n}\n","import { parseUnit } from '../util/misc/svgParsing';\nimport { reFontDeclaration } from './constants';\n\n/**\n * Parses a short font declaration, building adding its properties to a style object\n * @static\n * @function\n * @memberOf fabric\n * @param {String} value font declaration\n * @param {Object} oStyle definition\n */\nexport function parseFontDeclaration(\n  value: string,\n  oStyle: Record<string, any>,\n): void {\n  const match = value.match(reFontDeclaration);\n\n  if (!match) {\n    return;\n  }\n  const fontStyle = match[1],\n    // font variant is not used\n    // fontVariant = match[2],\n    fontWeight = match[3],\n    fontSize = match[4],\n    lineHeight = match[5],\n    fontFamily = match[6];\n\n  if (fontStyle) {\n    oStyle.fontStyle = fontStyle;\n  }\n  if (fontWeight) {\n    oStyle.fontWeight = isNaN(parseFloat(fontWeight))\n      ? fontWeight\n      : parseFloat(fontWeight);\n  }\n  if (fontSize) {\n    oStyle.fontSize = parseUnit(fontSize);\n  }\n  if (fontFamily) {\n    oStyle.fontFamily = fontFamily;\n  }\n  if (lineHeight) {\n    oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n  }\n}\n","/**\n * Takes a style string and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleString(\n  style: string,\n  oStyle: Record<string, any>,\n): void {\n  style\n    .replace(/;\\s*$/, '')\n    .split(';')\n    .forEach((chunk) => {\n      if (!chunk) return;\n      const [attr, value] = chunk.split(':');\n      oStyle[attr.trim().toLowerCase()] = value.trim();\n    });\n}\n","import { parseStyleObject } from './parseStyleObject';\nimport { parseStyleString } from './parseStyleString';\n\n/**\n * Parses \"style\" attribute, retuning an object with values\n * @static\n * @memberOf fabric\n * @param {SVGElement} element Element to parse\n * @return {Object} Objects with values parsed from style attribute of an element\n */\nexport function parseStyleAttribute(element: HTMLElement): Record<string, any> {\n  const oStyle: Record<string, any> = {},\n    style = element.getAttribute('style');\n\n  if (!style) {\n    return oStyle;\n  }\n\n  if (typeof style === 'string') {\n    parseStyleString(style, oStyle);\n  } else {\n    parseStyleObject(style, oStyle);\n  }\n\n  return oStyle;\n}\n","/**\n * Takes a style object and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleObject(\n  style: Record<string, any>,\n  oStyle: Record<string, any>,\n): void {\n  Object.entries(style).forEach(([prop, value]) => {\n    if (value === undefined) {\n      return;\n    }\n    oStyle[prop.toLowerCase()] = value;\n  });\n}\n","import { Color } from '../color/Color';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject } from '../shapes/Object/FabricObject';\n\nconst colorAttributesMap = {\n  stroke: 'strokeOpacity',\n  fill: 'fillOpacity',\n};\n\n/**\n * @private\n * @param {Object} attributes Array of attributes to parse\n */\n\nexport function setStrokeFillOpacity(\n  attributes: Record<string, any>,\n): Record<string, any> {\n  const defaults = FabricObject.getDefaults();\n  Object.entries(colorAttributesMap).forEach(([attr, colorAttr]) => {\n    if (\n      typeof attributes[colorAttr] === 'undefined' ||\n      attributes[attr] === ''\n    ) {\n      return;\n    }\n    if (typeof attributes[attr] === 'undefined') {\n      if (!defaults[attr]) {\n        return;\n      }\n      attributes[attr] = defaults[attr];\n    }\n    if (attributes[attr].indexOf('url(') === 0) {\n      return;\n    }\n    const color = new Color(attributes[attr]);\n    attributes[attr] = color\n      .setAlpha(toFixed(color.getAlpha() * attributes[colorAttr], 2))\n      .toRgba();\n  });\n  return attributes;\n}\n","import { DEFAULT_SVG_FONT_SIZE } from '../constants';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { cPath, fSize, svgValidParentsRegEx } from './constants';\nimport { getGlobalStylesForElement } from './getGlobalStylesForElement';\nimport { normalizeAttr } from './normalizeAttr';\nimport { normalizeValue } from './normalizeValue';\nimport { parseFontDeclaration } from './parseFontDeclaration';\nimport { parseStyleAttribute } from './parseStyleAttribute';\nimport { setStrokeFillOpacity } from './setStrokeFillOpacity';\nimport type { CSSRules } from './typedefs';\n\n/**\n * Returns an object of attributes' name/value, given element and an array of attribute names;\n * Parses parent \"g\" nodes recursively upwards.\n * @param {SVGElement | HTMLElement} element Element to parse\n * @param {Array} attributes Array of attributes to parse\n * @return {Object} object containing parsed attributes' names/values\n */\nexport function parseAttributes(\n  element: HTMLElement | null,\n  attributes: string[],\n  cssRules?: CSSRules,\n): Record<string, any> {\n  if (!element) {\n    return {};\n  }\n\n  let parentAttributes: Record<string, string> = {},\n    fontSize: number,\n    parentFontSize = DEFAULT_SVG_FONT_SIZE;\n\n  // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n  if (\n    element.parentNode &&\n    svgValidParentsRegEx.test(element.parentNode.nodeName)\n  ) {\n    parentAttributes = parseAttributes(\n      element.parentElement,\n      attributes,\n      cssRules,\n    );\n    if (parentAttributes.fontSize) {\n      fontSize = parentFontSize = parseUnit(parentAttributes.fontSize);\n    }\n  }\n\n  const ownAttributes: Record<string, string> = {\n    ...attributes.reduce<Record<string, string>>((memo, attr) => {\n      const value = element.getAttribute(attr);\n      if (value) {\n        memo[attr] = value;\n      }\n      return memo;\n    }, {}),\n    // add values parsed from style, which take precedence over attributes\n    // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n    ...getGlobalStylesForElement(element, cssRules),\n    ...parseStyleAttribute(element),\n  };\n\n  if (ownAttributes[cPath]) {\n    element.setAttribute(cPath, ownAttributes[cPath]);\n  }\n  if (ownAttributes[fSize]) {\n    // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n    fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\n    ownAttributes[fSize] = `${fontSize}`;\n  }\n\n  // this should have its own complex type\n  const normalizedStyle: Record<\n    string,\n    string | boolean | number | number[] | null\n  > = {};\n  for (const attr in ownAttributes) {\n    const normalizedAttr = normalizeAttr(attr);\n    const normalizedValue = normalizeValue(\n      normalizedAttr,\n      ownAttributes[attr],\n      parentAttributes,\n      fontSize!,\n    );\n    normalizedStyle[normalizedAttr] = normalizedValue;\n  }\n  if (normalizedStyle && normalizedStyle.font) {\n    parseFontDeclaration(normalizedStyle.font as string, normalizedStyle);\n  }\n  const mergedAttrs = { ...parentAttributes, ...normalizedStyle };\n  return svgValidParentsRegEx.test(element.nodeName)\n    ? mergedAttrs\n    : setStrokeFillOpacity(mergedAttrs);\n}\n","import { elementMatchesRule } from './elementMatchesRule';\nimport type { CSSRules } from './typedefs';\n\n/**\n * @private\n */\n\nexport function getGlobalStylesForElement(\n  element: HTMLElement,\n  cssRules: CSSRules = {},\n) {\n  let styles: Record<string, string> = {};\n  for (const rule in cssRules) {\n    if (elementMatchesRule(element, rule.split(' '))) {\n      styles = {\n        ...styles,\n        ...cssRules[rule],\n      };\n    }\n  }\n  return styles;\n}\n","import { kRect } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const rectDefaultValues: Partial<TClassProperties<Rect>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueRectProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedRectProps\n  extends SerializedObjectProps,\n    UniqueRectProps {}\n\nexport interface RectProps extends FabricObjectProps, UniqueRectProps {}\n\nconst RECT_PROPS = ['rx', 'ry'] as const;\n\nexport class Rect<\n    Props extends TOptions<RectProps> = Partial<RectProps>,\n    SProps extends SerializedRectProps = SerializedRectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements RectProps\n{\n  /**\n   * Horizontal border radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical border radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Rect';\n\n  static cacheProperties = [...cacheProperties, ...RECT_PROPS];\n\n  static ownDefaults = rectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Rect.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Rect.ownDefaults);\n    this.setOptions(options);\n    this._initRxRy();\n  }\n  /**\n   * Initializes rx/ry attributes\n   * @private\n   */\n  _initRxRy() {\n    const { rx, ry } = this;\n    if (rx && !ry) {\n      this.ry = rx;\n    } else if (ry && !rx) {\n      this.rx = ry;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const { width: w, height: h } = this;\n    const x = -w / 2;\n    const y = -h / 2;\n    const rx = this.rx ? Math.min(this.rx, w / 2) : 0;\n    const ry = this.ry ? Math.min(this.ry, h / 2) : 0;\n    const isRounded = rx !== 0 || ry !== 0;\n\n    ctx.beginPath();\n\n    ctx.moveTo(x + rx, y);\n\n    ctx.lineTo(x + w - rx, y);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w - kRect * rx,\n        y,\n        x + w,\n        y + kRect * ry,\n        x + w,\n        y + ry,\n      );\n\n    ctx.lineTo(x + w, y + h - ry);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w,\n        y + h - kRect * ry,\n        x + w - kRect * rx,\n        y + h,\n        x + w - rx,\n        y + h,\n      );\n\n    ctx.lineTo(x + rx, y + h);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + kRect * rx,\n        y + h,\n        x,\n        y + h - kRect * ry,\n        x,\n        y + h - ry,\n      );\n\n    ctx.lineTo(x, y + ry);\n    isRounded &&\n      ctx.bezierCurveTo(x, y + kRect * ry, x + kRect * rx, y, x + rx, y);\n\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...RECT_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { width, height, rx, ry } = this;\n    return [\n      '<rect ',\n      'COMMON_PARTS',\n      `x=\"${-width / 2}\" y=\"${\n        -height / 2\n      }\" rx=\"${rx}\" ry=\"${ry}\" width=\"${width}\" height=\"${height}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Rect.fromElement`)\n   * @static\n   * @memberOf Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'rx',\n    'ry',\n    'width',\n    'height',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns {@link Rect} instance from an SVG element\n   * @static\n   * @memberOf Rect\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      left = 0,\n      top = 0,\n      width = 0,\n      height = 0,\n      visible = true,\n      ...restOfparsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n\n    return new this({\n      ...options,\n      ...restOfparsedAttributes,\n      left,\n      top,\n      width,\n      height,\n      visible: Boolean(visible && width && height),\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Rect);\nclassRegistry.setSVGClass(Rect);\n","export const LAYOUT_TYPE_INITIALIZATION = 'initialization';\nexport const LAYOUT_TYPE_ADDED = 'added';\nexport const LAYOUT_TYPE_REMOVED = 'removed';\nexport const LAYOUT_TYPE_IMPERATIVE = 'imperative';\nexport const LAYOUT_TYPE_OBJECT_MODIFIED = 'object_modified';\nexport const LAYOUT_TYPE_OBJECT_MODIFYING = 'object_modifying';\n","import { Point, ZERO } from '../../Point';\nimport type { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { multiplyTransformMatrixArray } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport {\n  calcPlaneChangeMatrix,\n  sendVectorToPlane,\n} from '../../util/misc/planeChange';\n\n/**\n * @returns 2 points, the tl and br corners of the non rotated bounding box of an object\n * in the {@link group} plane, taking into account objects that {@link group} is their parent\n * but also belong to the active selection.\n */\nexport const getObjectBounds = (\n  destinationGroup: Group,\n  object: FabricObject,\n): Point[] => {\n  const {\n    strokeUniform,\n    strokeWidth,\n    width,\n    height,\n    group: currentGroup,\n  } = object;\n  const t =\n    currentGroup && currentGroup !== destinationGroup\n      ? calcPlaneChangeMatrix(\n          currentGroup.calcTransformMatrix(),\n          destinationGroup.calcTransformMatrix(),\n        )\n      : null;\n  const objectCenter = t\n    ? object.getRelativeCenterPoint().transform(t)\n    : object.getRelativeCenterPoint();\n  const accountForStroke = !object['isStrokeAccountedForInDimensions']();\n  const strokeUniformVector =\n    strokeUniform && accountForStroke\n      ? sendVectorToPlane(\n          new Point(strokeWidth, strokeWidth),\n          undefined,\n          destinationGroup.calcTransformMatrix(),\n        )\n      : ZERO;\n  const scalingStrokeWidth =\n    !strokeUniform && accountForStroke ? strokeWidth : 0;\n  const sizeVector = sizeAfterTransform(\n    width + scalingStrokeWidth,\n    height + scalingStrokeWidth,\n    multiplyTransformMatrixArray([t, object.calcOwnMatrix()], true),\n  )\n    .add(strokeUniformVector)\n    .scalarDivide(2);\n  return [objectCenter.subtract(sizeVector), objectCenter.add(sizeVector)];\n};\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_IMPERATIVE,\n} from '../constants';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { getObjectBounds } from './utils';\n\n/**\n * Exposes a main public method {@link calcLayoutResult} that is used by the `LayoutManager` to perform layout.\n * Returning `undefined` signals the `LayoutManager` to skip the layout.\n *\n * In charge of calculating the bounding box of the passed objects.\n */\nexport abstract class LayoutStrategy {\n  /**\n   * override by subclass for persistence (TS does not support `static abstract`)\n   */\n  static type = 'strategy';\n\n  /**\n   * Used by the `LayoutManager` to perform layout\n   * @TODO/fix: if this method is calcResult, should calc unconditionally.\n   * the condition to not calc should be evaluated by the layoutManager.\n   * @returns layout result **OR** `undefined` to skip layout\n   */\n  public calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    if (this.shouldPerformLayout(context)) {\n      return this.calcBoundingBox(objects, context);\n    }\n  }\n\n  shouldPerformLayout({ type, prevStrategy, strategy }: StrictLayoutContext) {\n    return (\n      type === LAYOUT_TYPE_INITIALIZATION ||\n      type === LAYOUT_TYPE_IMPERATIVE ||\n      (!!prevStrategy && strategy !== prevStrategy)\n    );\n  }\n\n  shouldLayoutClipPath({ type, target: { clipPath } }: StrictLayoutContext) {\n    return (\n      type !== LAYOUT_TYPE_INITIALIZATION &&\n      clipPath &&\n      !clipPath.absolutePositioned\n    );\n  }\n\n  getInitialSize(\n    context: StrictLayoutContext & InitializationLayoutContext,\n    result: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ) {\n    return result.size;\n  }\n\n  /**\n   * Override this method to customize layout.\n   */\n  calcBoundingBox(\n    objects: FabricObject[],\n    context: StrictLayoutContext,\n  ): LayoutStrategyResult | undefined {\n    const { type, target } = context;\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.overrides) {\n      return context.overrides;\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    const { left, top, width, height } = makeBoundingBoxFromPoints(\n      objects\n        .map((object) => getObjectBounds(target, object))\n        .reduce<Point[]>((coords, curr) => coords.concat(curr), []),\n    );\n    const bboxSize = new Point(width, height);\n    const bboxLeftTop = new Point(left, top);\n    const bboxCenter = bboxLeftTop.add(bboxSize.scalarDivide(2));\n\n    if (type === LAYOUT_TYPE_INITIALIZATION) {\n      const actualSize = this.getInitialSize(context, {\n        size: bboxSize,\n        center: bboxCenter,\n      });\n      return {\n        // in `initialization` we do not account for target's transformation matrix\n        center: bboxCenter,\n        // TODO: investigate if this is still necessary\n        relativeCorrection: new Point(0, 0),\n        size: actualSize,\n      };\n    } else {\n      //  we send `relativeCenter` up to group's containing plane\n      const center = bboxCenter.transform(target.calcOwnMatrix());\n      return {\n        center,\n        size: bboxSize,\n      };\n    }\n  }\n}\n","import type { StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to fit target's objects.\n */\nexport class FitContentLayout extends LayoutStrategy {\n  static readonly type = 'fit-content';\n\n  /**\n   * @override layout on all triggers\n   * Override at will\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldPerformLayout(context: StrictLayoutContext) {\n    return true;\n  }\n}\n\nclassRegistry.setClass(FitContentLayout);\n","import { Point } from '../Point';\nimport {\n  CENTER,\n  CHANGED,\n  MODIFIED,\n  MODIFY_PATH,\n  MODIFY_POLY,\n  MOVING,\n  RESIZING,\n  ROTATING,\n  SCALING,\n  SKEWING,\n  iMatrix,\n} from '../constants';\nimport type { Group } from '../shapes/Group';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { invertTransform } from '../util/misc/matrix';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { FitContentLayout } from './LayoutStrategies/FitContentLayout';\nimport type { LayoutStrategy } from './LayoutStrategies/LayoutStrategy';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_OBJECT_MODIFIED,\n  LAYOUT_TYPE_OBJECT_MODIFYING,\n} from './constants';\nimport type {\n  LayoutContext,\n  LayoutResult,\n  RegistrationContext,\n  StrictLayoutContext,\n} from './types';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TModificationEvents } from '../EventTypeDefs';\n\nconst LAYOUT_MANAGER = 'layoutManager';\n\nexport type SerializedLayoutManager = {\n  type: string;\n  strategy: string;\n};\n\nexport class LayoutManager {\n  private declare _prevLayoutStrategy?: LayoutStrategy;\n  protected declare _subscriptions: Map<FabricObject, VoidFunction[]>;\n\n  strategy: LayoutStrategy;\n\n  constructor(strategy: LayoutStrategy = new FitContentLayout()) {\n    this.strategy = strategy;\n    this._subscriptions = new Map();\n  }\n\n  public performLayout(context: LayoutContext) {\n    const strictContext: StrictLayoutContext = {\n      bubbles: true,\n      strategy: this.strategy,\n      ...context,\n      prevStrategy: this._prevLayoutStrategy,\n      stopPropagation() {\n        this.bubbles = false;\n      },\n    };\n\n    this.onBeforeLayout(strictContext);\n\n    const layoutResult = this.getLayoutResult(strictContext);\n    if (layoutResult) {\n      this.commitLayout(strictContext, layoutResult);\n    }\n\n    this.onAfterLayout(strictContext, layoutResult);\n    this._prevLayoutStrategy = strictContext.strategy;\n  }\n\n  /**\n   * Attach handlers for events that we know will invalidate the layout when\n   * performed on child objects ( general transforms ).\n   * Returns the disposers for later unsubscribing and cleanup\n   * @param {FabricObject} object\n   * @param {RegistrationContext & Partial<StrictLayoutContext>} context\n   * @returns {VoidFunction[]} disposers remove the handlers\n   */\n  protected attachHandlers(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): VoidFunction[] {\n    const { target } = context;\n    return (\n      [\n        MODIFIED,\n        MOVING,\n        RESIZING,\n        ROTATING,\n        SCALING,\n        SKEWING,\n        CHANGED,\n        MODIFY_POLY,\n        MODIFY_PATH,\n      ] as (TModificationEvents & 'modified')[]\n    ).map((key) =>\n      object.on(key, (e) =>\n        this.performLayout(\n          key === MODIFIED\n            ? {\n                type: LAYOUT_TYPE_OBJECT_MODIFIED,\n                trigger: key,\n                e,\n                target,\n              }\n            : {\n                type: LAYOUT_TYPE_OBJECT_MODIFYING,\n                trigger: key,\n                e,\n                target,\n              },\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Subscribe an object to transform events that will trigger a layout change on the parent\n   * This is important only for interactive groups.\n   * @param object\n   * @param context\n   */\n  protected subscribe(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    this.unsubscribe(object, context);\n    const disposers = this.attachHandlers(object, context);\n    this._subscriptions.set(object, disposers);\n  }\n\n  /**\n   * unsubscribe object layout triggers\n   */\n  protected unsubscribe(\n    object: FabricObject,\n    _context?: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    (this._subscriptions.get(object) || []).forEach((d) => d());\n    this._subscriptions.delete(object);\n  }\n\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.unsubscribe(object, context));\n  }\n\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.subscribe(object, context));\n  }\n\n  protected onBeforeLayout(context: StrictLayoutContext) {\n    const { target, type } = context;\n    const { canvas } = target;\n    // handle layout triggers subscription\n    // @TODO: gate the registration when the group is interactive\n    if (type === LAYOUT_TYPE_INITIALIZATION || type === LAYOUT_TYPE_ADDED) {\n      this.subscribeTargets(context);\n    } else if (type === LAYOUT_TYPE_REMOVED) {\n      this.unsubscribeTargets(context);\n    }\n    // fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:before', {\n      context,\n    });\n    canvas &&\n      canvas.fire('object:layout:before', {\n        target,\n        context,\n      });\n\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.deep) {\n      const { strategy: _, ...tricklingContext } = context;\n      // traverse the tree\n      target.forEachObject(\n        (object) =>\n          (object as Group).layoutManager &&\n          (object as Group).layoutManager.performLayout({\n            ...tricklingContext,\n            bubbles: false,\n            target: object as Group,\n          }),\n      );\n    }\n  }\n\n  protected getLayoutResult(\n    context: StrictLayoutContext,\n  ): Required<LayoutResult> | undefined {\n    const { target, strategy, type } = context;\n\n    const result = strategy.calcLayoutResult(context, target.getObjects());\n\n    if (!result) {\n      return;\n    }\n\n    const prevCenter =\n      type === LAYOUT_TYPE_INITIALIZATION\n        ? new Point()\n        : target.getRelativeCenterPoint();\n\n    const {\n      center: nextCenter,\n      correction = new Point(),\n      relativeCorrection = new Point(),\n    } = result;\n    const offset = prevCenter\n      .subtract(nextCenter)\n      .add(correction)\n      .transform(\n        // in `initialization` we do not account for target's transformation matrix\n        type === LAYOUT_TYPE_INITIALIZATION\n          ? iMatrix\n          : invertTransform(target.calcOwnMatrix()),\n        true,\n      )\n      .add(relativeCorrection);\n\n    return {\n      result,\n      prevCenter,\n      nextCenter,\n      offset,\n    };\n  }\n\n  protected commitLayout(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    const {\n      result: { size },\n      nextCenter,\n    } = layoutResult;\n    // set dimensions\n    target.set({ width: size.x, height: size.y });\n    // layout descendants\n    this.layoutObjects(context, layoutResult);\n    //  set position\n    // in `initialization` we do not account for target's transformation matrix\n    if (context.type === LAYOUT_TYPE_INITIALIZATION) {\n      // TODO: what about strokeWidth?\n      target.set({\n        left:\n          context.x ?? nextCenter.x + size.x * resolveOrigin(target.originX),\n        top: context.y ?? nextCenter.y + size.y * resolveOrigin(target.originY),\n      });\n    } else {\n      target.setPositionByOrigin(nextCenter, CENTER, CENTER);\n      // invalidate\n      target.setCoords();\n      target.set('dirty', true);\n    }\n  }\n\n  protected layoutObjects(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    //  adjust objects to account for new center\n    target.forEachObject((object) => {\n      object.group === target &&\n        this.layoutObject(context, layoutResult, object);\n    });\n    // adjust clip path to account for new center\n    context.strategy.shouldLayoutClipPath(context) &&\n      this.layoutObject(context, layoutResult, target.clipPath as FabricObject);\n  }\n\n  /**\n   * @param {FabricObject} object\n   * @param {Point} offset\n   */\n  protected layoutObject(\n    context: StrictLayoutContext,\n    { offset }: Required<LayoutResult>,\n    object: FabricObject,\n  ) {\n    // TODO: this is here for cache invalidation.\n    // verify if this is necessary since we have explicit\n    // cache invalidation at the end of commitLayout\n    object.set({\n      left: object.left + offset.x,\n      top: object.top + offset.y,\n    });\n  }\n\n  protected onAfterLayout(\n    context: StrictLayoutContext,\n    layoutResult?: LayoutResult,\n  ) {\n    const {\n      target,\n      strategy,\n      bubbles,\n      prevStrategy: _,\n      ...bubblingContext\n    } = context;\n    const { canvas } = target;\n\n    //  fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:after', {\n      context,\n      result: layoutResult,\n    });\n    canvas &&\n      canvas.fire('object:layout:after', {\n        context,\n        result: layoutResult,\n        target,\n      });\n\n    //  bubble\n    const parent = target.parent;\n    if (bubbles && parent?.layoutManager) {\n      //  add target to context#path\n      (bubblingContext.path || (bubblingContext.path = [])).push(target);\n      //  all parents should invalidate their layout\n      parent.layoutManager.performLayout({\n        ...bubblingContext,\n        target: parent,\n      });\n    }\n    target.set('dirty', true);\n  }\n\n  dispose() {\n    const { _subscriptions } = this;\n    _subscriptions.forEach((disposers) => disposers.forEach((d) => d()));\n    _subscriptions.clear();\n  }\n\n  toObject() {\n    return {\n      type: LAYOUT_MANAGER,\n      strategy: (this.strategy.constructor as typeof LayoutStrategy).type,\n    };\n  }\n\n  toJSON() {\n    return this.toObject();\n  }\n}\n\nclassRegistry.setClass(LayoutManager, LAYOUT_MANAGER);\n","import type { CollectionEvents, ObjectEvents } from '../EventTypeDefs';\nimport { createCollectionMixin } from '../Collection';\nimport type {\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n  Abortable,\n} from '../typedefs';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n} from '../util/misc/matrix';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { applyTransformToObject } from '../util/misc/objectTransforms';\nimport { FabricObject } from './Object/FabricObject';\nimport { Rect } from './Rect';\nimport { classRegistry } from '../ClassRegistry';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport { log } from '../util/internals/console';\nimport type {\n  ImperativeLayoutOptions,\n  LayoutBeforeEvent,\n  LayoutAfterEvent,\n} from '../LayoutManager/types';\nimport { LayoutManager } from '../LayoutManager/LayoutManager';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { SerializedLayoutManager } from '../LayoutManager/LayoutManager';\nimport type { FitContentLayout } from '../LayoutManager';\nimport type { DrawContext } from './Object/Object';\n\n/**\n * This class handles the specific case of creating a group using {@link Group#fromObject} and is not meant to be used in any other case.\n * We could have used a boolean in the constructor, as we did previously, but we think the boolean\n * would stay in the group's constructor interface and create confusion, therefore it was removed.\n * This layout manager doesn't do anything and therefore keeps the exact layout the group had when {@link Group#toObject} was called.\n */\nclass NoopLayoutManager extends LayoutManager {\n  performLayout() {}\n}\n\nexport interface GroupEvents extends ObjectEvents, CollectionEvents {\n  'layout:before': LayoutBeforeEvent;\n  'layout:after': LayoutAfterEvent;\n}\n\nexport interface GroupOwnProps {\n  subTargetCheck: boolean;\n  interactive: boolean;\n}\n\nexport interface SerializedGroupProps\n  extends SerializedObjectProps,\n    GroupOwnProps {\n  objects: SerializedObjectProps[];\n  layoutManager: SerializedLayoutManager;\n}\n\nexport interface GroupProps extends FabricObjectProps, GroupOwnProps {\n  layoutManager: LayoutManager;\n}\n\nexport const groupDefaultValues: Partial<TClassProperties<Group>> = {\n  strokeWidth: 0,\n  subTargetCheck: false,\n  interactive: false,\n};\n\n/**\n * @fires object:added\n * @fires object:removed\n * @fires layout:before\n * @fires layout:after\n */\nexport class Group\n  extends createCollectionMixin(\n    FabricObject<GroupProps, SerializedGroupProps, GroupEvents>,\n  )\n  implements GroupProps\n{\n  /**\n   * Used to optimize performance\n   * set to `false` if you don't need contained objects to be targets of events\n   * @default\n   * @type boolean\n   */\n  declare subTargetCheck: boolean;\n\n  /**\n   * Used to allow targeting of object inside groups.\n   * set to true if you want to select an object inside a group.\\\n   * **REQUIRES** `subTargetCheck` set to true\n   * This will be not removed but slowly replaced with a method setInteractive\n   * that will take care of enabling subTargetCheck and necessary object events.\n   * There is too much attached to group interactivity to just be evaluated by a\n   * boolean in the code\n   * @default\n   * @deprecated\n   * @type boolean\n   */\n  declare interactive: boolean;\n\n  declare layoutManager: LayoutManager;\n\n  /**\n   * Used internally to optimize performance\n   * Once an object is selected, instance is rendered without the selected object.\n   * This way instance is cached only once for the entire interaction with the selected object.\n   * @private\n   */\n  protected _activeObjects: FabricObject[] = [];\n\n  static type = 'Group';\n\n  static ownDefaults: Record<string, any> = groupDefaultValues;\n  private __objectSelectionTracker: (ev: ObjectEvents['selected']) => void;\n  private __objectSelectionDisposer: (ev: ObjectEvents['deselected']) => void;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Group.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {FabricObject[]} [objects] instance objects\n   * @param {Object} [options] Options object\n   */\n  constructor(objects: FabricObject[] = [], options: Partial<GroupProps> = {}) {\n    super();\n    Object.assign(this, Group.ownDefaults);\n    this.setOptions(options);\n    this.groupInit(objects, options);\n  }\n\n  /**\n   * Shared code between group and active selection\n   * Meant to be used by the constructor.\n   */\n  protected groupInit(\n    objects: FabricObject[],\n    options: {\n      layoutManager?: LayoutManager;\n      top?: number;\n      left?: number;\n    },\n  ) {\n    this._objects = [...objects]; // Avoid unwanted mutations of Collection to affect the caller\n\n    this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(\n      this,\n      true,\n    );\n    this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(\n      this,\n      false,\n    );\n\n    this.forEachObject((object) => {\n      this.enterGroup(object, false);\n    });\n\n    // perform initial layout\n    this.layoutManager = options.layoutManager ?? new LayoutManager();\n    this.layoutManager.performLayout({\n      type: LAYOUT_TYPE_INITIALIZATION,\n      target: this,\n      targets: [...objects],\n      // @TODO remove this concept from the layout manager.\n      // Layout manager will calculate the correct position,\n      // group options can override it later.\n      x: options.left,\n      y: options.top,\n    });\n  }\n\n  /**\n   * Checks if object can enter group and logs relevant warnings\n   * @private\n   * @param {FabricObject} object\n   * @returns\n   */\n  canEnterGroup(object: FabricObject) {\n    if (object === this || this.isDescendantOf(object)) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'Group: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    } else if (this._objects.indexOf(object) !== -1) {\n      // is already in the objects array\n      log(\n        'error',\n        'Group: duplicate objects are not supported inside group, this call has no effect',\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Override this method to enhance performance (for groups with a lot of objects).\n   * If Overriding, be sure not pass illegal objects to group - it will break your app.\n   * @private\n   */\n  protected _filterObjectsBeforeEnteringGroup(objects: FabricObject[]) {\n    return objects.filter((object, index, array) => {\n      // can enter AND is the first occurrence of the object in the passed args (to prevent adding duplicates)\n      return this.canEnterGroup(object) && array.indexOf(object) === index;\n    });\n  }\n\n  /**\n   * Add objects\n   * @param {...FabricObject[]} objects\n   */\n  add(...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.add(...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Inserts an object into collection at specified index\n   * @param {FabricObject[]} objects Object to insert\n   * @param {Number} index Index to insert object at\n   */\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.insertAt(index, ...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Remove objects\n   * @param {...FabricObject[]} objects\n   * @returns {FabricObject[]} removed objects\n   */\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_REMOVED, removed);\n    return removed;\n  }\n\n  _onObjectAdded(object: FabricObject) {\n    this.enterGroup(object, true);\n    this.fire('object:added', { target: object });\n    object.fire('added', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _onObjectRemoved(object: FabricObject, removeParentTransform?: boolean) {\n    this.exitGroup(object, removeParentTransform);\n    this.fire('object:removed', { target: object });\n    object.fire('removed', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    this.layoutManager.performLayout({\n      type,\n      targets,\n      target: this,\n    });\n  }\n\n  _onStackOrderChanged() {\n    this._set('dirty', true);\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    const prev = this[key as keyof this];\n    super._set(key, value);\n    if (key === 'canvas' && prev !== value) {\n      (this._objects || []).forEach((object) => {\n        object._set(key, value);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return this.subTargetCheck;\n  }\n\n  /**\n   * Remove all objects\n   * @returns {FabricObject[]} removed objects\n   */\n  removeAll() {\n    this._activeObjects = [];\n    return this.remove(...this._objects);\n  }\n\n  /**\n   * keeps track of the selected objects\n   * @private\n   */\n  __objectSelectionMonitor<T extends boolean>(\n    selected: T,\n    {\n      target: object,\n    }: ObjectEvents[T extends true ? 'selected' : 'deselected'],\n  ) {\n    const activeObjects = this._activeObjects;\n    if (selected) {\n      activeObjects.push(object);\n      this._set('dirty', true);\n    } else if (activeObjects.length > 0) {\n      const index = activeObjects.indexOf(object);\n      if (index > -1) {\n        activeObjects.splice(index, 1);\n        this._set('dirty', true);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {boolean} watch\n   * @param {FabricObject} object\n   */\n  _watchObject(watch: boolean, object: FabricObject) {\n    //  make sure we listen only once\n    watch && this._watchObject(false, object);\n    if (watch) {\n      object.on('selected', this.__objectSelectionTracker);\n      object.on('deselected', this.__objectSelectionDisposer);\n    } else {\n      object.off('selected', this.__objectSelectionTracker);\n      object.off('deselected', this.__objectSelectionDisposer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object.group && object.group.remove(object);\n    object._set('parent', this);\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  _enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    if (removeParentTransform) {\n      // can this be converted to utils (sendObjectToPlane)?\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          invertTransform(this.calcTransformMatrix()),\n          object.calcTransformMatrix(),\n        ),\n      );\n    }\n    this._shouldSetNestedCoords() && object.setCoords();\n    object._set('group', this);\n    object._set('canvas', this.canvas);\n    this._watchObject(true, object);\n    const activeObject =\n      this.canvas &&\n      this.canvas.getActiveObject &&\n      this.canvas.getActiveObject();\n    // if we are adding the activeObject in a group\n    if (\n      activeObject &&\n      (activeObject === object || object.isDescendantOf(activeObject))\n    ) {\n      this._activeObjects.push(object);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    object._set('parent', undefined);\n    object._set('canvas', undefined);\n  }\n\n  /**\n   * Executes the inner fabric logic of exiting a group.\n   * - Stop watching the object\n   * - Remove the object from the optimization map this._activeObjects\n   * - unset the group property of the object\n   * @protected\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object._set('group', undefined);\n    if (!removeParentTransform) {\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          this.calcTransformMatrix(),\n          object.calcTransformMatrix(),\n        ),\n      );\n      object.setCoords();\n    }\n    this._watchObject(false, object);\n    const index =\n      this._activeObjects.length > 0 ? this._activeObjects.indexOf(object) : -1;\n    if (index > -1) {\n      this._activeObjects.splice(index, 1);\n    }\n  }\n\n  /**\n   * Decide if the group should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group is already cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    const ownCache = FabricObject.prototype.shouldCache.call(this);\n    if (ownCache) {\n      for (let i = 0; i < this._objects.length; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          this.ownCaching = false;\n          return false;\n        }\n      }\n    }\n    return ownCache;\n  }\n\n  /**\n   * Check if this object or a child object will cast a shadow\n   * @return {Boolean}\n   */\n  willDrawShadow() {\n    if (super.willDrawShadow()) {\n      return true;\n    }\n    for (let i = 0; i < this._objects.length; i++) {\n      if (this._objects[i].willDrawShadow()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if instance or its group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache(): boolean {\n    return this.ownCaching || (!!this.parent && this.parent.isOnACache());\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    this._renderBackground(ctx);\n    for (let i = 0; i < this._objects.length; i++) {\n      const obj = this._objects[i];\n      // TODO: handle rendering edge case somehow\n      if (this.canvas?.preserveObjectStacking && obj.group !== this) {\n        ctx.save();\n        ctx.transform(...invertTransform(this.calcTransformMatrix()));\n        obj.render(ctx);\n        ctx.restore();\n      } else if (obj.group === this) {\n        obj.render(ctx);\n      }\n    }\n    this._drawClipPath(ctx, this.clipPath, context);\n  }\n\n  /**\n   * @override\n   * @return {Boolean}\n   */\n  setCoords() {\n    super.setCoords();\n    this._shouldSetNestedCoords() &&\n      this.forEachObject((object) => object.setCoords());\n  }\n\n  triggerLayout(options: ImperativeLayoutOptions = {}) {\n    this.layoutManager.performLayout({\n      target: this,\n      type: LAYOUT_TYPE_IMPERATIVE,\n      ...options,\n    });\n  }\n\n  /**\n   * Renders instance on a given context\n   * @param {CanvasRenderingContext2D} ctx context to render instance on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    this._transformDone = true;\n    super.render(ctx);\n    this._transformDone = false;\n  }\n\n  /**\n   *\n   * @private\n   * @param {'toObject'|'toDatalessObject'} [method]\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {FabricObject[]} serialized objects\n   */\n  __serializeObjects(\n    method: 'toObject' | 'toDatalessObject',\n    propertiesToInclude?: string[],\n  ) {\n    const _includeDefaultValues = this.includeDefaultValues;\n    return this._objects\n      .filter(function (obj) {\n        return !obj.excludeFromExport;\n      })\n      .map(function (obj) {\n        const originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        const data = obj[method || 'toObject'](propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        // delete data.version;\n        return data;\n      });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<\n      GroupProps & TClassProperties<this>,\n      keyof SerializedGroupProps\n    >,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SerializedGroupProps {\n    const layoutManager = this.layoutManager.toObject();\n\n    return {\n      ...super.toObject([\n        'subTargetCheck',\n        'interactive',\n        ...propertiesToInclude,\n      ]),\n      ...(layoutManager.strategy !== 'fit-content' || this.includeDefaultValues\n        ? { layoutManager }\n        : {}),\n      objects: this.__serializeObjects(\n        'toObject',\n        propertiesToInclude as string[],\n      ),\n    };\n  }\n\n  toString() {\n    return `#<Group: (${this.complexity()})>`;\n  }\n\n  dispose() {\n    this.layoutManager.unsubscribeTargets({\n      targets: this.getObjects(),\n      target: this,\n    });\n    this._activeObjects = [];\n    this.forEachObject((object) => {\n      this._watchObject(false, object);\n      object.dispose();\n    });\n    super.dispose();\n  }\n\n  /**\n   * @private\n   */\n  _createSVGBgRect(reviver?: TSVGReviver) {\n    if (!this.backgroundColor) {\n      return '';\n    }\n    const fillStroke = Rect.prototype._toSVG.call(this);\n    const commons = fillStroke.indexOf('COMMON_PARTS');\n    fillStroke[commons] = 'for=\"group\" ';\n    const markup = fillStroke.join('');\n    return reviver ? reviver(markup) : markup;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  _toSVG(reviver?: TSVGReviver) {\n    const svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\n    }\n    svgString.push('</g>\\n');\n    return svgString;\n  }\n\n  /**\n   * Returns styles-string for svg-export, specific version for group\n   * @return {String}\n   */\n  getSvgStyles(): string {\n    const opacity =\n        typeof this.opacity !== 'undefined' && this.opacity !== 1\n          ? `opacity: ${this.opacity};`\n          : '',\n      visibility = this.visible ? '' : ' visibility: hidden;';\n    return [opacity, this.getSvgFilter(), visibility].join('');\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const svgString = [];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n    }\n    return this._createBaseClipPathSVGMarkup(svgString, {\n      reviver,\n    });\n  }\n\n  /**\n   * @todo support loading from svg\n   * @private\n   * @static\n   * @memberOf Group\n   * @param {Object} object Object to create a group from\n   * @returns {Promise<Group>}\n   */\n  static fromObject<T extends TOptions<SerializedGroupProps>>(\n    { type, objects = [], layoutManager, ...options }: T,\n    abortable?: Abortable,\n  ) {\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, abortable),\n      enlivenObjectEnlivables(options, abortable),\n    ]).then(([objects, hydratedOptions]) => {\n      const group = new this(objects, {\n        ...options,\n        ...hydratedOptions,\n        layoutManager: new NoopLayoutManager(),\n      });\n      if (layoutManager) {\n        const layoutClass = classRegistry.getClass<typeof LayoutManager>(\n          layoutManager.type,\n        );\n        const strategyClass = classRegistry.getClass<typeof FitContentLayout>(\n          layoutManager.strategy,\n        );\n        group.layoutManager = new layoutClass(new strategyClass());\n      } else {\n        group.layoutManager = new LayoutManager();\n      }\n      group.layoutManager.subscribeTargets({\n        type: LAYOUT_TYPE_INITIALIZATION,\n        target: group,\n        targets: group.getObjects(),\n      });\n      group.setCoords();\n      return group;\n    });\n  }\n}\n\nclassRegistry.setClass(Group);\n","import type { GroupProps } from '../../shapes/Group';\nimport { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\n\n/**\n * TODO experiment with different layout manager and svg results ( fixed fit content )\n * Groups SVG elements (usually those retrieved from SVG document)\n * @static\n * @param {FabricObject[]} elements FabricObject(s) parsed from svg, to group\n * @return {FabricObject | Group}\n */\nexport const groupSVGElements = (\n  elements: FabricObject[],\n  options?: Partial<GroupProps>,\n) => {\n  if (elements && elements.length === 1) {\n    return elements[0];\n  }\n  return new Group(elements, options);\n};\n","import type { TSize } from '../../typedefs';\n\n/**\n * Finds the scale for the object source to fit inside the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to fit into destination\n */\nexport const findScaleToFit = (source: TSize, destination: TSize) =>\n  Math.min(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n\n/**\n * Finds the scale for the object source to cover entirely the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to cover destination\n */\nexport const findScaleToCover = (source: TSize, destination: TSize) =>\n  Math.max(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n","import { reNum } from '../../parser/constants';\n\nconst commaWsp = `\\\\s*,?\\\\s*`;\n\n/**\n * p for param\n * using \"bad naming\" here because it makes the regex much easier to read\n * p is a number that is preceded by an arbitary number of spaces, maybe 0,\n * a comma or not, and then possibly more spaces or not.\n */\nconst p = `${commaWsp}(${reNum})`;\n\n// const reMoveToCommand = `(M) ?(?:${p}${p} ?)+`;\n\n// const reLineCommand = `(L) ?(?:${p}${p} ?)+`;\n\n// const reHorizontalLineCommand = `(H) ?(?:${p} ?)+`;\n\n// const reVerticalLineCommand = `(V) ?(?:${p} ?)+`;\n\n// const reClosePathCommand = String.raw`(Z)\\s*`;\n\n// const reCubicCurveCommand = `(C) ?(?:${p}${p}${p}${p}${p}${p} ?)+`;\n\n// const reCubicCurveShortcutCommand = `(S) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveCommand = `(Q) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveShortcutCommand = `(T) ?(?:${p}${p} ?)+`;\n\nexport const reArcCommandPoints = `${p}${p}${p}${commaWsp}([01])${commaWsp}([01])${p}${p}`;\n// const reArcCommand = `(A) ?(?:${reArcCommandPoints} ?)+`;\n\n// export const rePathCommandGroups =\n//   `(?:(?:${reMoveToCommand})` +\n//   `|(?:${reLineCommand})` +\n//   `|(?:${reHorizontalLineCommand})` +\n//   `|(?:${reVerticalLineCommand})` +\n//   `|(?:${reClosePathCommand})` +\n//   `|(?:${reCubicCurveCommand})` +\n//   `|(?:${reCubicCurveShortcutCommand})` +\n//   `|(?:${reQuadraticCurveCommand})` +\n//   `|(?:${reQuadraticCurveShortcutCommand})` +\n//   `|(?:${reArcCommand}))`;\n\nexport const rePathCommand = '[mzlhvcsqta][^mzlhvcsqta]*';\n","import { cache } from '../../cache';\nimport { config } from '../../config';\nimport { halfPI, PiBy180 } from '../../constants';\nimport type { TMat2D, TRadian, TRectBounds } from '../../typedefs';\nimport { cos } from '../misc/cos';\nimport { multiplyTransformMatrices, transformPoint } from '../misc/matrix';\nimport { sin } from '../misc/sin';\nimport { toFixed } from '../misc/toFixed';\nimport type {\n  TCurveInfo,\n  TComplexPathData,\n  TParsedAbsoluteCubicCurveCommand,\n  TPathSegmentInfo,\n  TPointAngle,\n  TSimpleParsedCommand,\n  TSimplePathData,\n  TPathSegmentCommandInfo,\n  TComplexParsedCommand,\n  TPathSegmentInfoCommon,\n  TEndPathInfo,\n  TParsedArcCommand,\n  TComplexParsedCommandType,\n} from './typedefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { reArcCommandPoints, rePathCommand } from './regex';\nimport { reNum } from '../../parser/constants';\n\n/**\n * Commands that may be repeated\n */\nconst repeatedCommands: Record<string, 'l' | 'L'> = {\n  m: 'l',\n  M: 'L',\n};\n\n/**\n * Convert an arc of a rotated ellipse to a Bezier Curve\n * @param {TRadian} theta1 start of the arc\n * @param {TRadian} theta2 end of the arc\n * @param cosTh cosine of the angle of rotation\n * @param sinTh sine of the angle of rotation\n * @param rx x-axis radius (before rotation)\n * @param ry y-axis radius (before rotation)\n * @param cx1 center x of the ellipse\n * @param cy1 center y of the ellipse\n * @param mT\n * @param fromX starting point of arc x\n * @param fromY starting point of arc y\n */\nconst segmentToBezier = (\n  theta1: TRadian,\n  theta2: TRadian,\n  cosTh: number,\n  sinTh: number,\n  rx: number,\n  ry: number,\n  cx1: number,\n  cy1: number,\n  mT: number,\n  fromX: number,\n  fromY: number,\n): TParsedAbsoluteCubicCurveCommand => {\n  const costh1 = cos(theta1),\n    sinth1 = sin(theta1),\n    costh2 = cos(theta2),\n    sinth2 = sin(theta2),\n    toX = cosTh * rx * costh2 - sinTh * ry * sinth2 + cx1,\n    toY = sinTh * rx * costh2 + cosTh * ry * sinth2 + cy1,\n    cp1X = fromX + mT * (-cosTh * rx * sinth1 - sinTh * ry * costh1),\n    cp1Y = fromY + mT * (-sinTh * rx * sinth1 + cosTh * ry * costh1),\n    cp2X = toX + mT * (cosTh * rx * sinth2 + sinTh * ry * costh2),\n    cp2Y = toY + mT * (sinTh * rx * sinth2 - cosTh * ry * costh2);\n\n  return ['C', cp1X, cp1Y, cp2X, cp2Y, toX, toY];\n};\n\n/**\n * Adapted from {@link http://dxr.mozilla.org/mozilla-central/source/dom/svg/SVGPathDataParser.cpp}\n * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n * http://mozilla.org/MPL/2.0/\n * @param toX\n * @param toY\n * @param rx\n * @param ry\n * @param {number} large 0 or 1 flag\n * @param {number} sweep 0 or 1 flag\n * @param rotateX\n */\nconst arcToSegments = (\n  toX: number,\n  toY: number,\n  rx: number,\n  ry: number,\n  large: number,\n  sweep: number,\n  rotateX: TRadian,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n  let fromX = 0,\n    fromY = 0,\n    root = 0;\n  const PI = Math.PI,\n    theta = rotateX * PiBy180,\n    sinTheta = sin(theta),\n    cosTh = cos(theta),\n    px = 0.5 * (-cosTh * toX - sinTheta * toY),\n    py = 0.5 * (-cosTh * toY + sinTheta * toX),\n    rx2 = rx ** 2,\n    ry2 = ry ** 2,\n    py2 = py ** 2,\n    px2 = px ** 2,\n    pl = rx2 * ry2 - rx2 * py2 - ry2 * px2;\n  let _rx = Math.abs(rx);\n  let _ry = Math.abs(ry);\n\n  if (pl < 0) {\n    const s = Math.sqrt(1 - pl / (rx2 * ry2));\n    _rx *= s;\n    _ry *= s;\n  } else {\n    root =\n      (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n  }\n\n  const cx = (root * _rx * py) / _ry,\n    cy = (-root * _ry * px) / _rx,\n    cx1 = cosTh * cx - sinTheta * cy + toX * 0.5,\n    cy1 = sinTheta * cx + cosTh * cy + toY * 0.5;\n  let mTheta = calcVectorAngle(1, 0, (px - cx) / _rx, (py - cy) / _ry);\n  let dtheta = calcVectorAngle(\n    (px - cx) / _rx,\n    (py - cy) / _ry,\n    (-px - cx) / _rx,\n    (-py - cy) / _ry,\n  );\n\n  if (sweep === 0 && dtheta > 0) {\n    dtheta -= 2 * PI;\n  } else if (sweep === 1 && dtheta < 0) {\n    dtheta += 2 * PI;\n  }\n\n  // Convert into cubic bezier segments <= 90deg\n  const segments = Math.ceil(Math.abs((dtheta / PI) * 2)),\n    result = [],\n    mDelta = dtheta / segments,\n    mT =\n      ((8 / 3) * Math.sin(mDelta / 4) * Math.sin(mDelta / 4)) /\n      Math.sin(mDelta / 2);\n  let th3 = mTheta + mDelta;\n\n  for (let i = 0; i < segments; i++) {\n    result[i] = segmentToBezier(\n      mTheta,\n      th3,\n      cosTh,\n      sinTheta,\n      _rx,\n      _ry,\n      cx1,\n      cy1,\n      mT,\n      fromX,\n      fromY,\n    );\n    fromX = result[i][5];\n    fromY = result[i][6];\n    mTheta = th3;\n    th3 += mDelta;\n  }\n  return result;\n};\n\n/**\n * @private\n * Calculate the angle between two vectors\n * @param ux u endpoint x\n * @param uy u endpoint y\n * @param vx v endpoint x\n * @param vy v endpoint y\n */\nconst calcVectorAngle = (\n  ux: number,\n  uy: number,\n  vx: number,\n  vy: number,\n): TRadian => {\n  const ta = Math.atan2(uy, ux),\n    tb = Math.atan2(vy, vx);\n  if (tb >= ta) {\n    return tb - ta;\n  } else {\n    return 2 * Math.PI - (ta - tb);\n  }\n};\n\n// functions for the Cubic beizer\n// taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\nconst CB1 = (t: number) => t ** 3;\nconst CB2 = (t: number) => 3 * t ** 2 * (1 - t);\nconst CB3 = (t: number) => 3 * t * (1 - t) ** 2;\nconst CB4 = (t: number) => (1 - t) ** 3;\n\n/**\n * Calculate bounding box of a cubic Bezier curve\n * Taken from http://jsbin.com/ivomiq/56/edit (no credits available)\n * TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n * @param {number} begx starting point\n * @param {number} begy\n * @param {number} cp1x first control point\n * @param {number} cp1y\n * @param {number} cp2x second control point\n * @param {number} cp2y\n * @param {number} endx end of bezier\n * @param {number} endy\n * @return {TRectBounds} the rectangular bounds\n */\nexport function getBoundsOfCurve(\n  begx: number,\n  begy: number,\n  cp1x: number,\n  cp1y: number,\n  cp2x: number,\n  cp2y: number,\n  endx: number,\n  endy: number,\n): TRectBounds {\n  let argsString: string;\n  if (config.cachesBoundsOfCurve) {\n    // eslint-disable-next-line\n    argsString = [...arguments].join();\n    if (cache.boundsOfCurveCache[argsString]) {\n      return cache.boundsOfCurveCache[argsString];\n    }\n  }\n\n  const sqrt = Math.sqrt,\n    abs = Math.abs,\n    tvalues = [],\n    bounds: [[x: number, y: number], [x: number, y: number]] = [\n      [0, 0],\n      [0, 0],\n    ];\n\n  let b = 6 * begx - 12 * cp1x + 6 * cp2x;\n  let a = -3 * begx + 9 * cp1x - 9 * cp2x + 3 * endx;\n  let c = 3 * cp1x - 3 * begx;\n\n  for (let i = 0; i < 2; ++i) {\n    if (i > 0) {\n      b = 6 * begy - 12 * cp1y + 6 * cp2y;\n      a = -3 * begy + 9 * cp1y - 9 * cp2y + 3 * endy;\n      c = 3 * cp1y - 3 * begy;\n    }\n\n    if (abs(a) < 1e-12) {\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n      const t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    const b2ac = b * b - 4 * c * a;\n    if (b2ac < 0) {\n      continue;\n    }\n    const sqrtb2ac = sqrt(b2ac);\n    const t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    const t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  let j = tvalues.length;\n  const jlen = j;\n  const iterator = getPointOnCubicBezierIterator(\n    begx,\n    begy,\n    cp1x,\n    cp1y,\n    cp2x,\n    cp2y,\n    endx,\n    endy,\n  );\n  while (j--) {\n    const { x, y } = iterator(tvalues[j]);\n    bounds[0][j] = x;\n    bounds[1][j] = y;\n  }\n\n  bounds[0][jlen] = begx;\n  bounds[1][jlen] = begy;\n  bounds[0][jlen + 1] = endx;\n  bounds[1][jlen + 1] = endy;\n  const result: TRectBounds = [\n    new Point(Math.min(...bounds[0]), Math.min(...bounds[1])),\n    new Point(Math.max(...bounds[0]), Math.max(...bounds[1])),\n  ];\n  if (config.cachesBoundsOfCurve) {\n    cache.boundsOfCurveCache[argsString!] = result;\n  }\n  return result;\n}\n\n/**\n * Converts arc to a bunch of cubic Bezier curves\n * @param {number} fx starting point x\n * @param {number} fy starting point y\n * @param {TParsedArcCommand} coords Arc command\n */\nexport const fromArcToBeziers = (\n  fx: number,\n  fy: number,\n  [_, rx, ry, rot, large, sweep, tx, ty]: TParsedArcCommand,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  const segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n  for (let i = 0, len = segsNorm.length; i < len; i++) {\n    segsNorm[i][1] += fx;\n    segsNorm[i][2] += fy;\n    segsNorm[i][3] += fx;\n    segsNorm[i][4] += fy;\n    segsNorm[i][5] += fx;\n    segsNorm[i][6] += fy;\n  }\n  return segsNorm;\n};\n\n/**\n * This function takes a parsed SVG path and makes it simpler for fabricJS logic.\n * Simplification consist of:\n * - All commands converted to absolute (lowercase to uppercase)\n * - S converted to C\n * - T converted to Q\n * - A converted to C\n * @param {TComplexPathData} path the array of commands of a parsed SVG path for `Path`\n * @return {TSimplePathData} the simplified array of commands of a parsed SVG path for `Path`\n * TODO: figure out how to remove the type assertions in a nice way\n */\nexport const makePathSimpler = (path: TComplexPathData): TSimplePathData => {\n  // x and y represent the last point of the path, AKA the previous command point.\n  // we add them to each relative command to make it an absolute comment.\n  // we also swap the v V h H with L, because are easier to transform.\n  let x = 0,\n    y = 0;\n  // x1 and y1 represent the last point of the subpath. the subpath is started with\n  // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n  // the last x1 and y1.\n  let x1 = 0,\n    y1 = 0;\n  // previous will host the letter of the previous command, to handle S and T.\n  // controlX and controlY will host the previous reflected control point\n  const destinationPath: TSimplePathData = [];\n  let previous,\n    // placeholders\n    controlX = 0,\n    controlY = 0;\n  for (const parsedCommand of path) {\n    const current: TComplexParsedCommand = [...parsedCommand];\n    let converted: TSimpleParsedCommand | undefined;\n    switch (\n      current[0] // first letter\n    ) {\n      case 'l': // lineto, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'L':\n        x = current[1];\n        y = current[2];\n        converted = ['L', x, y];\n        break;\n      case 'h': // horizontal lineto, relative\n        current[1] += x;\n      // falls through\n      case 'H':\n        x = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'v': // vertical lineto, relative\n        current[1] += y;\n      // falls through\n      case 'V':\n        y = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'm': // moveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'M':\n        x = current[1];\n        y = current[2];\n        x1 = current[1];\n        y1 = current[2];\n        converted = ['M', x, y];\n        break;\n      case 'c': // bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n        current[5] += x;\n        current[6] += y;\n      // falls through\n      case 'C':\n        controlX = current[3];\n        controlY = current[4];\n        x = current[5];\n        y = current[6];\n        converted = ['C', current[1], current[2], controlX, controlY, x, y];\n        break;\n      case 's': // shorthand cubic bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'S':\n        // would be sScC but since we are swapping sSc for C, we check just that.\n        if (previous === 'C') {\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a C, c, S, or s,\n          // the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[3];\n        y = current[4];\n        converted = ['C', controlX, controlY, current[1], current[2], x, y];\n        // converted[3] and converted[4] are NOW the second control point.\n        // we keep it for the next reflection.\n        controlX = converted[3];\n        controlY = converted[4];\n        break;\n      case 'q': // quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'Q':\n        controlX = current[1];\n        controlY = current[2];\n        x = current[3];\n        y = current[4];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 't': // shorthand quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'T':\n        if (previous === 'Q') {\n          // calculate reflection of previous control point\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a Q, q, T or t,\n          // assume the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[1];\n        y = current[2];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 'a':\n        current[6] += x;\n        current[7] += y;\n      // falls through\n      case 'A':\n        fromArcToBeziers(x, y, current).forEach((b) => destinationPath.push(b));\n        x = current[6];\n        y = current[7];\n        break;\n      case 'z':\n      case 'Z':\n        x = x1;\n        y = y1;\n        converted = ['Z'];\n        break;\n      default:\n    }\n    if (converted) {\n      destinationPath.push(converted);\n      previous = converted[0];\n    } else {\n      previous = '';\n    }\n  }\n  return destinationPath;\n};\n\n// todo verify if we can just use the point class here\n/**\n * Calc length from point x1,y1 to x2,y2\n * @param {number} x1 starting point x\n * @param {number} y1 starting point y\n * @param {number} x2 starting point x\n * @param {number} y2 starting point y\n * @return {number} length of segment\n */\nconst calcLineLength = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n): number => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n/**\n * Get an iterator that takes a percentage and returns a point\n * @param {number} begx\n * @param {number} begy\n * @param {number} cp1x\n * @param {number} cp1y\n * @param {number} cp2x\n * @param {number} cp2y\n * @param {number} endx\n * @param {number} endy\n */\nconst getPointOnCubicBezierIterator =\n  (\n    begx: number,\n    begy: number,\n    cp1x: number,\n    cp1y: number,\n    cp2x: number,\n    cp2y: number,\n    endx: number,\n    endy: number,\n  ) =>\n  (pct: number) => {\n    const c1 = CB1(pct),\n      c2 = CB2(pct),\n      c3 = CB3(pct),\n      c4 = CB4(pct);\n    return new Point(\n      endx * c1 + cp2x * c2 + cp1x * c3 + begx * c4,\n      endy * c1 + cp2y * c2 + cp1y * c3 + begy * c4,\n    );\n  };\n\nconst QB1 = (t: number) => t ** 2;\nconst QB2 = (t: number) => 2 * t * (1 - t);\nconst QB3 = (t: number) => (1 - t) ** 2;\n\nconst getTangentCubicIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n    p4x: number,\n    p4y: number,\n  ) =>\n  (pct: number) => {\n    const qb1 = QB1(pct),\n      qb2 = QB2(pct),\n      qb3 = QB3(pct),\n      tangentX =\n        3 * (qb3 * (p2x - p1x) + qb2 * (p3x - p2x) + qb1 * (p4x - p3x)),\n      tangentY =\n        3 * (qb3 * (p2y - p1y) + qb2 * (p3y - p2y) + qb1 * (p4y - p3y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\nconst getPointOnQuadraticBezierIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const c1 = QB1(pct),\n      c2 = QB2(pct),\n      c3 = QB3(pct);\n    return new Point(\n      p3x * c1 + p2x * c2 + p1x * c3,\n      p3y * c1 + p2y * c2 + p1y * c3,\n    );\n  };\n\nconst getTangentQuadraticIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const invT = 1 - pct,\n      tangentX = 2 * (invT * (p2x - p1x) + pct * (p3x - p2x)),\n      tangentY = 2 * (invT * (p2y - p1y) + pct * (p3y - p2y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\n// this will run over a path segment (a cubic or quadratic segment) and approximate it\n// with 100 segments. This will good enough to calculate the length of the curve\nconst pathIterator = (\n  iterator: (pct: number) => Point,\n  x1: number,\n  y1: number,\n) => {\n  let tempP = new Point(x1, y1),\n    tmpLen = 0;\n  for (let perc = 1; perc <= 100; perc += 1) {\n    const p = iterator(perc / 100);\n    tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    tempP = p;\n  }\n  return tmpLen;\n};\n\n/**\n * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n * that correspond to that pixels run over the path.\n * The percentage will be then used to find the correct point on the canvas for the path.\n * @param {Array} segInfo fabricJS collection of information on a parsed path\n * @param {number} distance from starting point, in pixels.\n * @return {TPointAngle} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n */\nconst findPercentageForDistance = (\n  segInfo: TCurveInfo<'Q' | 'C'>,\n  distance: number,\n): TPointAngle => {\n  let perc = 0,\n    tmpLen = 0,\n    tempP: XY = { x: segInfo.x, y: segInfo.y },\n    p: XY = { ...tempP },\n    nextLen: number,\n    nextStep = 0.01,\n    lastPerc = 0;\n  // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n  // the path\n  const iterator = segInfo.iterator,\n    angleFinder = segInfo.angleFinder;\n  while (tmpLen < distance && nextStep > 0.0001) {\n    p = iterator(perc);\n    lastPerc = perc;\n    nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    // compare tmpLen each cycle with distance, decide next perc to test.\n    if (nextLen + tmpLen > distance) {\n      // we discard this step and we make smaller steps.\n      perc -= nextStep;\n      nextStep /= 2;\n    } else {\n      tempP = p;\n      perc += nextStep;\n      tmpLen += nextLen;\n    }\n  }\n  return { ...p, angle: angleFinder(lastPerc) };\n};\n\n/**\n * Run over a parsed and simplified path and extract some information (length of each command and starting point)\n * @param {TSimplePathData} path parsed path commands\n * @return {TPathSegmentInfo[]} path commands information\n */\nexport const getPathSegmentsInfo = (\n  path: TSimplePathData,\n): TPathSegmentInfo[] => {\n  let totalLength = 0,\n    //x2 and y2 are the coords of segment start\n    //x1 and y1 are the coords of the current point\n    x1 = 0,\n    y1 = 0,\n    x2 = 0,\n    y2 = 0,\n    iterator,\n    tempInfo: TPathSegmentInfo;\n  const info: TPathSegmentInfo[] = [];\n  for (const current of path) {\n    const basicInfo: TPathSegmentInfoCommon<keyof TPathSegmentCommandInfo> = {\n      x: x1,\n      y: y1,\n      command: current[0],\n      length: 0,\n    };\n    switch (\n      current[0] //first letter\n    ) {\n      case 'M':\n        tempInfo = <TPathSegmentInfoCommon<'M'>>basicInfo;\n        tempInfo.x = x2 = x1 = current[1];\n        tempInfo.y = y2 = y1 = current[2];\n        break;\n      case 'L':\n        tempInfo = <TPathSegmentInfoCommon<'L'>>basicInfo;\n        tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n        x1 = current[1];\n        y1 = current[2];\n        break;\n      case 'C':\n        iterator = getPointOnCubicBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo = <TCurveInfo<'C'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentCubicIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n\n        x1 = current[5];\n        y1 = current[6];\n        break;\n      case 'Q':\n        iterator = getPointOnQuadraticBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo = <TCurveInfo<'Q'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentQuadraticIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n        x1 = current[3];\n        y1 = current[4];\n        break;\n      case 'Z':\n        // we add those in order to ease calculations later\n        tempInfo = <TEndPathInfo>basicInfo;\n        tempInfo.destX = x2;\n        tempInfo.destY = y2;\n        tempInfo.length = calcLineLength(x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        break;\n    }\n    totalLength += tempInfo.length;\n    info.push(tempInfo);\n  }\n  info.push({ length: totalLength, x: x1, y: y1 });\n  return info;\n};\n\n/**\n * Get the point on the path that is distance along the path\n * @param path\n * @param distance\n * @param infos\n */\nexport const getPointOnPath = (\n  path: TSimplePathData,\n  distance: number,\n  infos: TPathSegmentInfo[] = getPathSegmentsInfo(path),\n): TPointAngle | undefined => {\n  let i = 0;\n  while (distance - infos[i].length > 0 && i < infos.length - 2) {\n    distance -= infos[i].length;\n    i++;\n  }\n  const segInfo = infos[i],\n    segPercent = distance / segInfo.length,\n    segment = path[i];\n\n  switch (segInfo.command) {\n    case 'M':\n      return { x: segInfo.x, y: segInfo.y, angle: 0 };\n    case 'Z':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segInfo.destX, segInfo.destY),\n          segPercent,\n        ),\n        angle: Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x),\n      };\n    case 'L':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segment[1]!, segment[2]!),\n          segPercent,\n        ),\n        angle: Math.atan2(segment[2]! - segInfo.y, segment[1]! - segInfo.x),\n      };\n    case 'C':\n      return findPercentageForDistance(segInfo, distance);\n    case 'Q':\n      return findPercentageForDistance(segInfo, distance);\n    default:\n    // throw Error('Invalid command');\n  }\n};\n\nconst rePathCmdAll = new RegExp(rePathCommand, 'gi');\nconst regExpArcCommandPoints = new RegExp(reArcCommandPoints, 'g');\nconst reMyNum = new RegExp(reNum, 'gi');\nconst commandLengths = {\n  m: 2,\n  l: 2,\n  h: 1,\n  v: 1,\n  c: 6,\n  s: 4,\n  q: 4,\n  t: 2,\n  a: 7,\n} as const;\n/**\n *\n * @param {string} pathString\n * @return {TComplexPathData} An array of SVG path commands\n * @example <caption>Usage</caption>\n * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n *   ['M', 3, 4],\n *   ['Q', 3, 5, 2, 1, 4, 0],\n *   ['Q', 9, 12, 2, 1, 4, 0],\n * ];\n */\nexport const parsePath = (pathString: string): TComplexPathData => {\n  const chain: TComplexPathData = [];\n  const all = pathString.match(rePathCmdAll) ?? [];\n  for (const matchStr of all) {\n    // take match string and save the first letter as the command\n    const commandLetter = matchStr[0] as TComplexParsedCommandType;\n    // in case of Z we have very little to do\n    if (commandLetter === 'z' || commandLetter === 'Z') {\n      chain.push([commandLetter]);\n      continue;\n    }\n    const commandLength =\n      commandLengths[\n        commandLetter.toLowerCase() as keyof typeof commandLengths\n      ];\n\n    let paramArr = [];\n    if (commandLetter === 'a' || commandLetter === 'A') {\n      // the arc command ha some peculariaties that requires a special regex other than numbers\n      // it is possible to avoid using a space between the sweep and large arc flags, making them either\n      // 00, 01, 10 or 11, making them identical to a plain number for the regex reMyNum\n      // reset the regexp\n      regExpArcCommandPoints.lastIndex = 0;\n      for (let out = null; (out = regExpArcCommandPoints.exec(matchStr)); ) {\n        paramArr.push(...out.slice(1));\n      }\n    } else {\n      paramArr = matchStr.match(reMyNum) || [];\n    }\n\n    // inspect the length of paramArr, if is longer than commandLength\n    // we are dealing with repeated commands\n    for (let i = 0; i < paramArr.length; i += commandLength) {\n      const newCommand = new Array(commandLength) as TComplexParsedCommand;\n      const transformedCommand = repeatedCommands[commandLetter];\n      newCommand[0] =\n        i > 0 && transformedCommand ? transformedCommand : commandLetter;\n      for (let j = 0; j < commandLength; j++) {\n        newCommand[j + 1] = parseFloat(paramArr[i + j]);\n      }\n      chain.push(newCommand);\n    }\n  }\n  return chain;\n};\n\n/**\n *\n * Converts points to a smooth SVG path\n * @param {XY[]} points Array of points\n * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n * @return {(string|number)[][]} An array of SVG path commands\n */\nexport const getSmoothPathFromPoints = (\n  points: Point[],\n  correction = 0,\n): TSimplePathData => {\n  let p1 = new Point(points[0]),\n    p2 = new Point(points[1]),\n    multSignX = 1,\n    multSignY = 0;\n  const path: TSimplePathData = [],\n    len = points.length,\n    manyPoints = len > 2;\n\n  if (manyPoints) {\n    multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n    multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n  }\n  path.push([\n    'M',\n    p1.x - multSignX * correction,\n    p1.y - multSignY * correction,\n  ]);\n  let i;\n  for (i = 1; i < len; i++) {\n    if (!p1.eq(p2)) {\n      const midPoint = p1.midPointFrom(p2);\n      // p1 is our bezier control point\n      // midpoint is our endpoint\n      // start point is p(i-1) value.\n      path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\n    }\n    p1 = points[i];\n    if (i + 1 < points.length) {\n      p2 = points[i + 1];\n    }\n  }\n  if (manyPoints) {\n    multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n    multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n  }\n  path.push([\n    'L',\n    p1.x + multSignX * correction,\n    p1.y + multSignY * correction,\n  ]);\n  return path;\n};\n\n/**\n * Transform a path by transforming each segment.\n * it has to be a simplified path or it won't work.\n * WARNING: this depends from pathOffset for correct operation\n * @param {TSimplePathData} path fabricJS parsed and simplified path commands\n * @param {TMat2D} transform matrix that represent the transformation\n * @param {Point} [pathOffset] `Path.pathOffset`\n * @returns {TSimplePathData} the transformed path\n */\nexport const transformPath = (\n  path: TSimplePathData,\n  transform: TMat2D,\n  pathOffset: Point,\n): TSimplePathData => {\n  if (pathOffset) {\n    transform = multiplyTransformMatrices(transform, [\n      1,\n      0,\n      0,\n      1,\n      -pathOffset.x,\n      -pathOffset.y,\n    ]);\n  }\n  return path.map((pathSegment) => {\n    const newSegment: TSimpleParsedCommand = [...pathSegment];\n    for (let i = 1; i < pathSegment.length - 1; i += 2) {\n      // TODO: is there a way to get around casting to any?\n      const { x, y } = transformPoint(\n        {\n          x: pathSegment[i] as number,\n          y: pathSegment[i + 1] as number,\n        },\n        transform,\n      );\n      newSegment[i] = x;\n      newSegment[i + 1] = y;\n    }\n    return newSegment;\n  });\n};\n\n/**\n * Returns an array of path commands to create a regular polygon\n * @param {number} numVertexes\n * @param {number} radius\n * @returns {TSimplePathData} An array of SVG path commands\n */\nexport const getRegularPolygonPath = (\n  numVertexes: number,\n  radius: number,\n): TSimplePathData => {\n  const interiorAngle = (Math.PI * 2) / numVertexes;\n  // rotationAdjustment rotates the path by 1/2 the interior angle so that the polygon always has a flat side on the bottom\n  // This isn't strictly necessary, but it's how we tend to think of and expect polygons to be drawn\n  let rotationAdjustment = -halfPI;\n  if (numVertexes % 2 === 0) {\n    rotationAdjustment += interiorAngle / 2;\n  }\n  const d = new Array(numVertexes + 1);\n  for (let i = 0; i < numVertexes; i++) {\n    const rad = i * interiorAngle + rotationAdjustment;\n    const { x, y } = new Point(cos(rad), sin(rad)).scalarMultiply(radius);\n    d[i] = [i === 0 ? 'M' : 'L', x, y];\n  }\n  d[numVertexes] = ['Z'];\n  return d;\n};\n\n/**\n * Join path commands to go back to svg format\n * @param {TSimplePathData} pathData fabricJS parsed path commands\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {String} joined path 'M 0 0 L 20 30'\n */\nexport const joinPath = (pathData: TSimplePathData, fractionDigits?: number) =>\n  pathData\n    .map((segment) => {\n      return segment\n        .map((arg, i) => {\n          if (i === 0) return arg;\n          return fractionDigits === undefined\n            ? arg\n            : toFixed(arg, fractionDigits);\n        })\n        .join(' ');\n    })\n    .join(' ');\n","// TODO this file needs to go away, cross browser style support is not fabricjs domain.\n\n/**\n * wrapper for setting element's style\n * @param {HTMLElement} element\n * @param {Object | string} styles\n */\nexport function setStyle(\n  element: HTMLElement,\n  styles: string | Record<string, string>,\n) {\n  const elementStyle = element.style;\n  if (!elementStyle || !styles) {\n    return;\n  } else if (typeof styles === 'string') {\n    elementStyle.cssText += ';' + styles;\n  } else {\n    Object.entries(styles).forEach(([property, value]) =>\n      elementStyle.setProperty(property, value),\n    );\n  }\n}\n","import type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { sendObjectToPlane } from './planeChange';\nimport { Group } from '../../shapes/Group';\n/**\n * Merges 2 clip paths into one visually equal clip path\n *\n * **IMPORTANT**:\\\n * Does **NOT** clone the arguments, clone them proir if necessary.\n *\n * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n *\n * In order to handle the `inverted` property we follow logic described in the following cases:\\\n * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n *\n * @memberOf fabric.util\n * @param {fabric.Object} c1\n * @param {fabric.Object} c2\n * @returns {fabric.Object} merged clip path\n */\nexport const mergeClipPaths = (c1: FabricObject, c2: FabricObject) => {\n  let a = c1,\n    b = c2;\n  if (a.inverted && !b.inverted) {\n    //  case (2)\n    a = c2;\n    b = c1;\n  }\n  //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n  sendObjectToPlane(b, b.group?.calcTransformMatrix(), a.calcTransformMatrix());\n  //  assign the `inverted` prop to the wrapping group\n  const inverted = a.inverted && b.inverted;\n  if (inverted) {\n    //  case (1)\n    a.inverted = b.inverted = false;\n  }\n  return new Group([a], { clipPath: b, inverted });\n};\n","/**\n * Returns random number between 2 specified ones.\n * @param {Number} min lower limit\n * @param {Number} max upper limit\n * @return {Number} random value (between min and max)\n */\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n","import { getFabricWindow } from '../../env';\nimport { noop } from '../../constants';\nimport type { Abortable } from '../../typedefs';\nimport { SignalAbortedError } from './console';\n\ntype requestOptions = Abortable & {\n  onComplete?: (xhr: XMLHttpRequest) => void;\n};\n\n/**\n * Cross-browser abstraction for sending XMLHttpRequest\n * @deprecated this has to go away, we can use a modern browser method to do the same.\n * @param {String} url URL to send XMLHttpRequest to\n * @param {Object} [options] Options object\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @param {Function} options.onComplete Callback to invoke when request is completed\n * @return {XMLHttpRequest} request\n */\n\nexport function request(url: string, options: requestOptions = {}) {\n  const onComplete = options.onComplete || noop,\n    xhr = new (getFabricWindow().XMLHttpRequest)(),\n    signal = options.signal,\n    abort = function () {\n      xhr.abort();\n    },\n    removeListener = function () {\n      signal && signal.removeEventListener('abort', abort);\n      xhr.onerror = xhr.ontimeout = noop;\n    };\n\n  if (signal && signal.aborted) {\n    throw new SignalAbortedError('request');\n  } else if (signal) {\n    signal.addEventListener('abort', abort, { once: true });\n  }\n\n  /** @ignore */\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      removeListener();\n      onComplete(xhr);\n      xhr.onreadystatechange = noop;\n    }\n  };\n\n  xhr.onerror = xhr.ontimeout = removeListener;\n\n  xhr.open('get', url, true);\n\n  xhr.send();\n  return xhr;\n}\n","import { CENTER, SCALE_X, SCALE_Y } from '../constants';\nimport type { FabricImage } from '../shapes/Image';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { qrDecompose } from './misc/matrix';\n\ntype FabricObjectWithTransformMatrix = FabricObject & {\n  transformMatrix?: TMat2D;\n};\n\n/**\n * This function is an helper for svg import. it decompose the transformMatrix\n * and assign properties to object.\n * untransformed coordinates\n * @private\n */\nconst _assignTransformMatrixProps = (\n  object: FabricObjectWithTransformMatrix,\n) => {\n  if (object.transformMatrix) {\n    const { scaleX, scaleY, angle, skewX } = qrDecompose(\n      object.transformMatrix,\n    );\n    object.flipX = false;\n    object.flipY = false;\n    object.set(SCALE_X, scaleX);\n    object.set(SCALE_Y, scaleY);\n    object.angle = angle;\n    object.skewX = skewX;\n    object.skewY = 0;\n  }\n};\n\n/**\n * This function is an helper for svg import. it removes the transform matrix\n * and set to object properties that fabricjs can handle\n * @private\n * @param {Object} preserveAspectRatioOptions\n */\nexport const removeTransformMatrixForSvgParsing = (\n  object: FabricObjectWithTransformMatrix,\n  preserveAspectRatioOptions?: any,\n) => {\n  let center = object._findCenterFromElement();\n  if (object.transformMatrix) {\n    _assignTransformMatrixProps(object);\n    center = center.transform(object.transformMatrix);\n  }\n  delete object.transformMatrix;\n  if (preserveAspectRatioOptions) {\n    object.scaleX *= preserveAspectRatioOptions.scaleX;\n    object.scaleY *= preserveAspectRatioOptions.scaleY;\n    (object as FabricImage).cropX = preserveAspectRatioOptions.cropX;\n    (object as FabricImage).cropY = preserveAspectRatioOptions.cropY;\n    center.x += preserveAspectRatioOptions.offsetLeft;\n    center.y += preserveAspectRatioOptions.offsetTop;\n    object.width = preserveAspectRatioOptions.width;\n    object.height = preserveAspectRatioOptions.height;\n  }\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n","import type { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n/**\n * Rotates `point` around `origin` with `radians`\n * @deprecated use the Point.rotate\n * @param {Point} origin The origin of the rotation\n * @param {Point} origin The origin of the rotation\n * @param {TRadian} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotatePoint = (\n  point: Point,\n  origin: Point,\n  radians: TRadian,\n): Point => point.rotate(radians, origin);\n","import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport { createCanvasElement, setStyle } from '../../util';\nimport type { CSSDimensions } from './util';\nimport { makeElementUnselectable, setCSSDimensions } from './util';\nimport type { CanvasItem } from './StaticCanvasDOMManager';\nimport { StaticCanvasDOMManager } from './StaticCanvasDOMManager';\nimport { setCanvasDimensions } from './util';\nimport { NONE } from '../../constants';\n\nexport class CanvasDOMManager extends StaticCanvasDOMManager {\n  upper: CanvasItem;\n  container: HTMLDivElement;\n\n  constructor(\n    arg0?: string | HTMLCanvasElement,\n    {\n      allowTouchScrolling = false,\n      containerClass = '',\n    }: {\n      allowTouchScrolling?: boolean;\n      /**\n       * @deprecated here only for backward compatibility\n       */\n      containerClass?: string;\n    } = {},\n  ) {\n    super(arg0);\n    const { el: lowerCanvasEl } = this.lower;\n    const upperCanvasEl = this.createUpperCanvas();\n    this.upper = { el: upperCanvasEl, ctx: upperCanvasEl.getContext('2d')! };\n    this.applyCanvasStyle(lowerCanvasEl, {\n      allowTouchScrolling,\n    });\n    this.applyCanvasStyle(upperCanvasEl, {\n      allowTouchScrolling,\n      styles: {\n        position: 'absolute',\n        left: '0',\n        top: '0',\n      },\n    });\n    const container = this.createContainerElement();\n    container.classList.add(containerClass);\n    if (lowerCanvasEl.parentNode) {\n      lowerCanvasEl.parentNode.replaceChild(container, lowerCanvasEl);\n    }\n    container.append(lowerCanvasEl, upperCanvasEl);\n    this.container = container;\n  }\n\n  protected createUpperCanvas() {\n    const { el: lowerCanvasEl } = this.lower;\n    const el = createCanvasElement();\n    // we assign the same classname of the lowerCanvas\n    el.className = lowerCanvasEl.className;\n    // but then we remove the lower-canvas specific className\n    el.classList.remove('lower-canvas');\n    // we add the specific upper-canvas class\n    el.classList.add('upper-canvas');\n    el.setAttribute('data-fabric', 'top');\n    el.style.cssText = lowerCanvasEl.style.cssText;\n    el.setAttribute('draggable', 'true');\n    return el;\n  }\n\n  protected createContainerElement() {\n    const container = getFabricDocument().createElement('div');\n    container.setAttribute('data-fabric', 'wrapper');\n    setStyle(container, {\n      position: 'relative',\n    });\n    makeElementUnselectable(container);\n    return container;\n  }\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} element canvas element to apply styles on\n   */\n  protected applyCanvasStyle(\n    element: HTMLCanvasElement,\n    options: {\n      allowTouchScrolling?: boolean;\n      styles?: Record<string, string>;\n    },\n  ) {\n    const { styles, allowTouchScrolling } = options;\n    setStyle(element, {\n      ...styles,\n      'touch-action': allowTouchScrolling ? 'manipulation' : NONE,\n    });\n    makeElementUnselectable(element);\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    super.setDimensions(size, retinaScaling);\n    const { el, ctx } = this.upper;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>): void {\n    super.setCSSDimensions(size);\n    setCSSDimensions(this.upper.el, size);\n    setCSSDimensions(this.container, size);\n  }\n\n  cleanupDOM(size: TSize) {\n    const container = this.container,\n      { el: lowerCanvasEl } = this.lower,\n      { el: upperCanvasEl } = this.upper;\n    super.cleanupDOM(size);\n    container.removeChild(upperCanvasEl);\n    container.removeChild(lowerCanvasEl);\n    if (container.parentNode) {\n      container.parentNode.replaceChild(lowerCanvasEl, container);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    getEnv().dispose(this.upper.el);\n    // @ts-expect-error disposing\n    delete this.upper;\n    // @ts-expect-error disposing\n    delete this.container;\n  }\n}\n","import { dragHandler } from '../controls/drag';\nimport { getActionFromCorner } from '../controls/util';\nimport { Point } from '../Point';\nimport { FabricObject } from '../shapes/Object/FabricObject';\nimport type {\n  CanvasEvents,\n  ModifierKey,\n  TOptionalModifierKey,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport {\n  addTransformToObject,\n  saveObjectTransform,\n} from '../util/misc/objectTransforms';\nimport type { TCanvasSizeOptions } from './StaticCanvas';\nimport { StaticCanvas } from './StaticCanvas';\nimport { isCollection } from '../Collection';\nimport { isTransparent } from '../util/misc/isTransparent';\nimport type {\n  TMat2D,\n  TOriginX,\n  TOriginY,\n  TSize,\n  TSVGReviver,\n} from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { getPointer, isTouchEvent } from '../util/dom_event';\nimport type { IText } from '../shapes/IText/IText';\nimport type { BaseBrush } from '../brushes/BaseBrush';\nimport { pick } from '../util/misc/pick';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { cos, createCanvasElement, sin } from '../util';\nimport { CanvasDOMManager } from './DOMManagers/CanvasDOMManager';\nimport {\n  BOTTOM,\n  CENTER,\n  LEFT,\n  MODIFIED,\n  RESIZING,\n  RIGHT,\n  ROTATE,\n  SCALE,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CanvasOptions } from './CanvasOptions';\nimport { canvasDefaults } from './CanvasOptions';\nimport { Intersection } from '../Intersection';\nimport { isActiveSelection } from '../util/typeAssertions';\n\n/**\n * Canvas class\n * @class Canvas\n * @extends StaticCanvas\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n *\n * @fires object:modified at the end of a transform\n * @fires object:rotating while an object is being rotated from the control\n * @fires object:scaling while an object is being scaled by controls\n * @fires object:moving while an object is being dragged\n * @fires object:skewing while an object is being skewed from the controls\n *\n * @fires before:transform before a transform is is started\n * @fires before:selection:cleared\n * @fires selection:cleared\n * @fires selection:updated\n * @fires selection:created\n *\n * @fires path:created after a drawing operation ends and the path is added\n * @fires mouse:down\n * @fires mouse:move\n * @fires mouse:up\n * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n * @fires mouse:over\n * @fires mouse:out\n * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drag:enter object drag enter\n * @fires drag:leave object drag leave\n * @fires drop:before before drop event. Prepare for the drop event (same native event).\n * @fires drop\n * @fires drop:after after drop event. Run logic on canvas after event has been accepted/declined (same native event).\n * @example\n * let a: fabric.Object, b: fabric.Object;\n * let flag = false;\n * canvas.add(a, b);\n * a.on('drop:before', opt => {\n *  //  we want a to accept the drop even though it's below b in the stack\n *  flag = this.canDrop(opt.e);\n * });\n * b.canDrop = function(e) {\n *  !flag && this.draggableTextDelegate.canDrop(e);\n * }\n * b.on('dragover', opt => b.set('fill', opt.dropTarget === b ? 'pink' : 'black'));\n * a.on('drop', opt => {\n *  opt.e.defaultPrevented  //  drop occurred\n *  opt.didDrop             //  drop occurred on canvas\n *  opt.target              //  drop target\n *  opt.target !== a && a.set('text', 'I lost');\n * });\n * canvas.on('drop:after', opt => {\n *  //  inform user who won\n *  if(!opt.e.defaultPrevented) {\n *    // no winners\n *  }\n *  else if(!opt.didDrop) {\n *    //  my objects didn't win, some other lucky object\n *  }\n *  else {\n *    //  we have a winner it's opt.target!!\n *  }\n * })\n *\n * @fires after:render at the end of the render process, receives the context in the callback\n * @fires before:render at start the render process, receives the context in the callback\n *\n * @fires contextmenu:before\n * @fires contextmenu\n * @example\n * let handler;\n * targets.forEach(target => {\n *   target.on('contextmenu:before', opt => {\n *     //  decide which target should handle the event before canvas hijacks it\n *     if (someCaseHappens && opt.targets.includes(target)) {\n *       handler = target;\n *     }\n *   });\n *   target.on('contextmenu', opt => {\n *     //  do something fantastic\n *   });\n * });\n * canvas.on('contextmenu', opt => {\n *   if (!handler) {\n *     //  no one takes responsibility, it's always left to me\n *     //  let's show them how it's done!\n *   }\n * });\n *\n */\nexport class SelectableCanvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends StaticCanvas<EventSpec>\n  implements Omit<CanvasOptions, 'enablePointerEvents'>\n{\n  declare _objects: FabricObject[];\n\n  // transform config\n  declare uniformScaling: boolean;\n  declare uniScaleKey: TOptionalModifierKey;\n  declare centeredScaling: boolean;\n  declare centeredRotation: boolean;\n  declare centeredKey: TOptionalModifierKey;\n  declare altActionKey: TOptionalModifierKey;\n\n  // selection config\n  declare selection: boolean;\n  declare selectionKey: TOptionalModifierKey | ModifierKey[];\n  declare altSelectionKey: TOptionalModifierKey;\n  declare selectionColor: string;\n  declare selectionDashArray: number[];\n  declare selectionBorderColor: string;\n  declare selectionLineWidth: number;\n  declare selectionFullyContained: boolean;\n\n  // cursors\n  declare hoverCursor: CSSStyleDeclaration['cursor'];\n  declare moveCursor: CSSStyleDeclaration['cursor'];\n  declare defaultCursor: CSSStyleDeclaration['cursor'];\n  declare freeDrawingCursor: CSSStyleDeclaration['cursor'];\n  declare notAllowedCursor: CSSStyleDeclaration['cursor'];\n\n  declare containerClass: string;\n\n  // target find config\n  declare perPixelTargetFind: boolean;\n  declare targetFindTolerance: number;\n  declare skipTargetFind: boolean;\n\n  /**\n   * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n   * After mousedown, mousemove creates a shape,\n   * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n   * @type Boolean\n   * @default\n   */\n  declare isDrawingMode: boolean;\n\n  declare preserveObjectStacking: boolean;\n\n  // event config\n  declare stopContextMenu: boolean;\n  declare fireRightClick: boolean;\n  declare fireMiddleClick: boolean;\n\n  /**\n   * Keep track of the subTargets for Mouse Events, ordered bottom up from innermost nested subTarget\n   * @type FabricObject[]\n   */\n  targets: FabricObject[] = [];\n\n  /**\n   * Keep track of the hovered target\n   * @type FabricObject | null\n   * @private\n   */\n  declare _hoveredTarget?: FabricObject;\n\n  /**\n   * hold the list of nested targets hovered\n   * @type FabricObject[]\n   * @private\n   */\n  _hoveredTargets: FabricObject[] = [];\n\n  /**\n   * hold the list of objects to render\n   * @type FabricObject[]\n   * @private\n   */\n  _objectsToRender?: FabricObject[];\n\n  /**\n   * hold a reference to a data structure that contains information\n   * on the current on going transform\n   * @type\n   * @private\n   */\n  _currentTransform: Transform | null = null;\n\n  /**\n   * hold a reference to a data structure used to track the selection\n   * box on canvas drag\n   * on the current on going transform\n   * x, y, deltaX and deltaY are in scene plane\n   * @type\n   * @private\n   */\n  protected _groupSelector: {\n    x: number;\n    y: number;\n    deltaX: number;\n    deltaY: number;\n  } | null = null;\n\n  /**\n   * internal flag used to understand if the context top requires a cleanup\n   * in case this is true, the contextTop will be cleared at the next render\n   * @type boolean\n   * @private\n   */\n  contextTopDirty = false;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _absolutePointer holds a reference to the pointer in fabricCanvas/design coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _absolutePointer?: Point;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _pointer holds a reference to the pointer in html coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _pointer?: Point;\n\n  /**\n   * During a mouse event we may need the target multiple times in multiple functions.\n   * _target holds a reference to the target that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * @type {FabricObject}\n   */\n  protected declare _target?: FabricObject;\n\n  static ownDefaults = canvasDefaults;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...SelectableCanvas.ownDefaults };\n  }\n\n  declare elements: CanvasDOMManager;\n  get upperCanvasEl() {\n    return this.elements.upper?.el;\n  }\n  get contextTop() {\n    return this.elements.upper?.ctx;\n  }\n  get wrapperEl() {\n    return this.elements.container;\n  }\n  private declare pixelFindCanvasEl: HTMLCanvasElement;\n  private declare pixelFindContext: CanvasRenderingContext2D;\n\n  protected declare _isCurrentlyDrawing: boolean;\n  declare freeDrawingBrush?: BaseBrush;\n  declare _activeObject?: FabricObject;\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new CanvasDOMManager(el, {\n      allowTouchScrolling: this.allowTouchScrolling,\n      containerClass: this.containerClass,\n    });\n    this._createCacheCanvas();\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was added\n   */\n  _onObjectAdded(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    super._onObjectAdded(obj);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was removed\n   */\n  _onObjectRemoved(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    // removing active object should fire \"selection:cleared\" events\n    if (obj === this._activeObject) {\n      this.fire('before:selection:cleared', { deselected: [obj] });\n      this._discardActiveObject();\n      this.fire('selection:cleared', { deselected: [obj] });\n      obj.fire('deselected', {\n        target: obj,\n      });\n    }\n    if (obj === this._hoveredTarget) {\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n    super._onObjectRemoved(obj);\n  }\n\n  _onStackOrderChanged() {\n    this._objectsToRender = undefined;\n    super._onStackOrderChanged();\n  }\n\n  /**\n   * Divides objects in two groups, one to render immediately\n   * and one to render as activeGroup.\n   * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n   */\n  _chooseObjectsToRender(): FabricObject[] {\n    const activeObject = this._activeObject;\n    return !this.preserveObjectStacking && activeObject\n      ? this._objects\n          .filter((object) => !object.group && object !== activeObject)\n          .concat(activeObject)\n      : this._objects;\n  }\n\n  /**\n   * Renders both the top canvas and the secondary container canvas.\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n      this.clearContext(this.contextTop);\n      this.contextTopDirty = false;\n    }\n    if (this.hasLostContext) {\n      this.renderTopLayer(this.contextTop);\n      this.hasLostContext = false;\n    }\n    !this._objectsToRender &&\n      (this._objectsToRender = this._chooseObjectsToRender());\n    this.renderCanvas(this.getContext(), this._objectsToRender);\n  }\n\n  /**\n   * text selection is rendered by the active text instance during the rendering cycle\n   */\n  renderTopLayer(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this.freeDrawingBrush && this.freeDrawingBrush._render();\n      this.contextTopDirty = true;\n    }\n    // we render the top context - last object\n    if (this.selection && this._groupSelector) {\n      this._drawSelection(ctx);\n      this.contextTopDirty = true;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Method to render only the top canvas.\n   * Also used to render the group selection box.\n   * Does not render text selection.\n   */\n  renderTop() {\n    const ctx = this.contextTop;\n    this.clearContext(ctx);\n    this.renderTopLayer(ctx);\n    // todo: how do i know if the after:render is for the top or normal contex?\n    this.fire('after:render', { ctx });\n  }\n\n  /**\n   * Set the canvas tolerance value for pixel taret find.\n   * Use only integer numbers.\n   * @private\n   */\n  setTargetFindTolerance(value: number) {\n    value = Math.round(value);\n    this.targetFindTolerance = value;\n    const retina = this.getRetinaScaling();\n    const size = Math.ceil((value * 2 + 1) * retina);\n    this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = size;\n    this.pixelFindContext.scale(retina, retina);\n  }\n\n  /**\n   * Returns true if object is transparent at a certain location\n   * Clarification: this is `is target transparent at location X or are controls there`\n   * @TODO this seems dumb that we treat controls with transparency. we can find controls\n   * programmatically without painting them, the cache canvas optimization is always valid\n   * @param {FabricObject} target Object to check\n   * @param {Number} x Left coordinate in viewport space\n   * @param {Number} y Top coordinate in viewport space\n   * @return {Boolean}\n   */\n  isTargetTransparent(target: FabricObject, x: number, y: number): boolean {\n    const tolerance = this.targetFindTolerance;\n    const ctx = this.pixelFindContext;\n    this.clearContext(ctx);\n    ctx.save();\n    ctx.translate(-x + tolerance, -y + tolerance);\n    ctx.transform(...this.viewportTransform);\n    const selectionBgc = target.selectionBackgroundColor;\n    target.selectionBackgroundColor = '';\n    target.render(ctx);\n    target.selectionBackgroundColor = selectionBgc;\n    ctx.restore();\n    // our canvas is square, and made around tolerance.\n    // so tolerance in this case also represent the center of the canvas.\n    const enhancedTolerance = Math.round(tolerance * this.getRetinaScaling());\n    return isTransparent(\n      ctx,\n      enhancedTolerance,\n      enhancedTolerance,\n      enhancedTolerance,\n    );\n  }\n\n  /**\n   * takes an event and determines if selection key has been pressed\n   * @private\n   * @param {TPointerEvent} e Event object\n   */\n  _isSelectionKeyPressed(e: TPointerEvent): boolean {\n    const sKey = this.selectionKey;\n    if (!sKey) {\n      return false;\n    }\n    if (Array.isArray(sKey)) {\n      return !!sKey.find((key) => !!key && e[key] === true);\n    } else {\n      return e[sKey];\n    }\n  }\n\n  /**\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target\n   */\n  _shouldClearSelection(\n    e: TPointerEvent,\n    target?: FabricObject,\n  ): target is undefined {\n    const activeObjects = this.getActiveObjects(),\n      activeObject = this._activeObject;\n\n    return !!(\n      !target ||\n      (target &&\n        activeObject &&\n        activeObjects.length > 1 &&\n        activeObjects.indexOf(target) === -1 &&\n        activeObject !== target &&\n        !this._isSelectionKeyPressed(e)) ||\n      (target && !target.evented) ||\n      (target && !target.selectable && activeObject && activeObject !== target)\n    );\n  }\n\n  /**\n   * This method will take in consideration a modifier key pressed and the control we are\n   * about to drag, and try to guess the anchor point ( origin ) of the transormation.\n   * This should be really in the realm of controls, and we should remove specific code for legacy\n   * embedded actions.\n   * @TODO this probably deserve discussion/rediscovery and change/refactor\n   * @private\n   * @deprecated\n   * @param {FabricObject} target\n   * @param {string} action\n   * @param {boolean} altKey\n   * @returns {boolean} true if the transformation should be centered\n   */\n  private _shouldCenterTransform(\n    target: FabricObject,\n    action: string,\n    modifierKeyPressed: boolean,\n  ) {\n    if (!target) {\n      return;\n    }\n\n    let centerTransform;\n\n    if (\n      action === SCALE ||\n      action === SCALE_X ||\n      action === SCALE_Y ||\n      action === RESIZING\n    ) {\n      centerTransform = this.centeredScaling || target.centeredScaling;\n    } else if (action === ROTATE) {\n      centerTransform = this.centeredRotation || target.centeredRotation;\n    }\n\n    return centerTransform ? !modifierKeyPressed : modifierKeyPressed;\n  }\n\n  /**\n   * Given the control clicked, determine the origin of the transform.\n   * This is bad because controls can totally have custom names\n   * should disappear before release 4.0\n   * @private\n   * @deprecated\n   */\n  _getOriginFromCorner(\n    target: FabricObject,\n    controlName: string,\n  ): { x: TOriginX; y: TOriginY } {\n    const origin = {\n      x: target.originX,\n      y: target.originY,\n    };\n\n    if (!controlName) {\n      return origin;\n    }\n\n    // is a left control ?\n    if (['ml', 'tl', 'bl'].includes(controlName)) {\n      origin.x = RIGHT;\n      // is a right control ?\n    } else if (['mr', 'tr', 'br'].includes(controlName)) {\n      origin.x = LEFT;\n    }\n    // is a top control ?\n    if (['tl', 'mt', 'tr'].includes(controlName)) {\n      origin.y = BOTTOM;\n      // is a bottom control ?\n    } else if (['bl', 'mb', 'br'].includes(controlName)) {\n      origin.y = TOP;\n    }\n    return origin;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @param {FabricObject} target\n   * @param {boolean} [alreadySelected] pass true to setup the active control\n   */\n  _setupCurrentTransform(\n    e: TPointerEvent,\n    target: FabricObject,\n    alreadySelected: boolean,\n  ): void {\n    const pointer = target.group\n      ? // transform pointer to target's containing coordinate plane\n        sendPointToPlane(\n          this.getScenePoint(e),\n          undefined,\n          target.group.calcTransformMatrix(),\n        )\n      : this.getScenePoint(e);\n    const { key: corner = '', control } = target.getActiveControl() || {},\n      actionHandler =\n        alreadySelected && control\n          ? control.getActionHandler(e, target, control)?.bind(control)\n          : dragHandler,\n      action = getActionFromCorner(alreadySelected, corner, e, target),\n      altKey = e[this.centeredKey as ModifierKey],\n      origin = this._shouldCenterTransform(target, action, altKey)\n        ? ({ x: CENTER, y: CENTER } as const)\n        : this._getOriginFromCorner(target, corner),\n      /**\n       * relative to target's containing coordinate plane\n       * both agree on every point\n       **/\n      transform: Transform = {\n        target: target,\n        action,\n        actionHandler,\n        actionPerformed: false,\n        corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        theta: degreesToRadians(target.angle),\n        width: target.width,\n        height: target.height,\n        shiftKey: e.shiftKey,\n        altKey,\n        original: {\n          ...saveObjectTransform(target),\n          originX: origin.x,\n          originY: origin.y,\n        },\n      };\n\n    this._currentTransform = transform;\n\n    this.fire('before:transform', {\n      e,\n      transform,\n    });\n  }\n\n  /**\n   * Set the cursor type of the canvas element\n   * @param {String} value Cursor type of the canvas element.\n   * @see http://www.w3.org/TR/css3-ui/#cursor\n   */\n  setCursor(value: CSSStyleDeclaration['cursor']): void {\n    this.upperCanvasEl.style.cursor = value;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx to draw the selection on\n   */\n  _drawSelection(ctx: CanvasRenderingContext2D): void {\n    const { x, y, deltaX, deltaY } = this._groupSelector!,\n      start = new Point(x, y).transform(this.viewportTransform),\n      extent = new Point(x + deltaX, y + deltaY).transform(\n        this.viewportTransform,\n      ),\n      strokeOffset = this.selectionLineWidth / 2;\n    let minX = Math.min(start.x, extent.x),\n      minY = Math.min(start.y, extent.y),\n      maxX = Math.max(start.x, extent.x),\n      maxY = Math.max(start.y, extent.y);\n\n    if (this.selectionColor) {\n      ctx.fillStyle = this.selectionColor;\n      ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n    }\n\n    if (!this.selectionLineWidth || !this.selectionBorderColor) {\n      return;\n    }\n    ctx.lineWidth = this.selectionLineWidth;\n    ctx.strokeStyle = this.selectionBorderColor;\n\n    minX += strokeOffset;\n    minY += strokeOffset;\n    maxX -= strokeOffset;\n    maxY -= strokeOffset;\n    // selection border\n    // @TODO: is _setLineDash still necessary on modern canvas?\n    FabricObject.prototype._setLineDash.call(\n      this,\n      ctx,\n      this.selectionDashArray,\n    );\n    ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  /**\n   * Method that determines what object we are clicking on\n   * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n   * or the outside part of the corner.\n   * @param {Event} e mouse event\n   * @return {FabricObject | null} the target found\n   */\n  findTarget(e: TPointerEvent): FabricObject | undefined {\n    if (this.skipTargetFind) {\n      return undefined;\n    }\n\n    const pointer = this.getViewportPoint(e),\n      activeObject = this._activeObject,\n      aObjects = this.getActiveObjects();\n\n    this.targets = [];\n\n    if (activeObject && aObjects.length >= 1) {\n      if (activeObject.findControl(pointer, isTouchEvent(e))) {\n        // if we hit the corner of the active object, let's return that.\n        return activeObject;\n      } else if (\n        aObjects.length > 1 &&\n        // check pointer is over active selection and possibly perform `subTargetCheck`\n        this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active selection does not select sub targets like normal groups\n        return activeObject;\n      } else if (\n        activeObject === this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active object is not an active selection\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        } else {\n          const subTargets = this.targets;\n          this.targets = [];\n          const target = this.searchPossibleTargets(this._objects, pointer);\n          if (\n            e[this.altSelectionKey as ModifierKey] &&\n            target &&\n            target !== activeObject\n          ) {\n            // alt selection: select active object even though it is not the top most target\n            // restore targets\n            this.targets = subTargets;\n            return activeObject;\n          }\n          return target;\n        }\n      }\n    }\n\n    return this.searchPossibleTargets(this._objects, pointer);\n  }\n\n  /**\n   * Checks if the point is inside the object selection area including padding\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point in scene coordinates\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  private _pointIsInObjectSelectionArea(obj: FabricObject, point: Point) {\n    // getCoords will already take care of group de-nesting\n    let coords = obj.getCoords();\n    const viewportZoom = this.getZoom();\n    const padding = obj.padding / viewportZoom;\n    if (padding) {\n      const [tl, tr, br, bl] = coords;\n      // what is the angle of the object?\n      // we could use getTotalAngle, but is way easier to look at it\n      // from how coords are oriented, since if something went wrong\n      // at least we are consistent.\n      const angleRadians = Math.atan2(tr.y - tl.y, tr.x - tl.x),\n        cosP = cos(angleRadians) * padding,\n        sinP = sin(angleRadians) * padding,\n        cosPSinP = cosP + sinP,\n        cosPMinusSinP = cosP - sinP;\n\n      coords = [\n        new Point(tl.x - cosPMinusSinP, tl.y - cosPSinP),\n        new Point(tr.x + cosPSinP, tr.y - cosPMinusSinP),\n        new Point(br.x + cosPMinusSinP, br.y + cosPSinP),\n        new Point(bl.x - cosPSinP, bl.y + cosPMinusSinP),\n      ];\n      // in case of padding we calculate the new coords on the fly.\n      // otherwise we have to maintain 2 sets of coordinates for everything.\n      // we can reiterate on storing them.\n      // if this is slow, for now the semplification is large and doesn't impact\n      // rendering.\n      // the idea behind this is that outside target check we don't need ot know\n      // where those coords are\n    }\n    return Intersection.isPointInPolygon(point, coords);\n  }\n\n  /**\n   * Checks point is inside the object selection condition. Either area with padding\n   * or over pixels if perPixelTargetFind is enabled\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point from viewport.\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  _checkTarget(obj: FabricObject, pointer: Point): boolean {\n    if (\n      obj &&\n      obj.visible &&\n      obj.evented &&\n      this._pointIsInObjectSelectionArea(\n        obj,\n        sendPointToPlane(pointer, undefined, this.viewportTransform),\n      )\n    ) {\n      if (\n        (this.perPixelTargetFind || obj.perPixelTargetFind) &&\n        !(obj as unknown as IText).isEditing\n      ) {\n        if (!this.isTargetTransparent(obj, pointer.x, pointer.y)) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Internal Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @param {Array} [objects] objects array to look into\n   * @param {Object} [pointer] x,y object of point coordinates we want to check.\n   * @return {FabricObject} **top most object from given `objects`** that contains pointer\n   * @private\n   */\n  _searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    // Cache all targets where their bounding box contains point.\n    let i = objects.length;\n    // Do not check for currently grouped objects, since we check the parent group itself.\n    // until we call this function specifically to search inside the activeGroup\n    while (i--) {\n      const target = objects[i];\n      if (this._checkTarget(target, pointer)) {\n        if (isCollection(target) && target.subTargetCheck) {\n          const subTarget = this._searchPossibleTargets(\n            target._objects as FabricObject[],\n            pointer,\n          );\n          subTarget && this.targets.push(subTarget);\n        }\n        return target;\n      }\n    }\n  }\n\n  /**\n   * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @see {@link _searchPossibleTargets}\n   * @param {FabricObject[]} [objects] objects array to look into\n   * @param {Point} [pointer] coordinates from viewport to check.\n   * @return {FabricObject} **top most object on screen** that contains pointer\n   */\n  searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    const target = this._searchPossibleTargets(objects, pointer);\n\n    // if we found something in this.targets, and the group is interactive, return the innermost subTarget\n    // that is still interactive\n    // TODO: reverify why interactive. the target should be returned always, but selected only\n    // if interactive.\n    if (\n      target &&\n      isCollection(target) &&\n      target.interactive &&\n      this.targets[0]\n    ) {\n      /** targets[0] is the innermost nested target, but it could be inside non interactive groups and so not a selection target */\n      const targets = this.targets;\n      for (let i = targets.length - 1; i > 0; i--) {\n        const t = targets[i];\n        if (!(isCollection(t) && t.interactive)) {\n          // one of the subtargets was not interactive. that is the last subtarget we can return.\n          // we can't dig more deep;\n          return t;\n        }\n      }\n      return targets[0];\n    }\n\n    return target;\n  }\n\n  /**\n   * @returns point existing in the same plane as the {@link HTMLCanvasElement},\n   * `(0, 0)` being the top left corner of the {@link HTMLCanvasElement}.\n   * This means that changes to the {@link viewportTransform} do not change the values of the point\n   * and it remains unchanged from the viewer's perspective.\n   *\n   * @example\n   * const scenePoint = sendPointToPlane(\n   *  this.getViewportPoint(e),\n   *  undefined,\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getViewportPoint(e: TPointerEvent) {\n    if (this._pointer) {\n      return this._pointer;\n    }\n    return this.getPointer(e, true);\n  }\n\n  /**\n   * @returns point existing in the scene (the same plane as the plane {@link FabricObject#getCenterPoint} exists in).\n   * This means that changes to the {@link viewportTransform} do not change the values of the point,\n   * however, from the viewer's perspective, the point is changed.\n   *\n   * @example\n   * const viewportPoint = sendPointToPlane(\n   *  this.getScenePoint(e),\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getScenePoint(e: TPointerEvent) {\n    if (this._absolutePointer) {\n      return this._absolutePointer;\n    }\n    return this.getPointer(e);\n  }\n\n  /**\n   * Returns pointer relative to canvas.\n   *\n   * @deprecated This method is deprecated since v6 to protect you from misuse.\n   * Use {@link getViewportPoint} or {@link getScenePoint} instead.\n   *\n   * @param {Event} e\n   * @param {Boolean} [fromViewport] whether to return the point from the viewport or in the scene\n   * @return {Point}\n   */\n  getPointer(e: TPointerEvent, fromViewport = false): Point {\n    const upperCanvasEl = this.upperCanvasEl,\n      bounds = upperCanvasEl.getBoundingClientRect();\n    let pointer = getPointer(e),\n      boundsWidth = bounds.width || 0,\n      boundsHeight = bounds.height || 0;\n\n    if (!boundsWidth || !boundsHeight) {\n      if (TOP in bounds && BOTTOM in bounds) {\n        boundsHeight = Math.abs(bounds.top - bounds.bottom);\n      }\n      if (RIGHT in bounds && LEFT in bounds) {\n        boundsWidth = Math.abs(bounds.right - bounds.left);\n      }\n    }\n\n    this.calcOffset();\n    pointer.x = pointer.x - this._offset.left;\n    pointer.y = pointer.y - this._offset.top;\n    if (!fromViewport) {\n      pointer = sendPointToPlane(pointer, undefined, this.viewportTransform);\n    }\n\n    const retinaScaling = this.getRetinaScaling();\n    if (retinaScaling !== 1) {\n      pointer.x /= retinaScaling;\n      pointer.y /= retinaScaling;\n    }\n\n    // If bounds are not available (i.e. not visible), do not apply scale.\n    const cssScale =\n      boundsWidth === 0 || boundsHeight === 0\n        ? new Point(1, 1)\n        : new Point(\n            upperCanvasEl.width / boundsWidth,\n            upperCanvasEl.height / boundsHeight,\n          );\n\n    return pointer.multiply(cssScale);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: TSize,\n    options?: TCanvasSizeOptions,\n  ) {\n    // @ts-expect-error this method exists in the subclass - should be moved or declared as abstract\n    this._resetTransformEventData();\n    super._setDimensionsImpl(dimensions, options);\n    if (this._isCurrentlyDrawing) {\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n  }\n\n  protected _createCacheCanvas() {\n    this.pixelFindCanvasEl = createCanvasElement();\n    this.pixelFindContext = this.pixelFindCanvasEl.getContext('2d', {\n      willReadFrequently: true,\n    })!;\n    this.setTargetFindTolerance(this.targetFindTolerance);\n  }\n\n  /**\n   * Returns context of top canvas where interactions are drawn\n   * @returns {CanvasRenderingContext2D}\n   */\n  getTopContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns context of canvas where object selection is drawn\n   * @alias\n   * @return {CanvasRenderingContext2D}\n   */\n  getSelectionContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns &lt;canvas> element on which object selection is drawn\n   * @return {HTMLCanvasElement}\n   */\n  getSelectionElement(): HTMLCanvasElement {\n    return this.elements.upper.el;\n  }\n\n  /**\n   * Returns currently active object\n   * @return {FabricObject | null} active object\n   */\n  getActiveObject(): FabricObject | undefined {\n    return this._activeObject;\n  }\n\n  /**\n   * Returns an array with the current selected objects\n   * @return {FabricObject[]} active objects array\n   */\n  getActiveObjects(): FabricObject[] {\n    const active = this._activeObject;\n    return isActiveSelection(active)\n      ? active.getObjects()\n      : active\n        ? [active]\n        : [];\n  }\n\n  /**\n   * @private\n   * Compares the old activeObject with the current one and fires correct events\n   * @param {FabricObject[]} oldObjects old activeObject\n   * @param {TPointerEvent} e mouse event triggering the selection events\n   */\n  _fireSelectionEvents(oldObjects: FabricObject[], e?: TPointerEvent) {\n    let somethingChanged = false,\n      invalidate = false;\n    const objects = this.getActiveObjects(),\n      added: FabricObject[] = [],\n      removed: FabricObject[] = [];\n\n    oldObjects.forEach((target) => {\n      if (!objects.includes(target)) {\n        somethingChanged = true;\n        target.fire('deselected', {\n          e,\n          target,\n        });\n        removed.push(target);\n      }\n    });\n\n    objects.forEach((target) => {\n      if (!oldObjects.includes(target)) {\n        somethingChanged = true;\n        target.fire('selected', {\n          e,\n          target,\n        });\n        added.push(target);\n      }\n    });\n\n    if (oldObjects.length > 0 && objects.length > 0) {\n      invalidate = true;\n      somethingChanged &&\n        this.fire('selection:updated', {\n          e,\n          selected: added,\n          deselected: removed,\n        });\n    } else if (objects.length > 0) {\n      invalidate = true;\n      this.fire('selection:created', {\n        e,\n        selected: added,\n      });\n    } else if (oldObjects.length > 0) {\n      invalidate = true;\n      this.fire('selection:cleared', {\n        e,\n        deselected: removed,\n      });\n    }\n    invalidate && (this._objectsToRender = undefined);\n  }\n\n  /**\n   * Sets given object as the only active object on canvas\n   * @param {FabricObject} object Object to set as an active one\n   * @param {TPointerEvent} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    // we can't inline this, since _setActiveObject will change what getActiveObjects returns\n    const currentActives = this.getActiveObjects();\n    const selected = this._setActiveObject(object, e);\n    this._fireSelectionEvents(currentActives, e);\n    return selected;\n  }\n\n  /**\n   * This is supposed to be equivalent to setActiveObject but without firing\n   * any event. There is commitment to have this stay this way.\n   * This is the functional part of setActiveObject.\n   * @param {Object} object to set as active\n   * @param {Event} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  _setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    const prevActiveObject = this._activeObject;\n    if (prevActiveObject === object) {\n      return false;\n    }\n    // after calling this._discardActiveObject, this,_activeObject could be undefined\n    if (!this._discardActiveObject(e, object) && this._activeObject) {\n      // refused to deselect\n      return false;\n    }\n    if (object.onSelect({ e })) {\n      return false;\n    }\n\n    this._activeObject = object;\n\n    if (isActiveSelection(object) && prevActiveObject !== object) {\n      object.set('canvas', this);\n    }\n    object.setCoords();\n\n    return true;\n  }\n\n  /**\n   * This is supposed to be equivalent to discardActiveObject but without firing\n   * any selection events ( can still fire object transformation events ). There is commitment to have this stay this way.\n   * This is the functional part of discardActiveObject.\n   * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n   * @param {Object} object the next object to set as active, reason why we are discarding this\n   * @return {Boolean} true if the active object has been discarded\n   */\n  _discardActiveObject(\n    e?: TPointerEvent,\n    object?: FabricObject,\n  ): this is { _activeObject: undefined } {\n    const obj = this._activeObject;\n    if (obj) {\n      // onDeselect return TRUE to cancel selection;\n      if (obj.onDeselect({ e, object })) {\n        return false;\n      }\n      if (this._currentTransform && this._currentTransform.target === obj) {\n        this.endCurrentTransform(e);\n      }\n      if (isActiveSelection(obj) && obj === this._hoveredTarget) {\n        this._hoveredTarget = undefined;\n      }\n      this._activeObject = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Discards currently active object and fire events. If the function is called by fabric\n   * as a consequence of a mouse event, the event is passed as a parameter and\n   * sent to the fire function for the custom events. When used as a method the\n   * e param does not have any application.\n   * @param {event} e\n   * @return {Boolean} true if the active object has been discarded\n   */\n  discardActiveObject(e?: TPointerEvent): this is { _activeObject: undefined } {\n    const currentActives = this.getActiveObjects(),\n      activeObject = this.getActiveObject();\n    if (currentActives.length) {\n      this.fire('before:selection:cleared', {\n        e,\n        deselected: [activeObject!],\n      });\n    }\n    const discarded = this._discardActiveObject(e);\n    this._fireSelectionEvents(currentActives, e);\n    return discarded;\n  }\n\n  /**\n   * End the current transform.\n   * You don't usually need to call this method unless you are interrupting a user initiated transform\n   * because of some other event ( a press of key combination, or something that block the user UX )\n   * @param {Event} [e] send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  endCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform;\n    this._finalizeCurrentTransform(e);\n    if (transform && transform.target) {\n      // this could probably go inside _finalizeCurrentTransform\n      transform.target.isMoving = false;\n    }\n    this._currentTransform = null;\n  }\n\n  /**\n   * @private\n   * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  _finalizeCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform!,\n      target = transform.target,\n      options = {\n        e,\n        target,\n        transform,\n        action: transform.action,\n      };\n\n    if (target._scaling) {\n      target._scaling = false;\n    }\n\n    target.setCoords();\n\n    if (transform.actionPerformed) {\n      this.fire('object:modified', options);\n      target.fire(MODIFIED, options);\n    }\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    super.setViewportTransform(vpt);\n    const activeObject = this._activeObject;\n    if (activeObject) {\n      activeObject.setCoords();\n    }\n  }\n\n  /**\n   * @override clears active selection ref and interactive canvas elements and contexts\n   */\n  destroy() {\n    // dispose of active selection\n    const activeObject = this._activeObject;\n    if (isActiveSelection(activeObject)) {\n      activeObject.removeAll();\n      activeObject.dispose();\n    }\n\n    delete this._activeObject;\n\n    super.destroy();\n\n    // free resources\n\n    // pixel find canvas\n    // @ts-expect-error disposing\n    this.pixelFindContext = null;\n    // @ts-expect-error disposing\n    this.pixelFindCanvasEl = undefined;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    // discard active object and fire events\n    this.discardActiveObject();\n    // make sure we clear the active object in case it refused to be discarded\n    this._activeObject = undefined;\n    this.clearContext(this.contextTop);\n    super.clear();\n  }\n\n  /**\n   * Draws objects' controls (borders/controls)\n   * @param {CanvasRenderingContext2D} ctx Context to render controls on\n   */\n  drawControls(ctx: CanvasRenderingContext2D) {\n    const activeObject = this._activeObject;\n\n    if (activeObject) {\n      activeObject._renderControls(ctx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: 'toObject' | 'toDatalessObject',\n    propertiesToInclude: string[],\n  ): Record<string, any> {\n    // If the object is part of the current selection group, it should\n    // be transformed appropriately\n    // i.e. it should be serialised as it would appear if the selection group\n    // were to be destroyed.\n    const originalProperties = this._realizeGroupTransformOnObject(instance),\n      object = super._toObject(instance, methodName, propertiesToInclude);\n    //Undo the damage we did by changing all of its properties\n    instance.set(originalProperties);\n    return object;\n  }\n\n  /**\n   * Realizes an object's group transformation on it\n   * @private\n   * @param {FabricObject} [instance] the object to transform (gets mutated)\n   * @returns the original values of instance which were changed\n   */\n  private _realizeGroupTransformOnObject(\n    instance: FabricObject,\n  ): Partial<typeof instance> {\n    const { group } = instance;\n    if (group && isActiveSelection(group) && this._activeObject === group) {\n      const layoutProps = [\n        'angle',\n        'flipX',\n        'flipY',\n        LEFT,\n        SCALE_X,\n        SCALE_Y,\n        SKEW_X,\n        SKEW_Y,\n        TOP,\n      ] as (keyof typeof instance)[];\n      const originalValues = pick<typeof instance>(instance, layoutProps);\n      addTransformToObject(instance, group.calcOwnMatrix());\n      return originalValues;\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    // If the object is in a selection group, simulate what would happen to that\n    // object when the group is deselected\n    const originalProperties = this._realizeGroupTransformOnObject(instance);\n    super._setSVGObject(markup, instance, reviver);\n    instance.set(originalProperties);\n  }\n}\n","import type { ModifierKey, TOptionalModifierKey } from '../EventTypeDefs';\nimport type { TOptions } from '../typedefs';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\n\nexport interface CanvasTransformOptions {\n  /**\n   * When true, objects can be transformed by one side (unproportionately)\n   * when dragged on the corners that normally would not do that.\n   * @type Boolean\n   * @default\n   * @since fabric 4.0 // changed name and default value\n   */\n  uniformScaling: boolean;\n\n  /**\n   * Indicates which key switches uniform scaling.\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * totally wrong named. this sounds like `uniform scaling`\n   * if Canvas.uniformScaling is true, pressing this will set it to false\n   * and viceversa.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  uniScaleKey: TOptionalModifierKey;\n\n  /**\n   * When true, objects use center point as the origin of scale transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredScaling: boolean;\n\n  /**\n   * When true, objects use center point as the origin of rotate transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredRotation: boolean;\n\n  /**\n   * Indicates which key enable centered Transform\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  centeredKey: TOptionalModifierKey;\n\n  /**\n   * Indicates which key enable alternate action on corner\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  altActionKey: TOptionalModifierKey;\n}\n\nexport interface CanvasSelectionOptions {\n  /**\n   * Indicates whether group selection should be enabled\n   * @type Boolean\n   * @default\n   */\n  selection: boolean;\n\n  /**\n   * Indicates which key or keys enable multiple click selection\n   * Pass value as a string or array of strings\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or empty or containing any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.2\n   * @type ModifierKey|ModifierKey[]\n   * @default\n   */\n  selectionKey: TOptionalModifierKey | ModifierKey[];\n\n  /**\n   * Indicates which key enable alternative selection\n   * in case of target overlapping with active object\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * For a series of reason that come from the general expectations on how\n   * things should work, this feature works only for preserveObjectStacking true.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.5\n   * @type null|ModifierKey\n   * @default\n   */\n  altSelectionKey: TOptionalModifierKey;\n\n  /**\n   * Color of selection\n   * @type String\n   * @default\n   */\n  selectionColor: string;\n\n  /**\n   * Default dash array pattern\n   * If not empty the selection border is dashed\n   * @type Array\n   */\n  selectionDashArray: number[];\n\n  /**\n   * Color of the border of selection (usually slightly darker than color of selection itself)\n   * @type String\n   * @default\n   */\n  selectionBorderColor: string;\n\n  /**\n   * Width of a line used in object/group selection\n   * @type Number\n   * @default\n   */\n  selectionLineWidth: number;\n\n  /**\n   * Select only shapes that are fully contained in the dragged selection rectangle.\n   * @type Boolean\n   * @default\n   */\n  selectionFullyContained: boolean;\n}\n\nexport interface CanvasCursorOptions {\n  /**\n   * Default cursor value used when hovering over an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  hoverCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used when moving an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  moveCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used for the entire canvas\n   * @type String\n   * @default default\n   */\n  defaultCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used during free drawing\n   * @type String\n   * @default crosshair\n   */\n  freeDrawingCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used for disabled elements ( corners with disabled action )\n   * @type String\n   * @since 2.0.0\n   * @default not-allowed\n   */\n  notAllowedCursor: CSSStyleDeclaration['cursor'];\n}\n\nexport interface TargetFindOptions {\n  /**\n   * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n   * @type Boolean\n   * @default\n   */\n  perPixelTargetFind: boolean;\n\n  /**\n   * Number of pixels around target pixel to tolerate (consider active) during object detection\n   * @type Number\n   * @default\n   */\n  targetFindTolerance: number;\n\n  /**\n   * When true, target detection is skipped. Target detection will return always undefined.\n   * click selection won't work anymore, events will fire with no targets.\n   * if something is selected before setting it to true, it will be deselected at the first click.\n   * area selection will still work. check the `selection` property too.\n   * if you deactivate both, you should look into staticCanvas.\n   * @type Boolean\n   * @default\n   */\n  skipTargetFind: boolean;\n}\n\nexport interface CanvasEventsOptions {\n  /**\n   * Indicates if the right click on canvas can output the context menu or not\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  stopContextMenu: boolean;\n\n  /**\n   * Indicates if the canvas can fire right click events\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  fireRightClick: boolean;\n\n  /**\n   * Indicates if the canvas can fire middle click events\n   * @type Boolean\n   * @since 1.7.8\n   * @default\n   */\n  fireMiddleClick: boolean;\n\n  /**\n   * When the option is enabled, PointerEvent is used instead of TPointerEvent.\n   * @type Boolean\n   * @default\n   */\n  enablePointerEvents: boolean;\n}\n\nexport interface CanvasOptions\n  extends StaticCanvasOptions,\n    CanvasTransformOptions,\n    CanvasSelectionOptions,\n    CanvasCursorOptions,\n    TargetFindOptions,\n    CanvasEventsOptions {\n  /**\n   * Default element class that's given to wrapper (div) element of canvas\n   * @type String\n   * @default\n   * @deprecated customize {@link CanvasDOMManager} instead or access {@link elements} directly\n   */\n  containerClass: string;\n\n  /**\n   * Indicates whether objects should remain in current stack position when selected.\n   * When false objects are brought to top and rendered as part of the selection group\n   * @type Boolean\n   * @default\n   */\n  preserveObjectStacking: boolean;\n}\n\nexport type TCanvasOptions = TOptions<CanvasOptions>;\n\nexport const canvasDefaults: TOptions<CanvasOptions> = {\n  uniformScaling: true,\n  uniScaleKey: 'shiftKey',\n  centeredScaling: false,\n  centeredRotation: false,\n  centeredKey: 'altKey',\n  altActionKey: 'shiftKey',\n\n  selection: true,\n  selectionKey: 'shiftKey',\n  selectionColor: 'rgba(100, 100, 255, 0.3)',\n  selectionDashArray: [],\n  selectionBorderColor: 'rgba(255, 255, 255, 0.3)',\n  selectionLineWidth: 1,\n  selectionFullyContained: false,\n\n  hoverCursor: 'move',\n  moveCursor: 'move',\n  defaultCursor: 'default',\n  freeDrawingCursor: 'crosshair',\n  notAllowedCursor: 'not-allowed',\n\n  perPixelTargetFind: false,\n  targetFindTolerance: 0,\n  skipTargetFind: false,\n\n  stopContextMenu: false,\n  fireRightClick: false,\n  fireMiddleClick: false,\n  enablePointerEvents: false,\n\n  containerClass: 'canvas-container',\n  // turn to true for fabric 7.0\n  preserveObjectStacking: false,\n};\n","import type { TPointerEvent } from '../EventTypeDefs';\nimport type { ITextBehavior } from '../shapes/IText/ITextBehavior';\nimport { removeFromArray } from '../util/internals/removeFromArray';\nimport type { Canvas } from './Canvas';\n\n/**\n * In charge of synchronizing all interactive text instances of a canvas\n */\nexport class TextEditingManager {\n  private targets: ITextBehavior[] = [];\n  private declare target?: ITextBehavior;\n  private __disposer: VoidFunction;\n\n  constructor(canvas: Canvas) {\n    const cb = () => {\n      const { hiddenTextarea } =\n        (canvas.getActiveObject() as ITextBehavior) || {};\n      hiddenTextarea && hiddenTextarea.focus();\n    };\n    const el = canvas.upperCanvasEl;\n    el.addEventListener('click', cb);\n    this.__disposer = () => el.removeEventListener('click', cb);\n  }\n\n  exitTextEditing() {\n    this.target = undefined;\n    this.targets.forEach((target) => {\n      if (target.isEditing) {\n        target.exitEditing();\n      }\n    });\n  }\n\n  add(target: ITextBehavior) {\n    this.targets.push(target);\n  }\n\n  remove(target: ITextBehavior) {\n    this.unregister(target);\n    removeFromArray(this.targets, target);\n  }\n\n  register(target: ITextBehavior) {\n    this.target = target;\n  }\n\n  unregister(target: ITextBehavior) {\n    if (target === this.target) {\n      this.target = undefined;\n    }\n  }\n\n  onMouseMove(e: TPointerEvent) {\n    this.target?.isEditing && this.target.updateSelectionOnMouseMove(e);\n  }\n\n  clear() {\n    this.targets = [];\n    this.target = undefined;\n  }\n\n  dispose() {\n    this.clear();\n    this.__disposer();\n    // @ts-expect-error disposing\n    delete this.__disposer;\n  }\n}\n","import { classRegistry } from '../ClassRegistry';\nimport { NONE } from '../constants';\nimport type {\n  CanvasEvents,\n  DragEventData,\n  ObjectEvents,\n  TEventsExtraData,\n  TPointerEvent,\n  TPointerEventNames,\n  Transform,\n} from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\nimport type { Group } from '../shapes/Group';\nimport type { IText } from '../shapes/IText/IText';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { isTouchEvent, stopEvent } from '../util/dom_event';\nimport { getDocumentFromElement, getWindowFromElement } from '../util/dom_misc';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { isActiveSelection } from '../util/typeAssertions';\nimport type { CanvasOptions, TCanvasOptions } from './CanvasOptions';\nimport { SelectableCanvas } from './SelectableCanvas';\nimport { TextEditingManager } from './TextEditingManager';\n\nconst addEventOptions = { passive: false } as EventListenerOptions;\n\nconst getEventPoints = (canvas: Canvas, e: TPointerEvent) => {\n  const viewportPoint = canvas.getViewportPoint(e);\n  const scenePoint = canvas.getScenePoint(e);\n  return {\n    viewportPoint,\n    scenePoint,\n    pointer: viewportPoint,\n    absolutePointer: scenePoint,\n  };\n};\n\n// just to be clear, the utils are now deprecated and those are here exactly as minifier helpers\n// because el.addEventListener can't me be minified while a const yes and we use it 47 times in this file.\n// few bytes but why give it away.\nconst addListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['addEventListener']>\n) => el.addEventListener(...args);\nconst removeListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['removeEventListener']>\n) => el.removeEventListener(...args);\n\nconst syntheticEventConfig = {\n  mouse: {\n    in: 'over',\n    out: 'out',\n    targetIn: 'mouseover',\n    targetOut: 'mouseout',\n    canvasIn: 'mouse:over',\n    canvasOut: 'mouse:out',\n  },\n  drag: {\n    in: 'enter',\n    out: 'leave',\n    targetIn: 'dragenter',\n    targetOut: 'dragleave',\n    canvasIn: 'drag:enter',\n    canvasOut: 'drag:leave',\n  },\n} as const;\n\ntype TSyntheticEventContext = {\n  mouse: { e: TPointerEvent };\n  drag: DragEventData;\n};\n\nexport class Canvas extends SelectableCanvas implements CanvasOptions {\n  /**\n   * Contains the id of the touch event that owns the fabric transform\n   * @type Number\n   * @private\n   */\n  declare mainTouchId?: number;\n\n  declare enablePointerEvents: boolean;\n\n  /**\n   * Holds a reference to a setTimeout timer for event synchronization\n   * @type number\n   * @private\n   */\n  private declare _willAddMouseDown: number;\n\n  /**\n   * Holds a reference to an object on the canvas that is receiving the drag over event.\n   * @type FabricObject\n   * @private\n   */\n  private declare _draggedoverTarget?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas from where the drag operation started\n   * @type FabricObject\n   * @private\n   */\n  private declare _dragSource?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas that is the current drop target\n   * May differ from {@link _draggedoverTarget}\n   * @todo inspect whether {@link _draggedoverTarget} and {@link _dropTarget} should be merged somehow\n   * @type FabricObject\n   * @private\n   */\n  private declare _dropTarget: FabricObject<ObjectEvents> | undefined;\n\n  /**\n   * a boolean that keeps track of the click state during a cycle of mouse down/up.\n   * If a mouse move occurs it becomes false.\n   * Is true by default, turns false on mouse move.\n   * Used to determine if a mouseUp is a click\n   */\n  private _isClick: boolean;\n\n  textEditingManager = new TextEditingManager(this);\n\n  constructor(el?: string | HTMLCanvasElement, options: TCanvasOptions = {}) {\n    super(el, options);\n    // bind event handlers\n    (\n      [\n        '_onMouseDown',\n        '_onTouchStart',\n        '_onMouseMove',\n        '_onMouseUp',\n        '_onTouchEnd',\n        '_onResize',\n        // '_onGesture',\n        // '_onDrag',\n        // '_onShake',\n        // '_onLongPress',\n        // '_onOrientationChange',\n        '_onMouseWheel',\n        '_onMouseOut',\n        '_onMouseEnter',\n        '_onContextMenu',\n        '_onClick',\n        '_onDragStart',\n        '_onDragEnd',\n        '_onDragProgress',\n        '_onDragOver',\n        '_onDragEnter',\n        '_onDragLeave',\n        '_onDrop',\n      ] as (keyof this)[]\n    ).forEach((eventHandler) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n      this[eventHandler] = (this[eventHandler] as Function).bind(this);\n    });\n    // register event handlers\n    this.addOrRemove(addListener, 'add');\n  }\n\n  /**\n   * return an event prefix pointer or mouse.\n   * @private\n   */\n  private _getEventPrefix() {\n    return this.enablePointerEvents ? 'pointer' : 'mouse';\n  }\n\n  addOrRemove(functor: any, _eventjsFunctor: 'add' | 'remove') {\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    functor(getWindowFromElement(canvasElement), 'resize', this._onResize);\n    functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n    functor(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove,\n      addEventOptions,\n    );\n    functor(canvasElement, `${eventTypePrefix}out`, this._onMouseOut);\n    functor(canvasElement, `${eventTypePrefix}enter`, this._onMouseEnter);\n    functor(canvasElement, 'wheel', this._onMouseWheel);\n    functor(canvasElement, 'contextmenu', this._onContextMenu);\n    functor(canvasElement, 'click', this._onClick);\n    // decide if to remove in fabric 7.0\n    functor(canvasElement, 'dblclick', this._onClick);\n    functor(canvasElement, 'dragstart', this._onDragStart);\n    functor(canvasElement, 'dragend', this._onDragEnd);\n    functor(canvasElement, 'dragover', this._onDragOver);\n    functor(canvasElement, 'dragenter', this._onDragEnter);\n    functor(canvasElement, 'dragleave', this._onDragLeave);\n    functor(canvasElement, 'drop', this._onDrop);\n    if (!this.enablePointerEvents) {\n      functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\n    }\n    // if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n    //   eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\n    //   eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\n    //   eventjs[eventjsFunctor](\n    //     canvasElement,\n    //     'orientation',\n    //     this._onOrientationChange\n    //   );\n    //   eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\n    //   eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\n    // }\n  }\n\n  /**\n   * Removes all event listeners, used when disposing the instance\n   */\n  removeListeners() {\n    this.addOrRemove(removeListener, 'remove');\n    // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      `${eventTypePrefix}up`,\n      this._onMouseUp as EventListener,\n    );\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    clearTimeout(this._willAddMouseDown);\n  }\n\n  /**\n   * @private\n   * @param {Event} [e] Event object fired on wheel event\n   */\n  private _onMouseWheel(e: MouseEvent) {\n    this.__onMouseWheel(e);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onMouseOut(e: TPointerEvent) {\n    const target = this._hoveredTarget;\n    const shared = {\n      e,\n      ...getEventPoints(this, e),\n    };\n    this.fire('mouse:out', { ...shared, target });\n    this._hoveredTarget = undefined;\n    target && target.fire('mouseout', { ...shared });\n    this._hoveredTargets.forEach((nestedTarget) => {\n      this.fire('mouse:out', { ...shared, target: nestedTarget });\n      nestedTarget && nestedTarget.fire('mouseout', { ...shared });\n    });\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseenter\n   */\n  private _onMouseEnter(e: TPointerEvent) {\n    // This find target and consequent 'mouse:over' is used to\n    // clear old instances on hovered target.\n    // calling findTarget has the side effect of killing target.__corner.\n    // as a short term fix we are not firing this if we are currently transforming.\n    // as a long term fix we need to separate the action of finding a target with the\n    // side effects we added to it.\n    if (!this._currentTransform && !this.findTarget(e)) {\n      this.fire('mouse:over', {\n        e,\n        ...getEventPoints(this, e),\n      });\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n  }\n\n  /**\n   * supports native like text dragging\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragStart(e: DragEvent) {\n    this._isClick = false;\n    const activeObject = this.getActiveObject();\n    if (activeObject && activeObject.onDragStart(e)) {\n      this._dragSource = activeObject;\n      const options = { e, target: activeObject };\n      this.fire('dragstart', options);\n      activeObject.fire('dragstart', options);\n      addListener(\n        this.upperCanvasEl,\n        'drag',\n        this._onDragProgress as EventListener,\n      );\n      return;\n    }\n    stopEvent(e);\n  }\n\n  /**\n   * First we clear top context where the effects are being rendered.\n   * Then we render the effects.\n   * Doing so will render the correct effect for all cases including an overlap between `source` and `target`.\n   * @private\n   */\n  private _renderDragEffects(\n    e: DragEvent,\n    source?: FabricObject,\n    target?: FabricObject,\n  ) {\n    let dirty = false;\n    // clear top context\n    const dropTarget = this._dropTarget;\n    if (dropTarget && dropTarget !== source && dropTarget !== target) {\n      dropTarget.clearContextTop();\n      dirty = true;\n    }\n    source?.clearContextTop();\n    target !== source && target?.clearContextTop();\n    // render effects\n    const ctx = this.contextTop;\n    ctx.save();\n    ctx.transform(...this.viewportTransform);\n    if (source) {\n      ctx.save();\n      source.transform(ctx);\n      source.renderDragSourceEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    if (target) {\n      ctx.save();\n      target.transform(ctx);\n      target.renderDropTargetEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    ctx.restore();\n    dirty && (this.contextTopDirty = true);\n  }\n\n  /**\n   * supports native like text dragging\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragEnd(e: DragEvent) {\n    const didDrop = !!e.dataTransfer && e.dataTransfer.dropEffect !== NONE,\n      dropTarget = didDrop ? this._activeObject : undefined,\n      options = {\n        e,\n        target: this._dragSource as FabricObject,\n        subTargets: this.targets,\n        dragSource: this._dragSource as FabricObject,\n        didDrop,\n        dropTarget: dropTarget as FabricObject,\n      };\n    removeListener(\n      this.upperCanvasEl,\n      'drag',\n      this._onDragProgress as EventListener,\n    );\n    this.fire('dragend', options);\n    this._dragSource && this._dragSource.fire('dragend', options);\n    delete this._dragSource;\n    // we need to call mouse up synthetically because the browser won't\n    this._onMouseUp(e);\n  }\n\n  /**\n   * fire `drag` event on canvas and drag source\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragProgress(e: DragEvent) {\n    const options = {\n      e,\n      target: this._dragSource as FabricObject | undefined,\n      dragSource: this._dragSource as FabricObject | undefined,\n      dropTarget: this._draggedoverTarget as FabricObject,\n    };\n    this.fire('drag', options);\n    this._dragSource && this._dragSource.fire('drag', options);\n  }\n\n  /**\n   * As opposed to {@link findTarget} we want the top most object to be returned w/o the active object cutting in line.\n   * Override at will\n   */\n  protected findDragTargets(e: DragEvent) {\n    this.targets = [];\n    const target = this._searchPossibleTargets(\n      this._objects,\n      this.getViewportPoint(e),\n    );\n    return {\n      target,\n      targets: [...this.targets],\n    };\n  }\n\n  /**\n   * prevent default to allow drop event to be fired\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#specifying_drop_targets\n   * @private\n   * @param {DragEvent} [e] Event object fired on Event.js shake\n   */\n  private _onDragOver(e: DragEvent) {\n    const eventType = 'dragover';\n    const { target, targets } = this.findDragTargets(e);\n    const dragSource = this._dragSource as FabricObject;\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource,\n      canDrop: false,\n      dropTarget: undefined,\n    };\n    let dropTarget;\n    //  fire on canvas\n    this.fire(eventType, options);\n    //  make sure we fire dragenter events before dragover\n    //  if dragleave is needed, object will not fire dragover so we don't need to trouble ourselves with it\n    this._fireEnterLeaveEvents(target, options);\n    if (target) {\n      if (target.canDrop(e)) {\n        dropTarget = target;\n      }\n      target.fire(eventType, options);\n    }\n    //  propagate the event to subtargets\n    for (let i = 0; i < targets.length; i++) {\n      const subTarget = targets[i];\n      // accept event only if previous targets didn't (the accepting target calls `preventDefault` to inform that the event is taken)\n      // TODO: verify if those should loop in inverse order then?\n      // what is the order of subtargets?\n      if (subTarget.canDrop(e)) {\n        dropTarget = subTarget;\n      }\n      subTarget.fire(eventType, options);\n    }\n    //  render drag effects now that relations between source and target is clear\n    this._renderDragEffects(e, dragSource, dropTarget);\n    this._dropTarget = dropTarget;\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragEnter(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragenter', options);\n    //  fire dragenter on targets\n    this._fireEnterLeaveEvents(target, options);\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragLeave(e: DragEvent) {\n    const options = {\n      e,\n      target: this._draggedoverTarget,\n      subTargets: this.targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragleave', options);\n\n    //  fire dragleave on targets\n    this._fireEnterLeaveEvents(undefined, options);\n    this._renderDragEffects(e, this._dragSource);\n    this._dropTarget = undefined;\n    //  clear targets\n    this.targets = [];\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * `drop:before` is a an event that allows you to schedule logic\n   * before the `drop` event. Prefer `drop` event always, but if you need\n   * to run some drop-disabling logic on an event, since there is no way\n   * to handle event handlers ordering, use `drop:before`\n   * @private\n   * @param {Event} e\n   */\n  private _onDrop(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = this._basicEventHandler('drop:before', {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n      ...getEventPoints(this, e),\n    });\n    //  will be set by the drop target\n    options.didDrop = false;\n    //  will be set by the drop target, used in case options.target refuses the drop\n    options.dropTarget = undefined;\n    //  fire `drop`\n    this._basicEventHandler('drop', options);\n    //  inform canvas of the drop\n    //  we do this because canvas was unaware of what happened at the time the `drop` event was fired on it\n    //  use for side effects\n    this.fire('drop:after', options);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onContextMenu(e: TPointerEvent): false {\n    const target = this.findTarget(e),\n      subTargets = this.targets || [];\n    const options = this._basicEventHandler('contextmenu:before', {\n      e,\n      target,\n      subTargets,\n    });\n    // TODO: this line is silly because the dev can subscribe to the event and prevent it themselves\n    this.stopContextMenu && stopEvent(e);\n    this._basicEventHandler('contextmenu', options);\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onClick(e: TPointerEvent) {\n    const clicks = e.detail;\n    if (clicks > 3 || clicks < 2) return;\n    this._cacheTransformEventData(e);\n    clicks == 2 && e.type === 'dblclick' && this._handleEvent(e, 'dblclick');\n    clicks == 3 && this._handleEvent(e, 'tripleclick');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Return a the id of an event.\n   * returns either the pointerId or the identifier or 0 for the mouse event\n   * @private\n   * @param {Event} evt Event object\n   */\n  getPointerId(evt: TouchEvent | PointerEvent): number {\n    const changedTouches = (evt as TouchEvent).changedTouches;\n\n    if (changedTouches) {\n      return changedTouches[0] && changedTouches[0].identifier;\n    }\n\n    if (this.enablePointerEvents) {\n      return (evt as PointerEvent).pointerId;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines if an event has the id of the event that is considered main\n   * @private\n   * @param {evt} event Event object\n   */\n  _isMainEvent(evt: TPointerEvent): boolean {\n    if ((evt as PointerEvent).isPrimary === true) {\n      return true;\n    }\n    if ((evt as PointerEvent).isPrimary === false) {\n      return false;\n    }\n    if (evt.type === 'touchend' && (evt as TouchEvent).touches.length === 0) {\n      return true;\n    }\n    if ((evt as TouchEvent).changedTouches) {\n      return (\n        (evt as TouchEvent).changedTouches[0].identifier === this.mainTouchId\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchStart(e: TouchEvent) {\n    // we will prevent scrolling if allowTouchScrolling is not enabled and\n    let shouldPreventScrolling = !this.allowTouchScrolling;\n    const currentActiveObject = this._activeObject;\n    if (this.mainTouchId === undefined) {\n      this.mainTouchId = this.getPointerId(e);\n    }\n    this.__onMouseDown(e);\n    // after executing fabric logic for mouse down let's see\n    // if we didn't change target or if we are drawing\n    // we want to prevent scrolling anyway\n    if (\n      this.isDrawingMode ||\n      (currentActiveObject && this._target === currentActiveObject)\n    ) {\n      shouldPreventScrolling = true;\n    }\n    // prevent default, will block scrolling from start\n    shouldPreventScrolling && e.preventDefault();\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    // if we scroll don't register the touch move event\n    shouldPreventScrolling &&\n      addListener(\n        doc,\n        'touchmove',\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    // Unbind mousedown to prevent double triggers from touch devices\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}down`,\n      this._onMouseDown as EventListener,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDown(e: TPointerEvent) {\n    this.__onMouseDown(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(doc, `${eventTypePrefix}up`, this._onMouseUp as EventListener);\n    addListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchEnd(e: TouchEvent) {\n    if (e.touches.length > 0) {\n      // if there are still touches stop here\n      return;\n    }\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    delete this.mainTouchId;\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    if (this._willAddMouseDown) {\n      clearTimeout(this._willAddMouseDown);\n    }\n    this._willAddMouseDown = setTimeout(() => {\n      // Wait 400ms before rebinding mousedown to prevent double triggers\n      // from touch devices\n      addListener(\n        this.upperCanvasEl,\n        `${eventTypePrefix}down`,\n        this._onMouseDown as EventListener,\n      );\n      this._willAddMouseDown = 0;\n    }, 400) as unknown as number;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUp(e: TPointerEvent) {\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    if (this._isMainEvent(e)) {\n      const doc = getDocumentFromElement(this.upperCanvasEl);\n      removeListener(\n        doc,\n        `${eventTypePrefix}up`,\n        this._onMouseUp as EventListener,\n      );\n      removeListener(\n        doc,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n      addListener(\n        canvasElement,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMove(e: TPointerEvent) {\n    const activeObject = this.getActiveObject();\n    !this.allowTouchScrolling &&\n      (!activeObject ||\n        // a drag event sequence is started by the active object flagging itself on mousedown / mousedown:before\n        // we must not prevent the event's default behavior in order for the window to start dragging\n        !activeObject.shouldStartDragging(e)) &&\n      e.preventDefault &&\n      e.preventDefault();\n    this.__onMouseMove(e);\n  }\n\n  /**\n   * @private\n   */\n  _onResize() {\n    this.calcOffset();\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n   * @private\n   * @param {Object} target\n   */\n  _shouldRender(target: FabricObject | undefined) {\n    const activeObject = this.getActiveObject();\n    // if just one of them is available or if they are both but are different objects\n    // this covers: switch of target, from target to no target, selection of target\n    // multiSelection with key and mouse\n    return (\n      !!activeObject !== !!target ||\n      (activeObject && target && activeObject !== target)\n    );\n  }\n\n  /**\n   * Method that defines the actions when mouse is released on canvas.\n   * The method resets the currentTransform parameters, store the image corner\n   * position in the image object and render the canvas on top.\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseUp(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'up:before');\n\n    const transform = this._currentTransform;\n    const isClick = this._isClick;\n    const target = this._target;\n\n    // if right/middle click just fire events and return\n    // target undefined will make the _handleEvent search the target\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'up');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this._onMouseUpInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n    let shouldRender = false;\n    if (transform) {\n      this._finalizeCurrentTransform(e);\n      shouldRender = transform.actionPerformed;\n    }\n    if (!isClick) {\n      const targetWasActive = target === this._activeObject;\n      this.handleSelection(e);\n      if (!shouldRender) {\n        shouldRender =\n          this._shouldRender(target) ||\n          (!targetWasActive && target === this._activeObject);\n      }\n    }\n    let pointer, corner;\n    if (target) {\n      const found = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      const { key, control } = found || {};\n      corner = key;\n      if (\n        target.selectable &&\n        target !== this._activeObject &&\n        target.activeOn === 'up'\n      ) {\n        this.setActiveObject(target, e);\n        shouldRender = true;\n      } else if (control) {\n        const mouseUpHandler = control.getMouseUpHandler(e, target, control);\n        if (mouseUpHandler) {\n          pointer = this.getScenePoint(e);\n          mouseUpHandler.call(control, e, transform!, pointer.x, pointer.y);\n        }\n      }\n      target.isMoving = false;\n    }\n    // if we are ending up a transform on a different control or a new object\n    // fire the original mouse up from the corner that started the transform\n    if (\n      transform &&\n      (transform.target !== target || transform.corner !== corner)\n    ) {\n      const originalControl =\n          transform.target && transform.target.controls[transform.corner],\n        originalMouseUpHandler =\n          originalControl &&\n          originalControl.getMouseUpHandler(\n            e,\n            transform.target,\n            originalControl,\n          );\n      pointer = pointer || this.getScenePoint(e);\n      originalMouseUpHandler &&\n        originalMouseUpHandler.call(\n          originalControl,\n          e,\n          transform,\n          pointer.x,\n          pointer.y,\n        );\n    }\n    this._setCursorFromEvent(e, target);\n    this._handleEvent(e, 'up');\n    this._groupSelector = null;\n    this._currentTransform = null;\n    // reset the target information about which corner is selected\n    target && (target.__corner = undefined);\n    if (shouldRender) {\n      this.requestRenderAll();\n    } else if (!isClick && !(this._activeObject as IText)?.isEditing) {\n      this.renderTop();\n    }\n  }\n\n  _basicEventHandler<T extends keyof (CanvasEvents | ObjectEvents)>(\n    eventType: T,\n    options: (CanvasEvents & ObjectEvents)[T],\n  ) {\n    const { target, subTargets = [] } = options as {\n      target?: FabricObject;\n      subTargets: FabricObject[];\n    };\n    this.fire(eventType, options);\n    target && target.fire(eventType, options);\n    for (let i = 0; i < subTargets.length; i++) {\n      subTargets[i] !== target && subTargets[i].fire(eventType, options);\n    }\n    return options;\n  }\n\n  /**\n   * @private\n   * Handle event firing for target and subtargets\n   * @param {TPointerEvent} e event from mouse\n   * @param {TPointerEventNames} eventType\n   */\n  _handleEvent<T extends TPointerEventNames>(\n    e: TPointerEvent,\n    eventType: T,\n    extraData?: TEventsExtraData[T],\n  ) {\n    const target = this._target,\n      targets = this.targets || [],\n      options: CanvasEvents[`mouse:${T}`] = {\n        e,\n        target,\n        subTargets: targets,\n        ...getEventPoints(this, e),\n        transform: this._currentTransform,\n        ...(eventType === 'up:before' || eventType === 'up'\n          ? {\n              isClick: this._isClick,\n              currentTarget: this.findTarget(e),\n              // set by the preceding `findTarget` call\n              currentSubTargets: this.targets,\n            }\n          : {}),\n        ...(eventType === 'down:before' || eventType === 'down'\n          ? extraData\n          : {}),\n      } as CanvasEvents[`mouse:${T}`];\n    this.fire(`mouse:${eventType}`, options);\n    // this may be a little be more complicated of what we want to handle\n    target && target.fire(`mouse${eventType}`, options);\n    for (let i = 0; i < targets.length; i++) {\n      targets[i] !== target && targets[i].fire(`mouse${eventType}`, options);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDownInDrawingMode(e: TPointerEvent) {\n    this._isCurrentlyDrawing = true;\n    if (this.getActiveObject()) {\n      this.discardActiveObject(e);\n      this.requestRenderAll();\n    }\n    // TODO: this is a scene point so it should be renamed\n    const pointer = this.getScenePoint(e);\n    this.freeDrawingBrush &&\n      this.freeDrawingBrush.onMouseDown(pointer, { e, pointer });\n    this._handleEvent(e, 'down', { alreadySelected: false });\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMoveInDrawingMode(e: TPointerEvent) {\n    if (this._isCurrentlyDrawing) {\n      const pointer = this.getScenePoint(e);\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush.onMouseMove(pointer, {\n          e,\n          // this is an absolute pointer, the naming is wrong\n          pointer,\n        });\n    }\n    this.setCursor(this.freeDrawingCursor);\n    this._handleEvent(e, 'move');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUpInDrawingMode(e: TPointerEvent) {\n    const pointer = this.getScenePoint(e);\n    if (this.freeDrawingBrush) {\n      this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n        e: e,\n        // this is an absolute pointer, the naming is wrong\n        pointer,\n      });\n    } else {\n      this._isCurrentlyDrawing = false;\n    }\n    this._handleEvent(e, 'up');\n  }\n\n  /**\n   * Method that defines the actions when mouse is clicked on canvas.\n   * The method inits the currentTransform parameters and renders all the\n   * canvas so the current image can be placed on the top canvas and the rest\n   * in on the container one.\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  __onMouseDown(e: TPointerEvent) {\n    this._isClick = true;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'down:before');\n\n    let target: FabricObject | undefined = this._target;\n    let alreadySelected = !!target && target === this._activeObject;\n    // if right/middle click just fire events\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'down', {\n          alreadySelected,\n        });\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode) {\n      this._onMouseDownInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    // ignore if some object is being transformed at this moment\n    if (this._currentTransform) {\n      return;\n    }\n\n    let shouldRender = this._shouldRender(target);\n    let grouped = false;\n    if (this.handleMultiSelection(e, target)) {\n      // active object might have changed while grouping\n      target = this._activeObject;\n      grouped = true;\n      shouldRender = true;\n    } else if (this._shouldClearSelection(e, target)) {\n      this.discardActiveObject(e);\n    }\n    // we start a group selector rectangle if\n    // selection is enabled\n    // and there is no target, or the following 3 conditions are satisfied:\n    // target is not selectable ( otherwise we selected it )\n    // target is not editing\n    // target is not already selected ( otherwise we drag )\n    if (\n      this.selection &&\n      (!target ||\n        (!target.selectable &&\n          !(target as IText).isEditing &&\n          target !== this._activeObject))\n    ) {\n      const p = this.getScenePoint(e);\n      this._groupSelector = {\n        x: p.x,\n        y: p.y,\n        deltaY: 0,\n        deltaX: 0,\n      };\n    }\n\n    // check again because things could have changed\n    alreadySelected = !!target && target === this._activeObject;\n    if (target) {\n      if (target.selectable && target.activeOn === 'down') {\n        this.setActiveObject(target, e);\n      }\n      const handle = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      if (target === this._activeObject && (handle || !grouped)) {\n        this._setupCurrentTransform(e, target, alreadySelected);\n        const control = handle ? handle.control : undefined,\n          pointer = this.getScenePoint(e),\n          mouseDownHandler =\n            control && control.getMouseDownHandler(e, target, control);\n        mouseDownHandler &&\n          mouseDownHandler.call(\n            control,\n            e,\n            this._currentTransform!,\n            pointer.x,\n            pointer.y,\n          );\n      }\n    }\n    //  we clear `_objectsToRender` in case of a change in order to repopulate it at rendering\n    //  run before firing the `down` event to give the dev a chance to populate it themselves\n    shouldRender && (this._objectsToRender = undefined);\n    this._handleEvent(e, 'down', { alreadySelected: alreadySelected });\n    // we must renderAll so that we update the visuals\n    shouldRender && this.requestRenderAll();\n  }\n\n  /**\n   * reset cache form common information needed during event processing\n   * @private\n   */\n  _resetTransformEventData() {\n    this._target = this._pointer = this._absolutePointer = undefined;\n  }\n\n  /**\n   * Cache common information needed during event processing\n   * @private\n   * @param {Event} e Event object fired on event\n   */\n  _cacheTransformEventData(e: TPointerEvent) {\n    // reset in order to avoid stale caching\n    this._resetTransformEventData();\n    this._pointer = this.getViewportPoint(e);\n    this._absolutePointer = sendPointToPlane(\n      this._pointer,\n      undefined,\n      this.viewportTransform,\n    );\n    this._target = this._currentTransform\n      ? this._currentTransform.target\n      : this.findTarget(e);\n  }\n\n  /**\n   * Method that defines the actions when mouse is hovering the canvas.\n   * The currentTransform parameter will define whether the user is rotating/scaling/translating\n   * an image or neither of them (only hovering). A group selection is also possible and would cancel\n   * all any other type of action.\n   * In case of an image transformation only the top canvas will be rendered.\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  __onMouseMove(e: TPointerEvent) {\n    this._isClick = false;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'move:before');\n\n    if (this.isDrawingMode) {\n      this._onMouseMoveInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    const groupSelector = this._groupSelector;\n\n    // We initially clicked in an empty area, so we draw a box for multiple selection\n    if (groupSelector) {\n      const pointer = this.getScenePoint(e);\n\n      groupSelector.deltaX = pointer.x - groupSelector.x;\n      groupSelector.deltaY = pointer.y - groupSelector.y;\n\n      this.renderTop();\n    } else if (!this._currentTransform) {\n      const target = this.findTarget(e);\n      this._setCursorFromEvent(e, target);\n      this._fireOverOutEvents(e, target);\n    } else {\n      this._transformObject(e);\n    }\n    this.textEditingManager.onMouseMove(e);\n    this._handleEvent(e, 'move');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Manage the mouseout, mouseover events for the fabric object on the canvas\n   * @param {Fabric.Object} target the target where the target from the mousemove event\n   * @param {Event} e Event object fired on mousemove\n   * @private\n   */\n  _fireOverOutEvents(e: TPointerEvent, target?: FabricObject) {\n    const _hoveredTarget = this._hoveredTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('mouse', {\n      e,\n      target,\n      oldTarget: _hoveredTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('mouse', {\n        e,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._hoveredTarget = target;\n    this._hoveredTargets = this.targets.concat();\n  }\n\n  /**\n   * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the onDrag event\n   * @param {Object} data Event object fired on dragover\n   * @private\n   */\n  _fireEnterLeaveEvents(target: FabricObject | undefined, data: DragEventData) {\n    const draggedoverTarget = this._draggedoverTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('drag', {\n      ...data,\n      target,\n      oldTarget: draggedoverTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('drag', {\n        ...data,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._draggedoverTarget = target;\n  }\n\n  /**\n   * Manage the synthetic in/out events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the supported events\n   * @param {Object} data Event object fired\n   * @param {Object} config configuration for the function to work\n   * @param {String} config.targetName property on the canvas where the old target is stored\n   * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n   * @param {String} config.evtOut name of the event to fire for out\n   * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n   * @param {String} config.evtIn name of the event to fire for in\n   * @private\n   */\n  fireSyntheticInOutEvents<T extends keyof TSyntheticEventContext>(\n    type: T,\n    {\n      target,\n      oldTarget,\n      fireCanvas,\n      e,\n      ...data\n    }: TSyntheticEventContext[T] & {\n      target?: FabricObject;\n      oldTarget?: FabricObject;\n      fireCanvas?: boolean;\n    },\n  ) {\n    const { targetIn, targetOut, canvasIn, canvasOut } =\n      syntheticEventConfig[type];\n    const targetChanged = oldTarget !== target;\n\n    if (oldTarget && targetChanged) {\n      const outOpt: CanvasEvents[typeof canvasOut] = {\n        ...data,\n        e,\n        target: oldTarget,\n        nextTarget: target,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasOut, outOpt);\n      oldTarget.fire(targetOut, outOpt);\n    }\n    if (target && targetChanged) {\n      const inOpt: CanvasEvents[typeof canvasIn] = {\n        ...data,\n        e,\n        target,\n        previousTarget: oldTarget,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasIn, inOpt);\n      target.fire(targetIn, inOpt);\n    }\n  }\n\n  /**\n   * Method that defines actions when an Event Mouse Wheel\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseWheel(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'wheel');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event fired on mousemove\n   */\n  _transformObject(e: TPointerEvent) {\n    const scenePoint = this.getScenePoint(e),\n      transform = this._currentTransform!,\n      target = transform.target,\n      //  transform pointer to target's containing coordinate plane\n      //  both pointer and object should agree on every point\n      localPointer = target.group\n        ? sendPointToPlane(\n            scenePoint,\n            undefined,\n            target.group.calcTransformMatrix(),\n          )\n        : scenePoint;\n    transform.shiftKey = e.shiftKey;\n    transform.altKey = !!this.centeredKey && e[this.centeredKey];\n\n    this._performTransformAction(e, transform, localPointer);\n    transform.actionPerformed && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   */\n  _performTransformAction(\n    e: TPointerEvent,\n    transform: Transform,\n    pointer: Point,\n  ) {\n    const { action, actionHandler, target } = transform;\n\n    const actionPerformed =\n      !!actionHandler && actionHandler(e, transform, pointer.x, pointer.y);\n    actionPerformed && target.setCoords();\n\n    // this object could be created from the function in the control handlers\n    if (action === 'drag' && actionPerformed) {\n      transform.target.isMoving = true;\n      this.setCursor(transform.target.moveCursor || this.moveCursor);\n    }\n    transform.actionPerformed = transform.actionPerformed || actionPerformed;\n  }\n\n  /**\n   * Sets the cursor depending on where the canvas is being hovered.\n   * Note: very buggy in Opera\n   * @param {Event} e Event object\n   * @param {Object} target Object that the mouse is hovering, if so.\n   */\n  _setCursorFromEvent(e: TPointerEvent, target?: FabricObject) {\n    if (!target) {\n      this.setCursor(this.defaultCursor);\n      return;\n    }\n    let hoverCursor = target.hoverCursor || this.hoverCursor;\n    const activeSelection = isActiveSelection(this._activeObject)\n        ? this._activeObject\n        : null,\n      // only show proper corner when group selection is not active\n      corner =\n        (!activeSelection || target.group !== activeSelection) &&\n        // here we call findTargetCorner always with undefined for the touch parameter.\n        // we assume that if you are using a cursor you do not need to interact with\n        // the bigger touch area.\n        target.findControl(this.getViewportPoint(e));\n\n    if (!corner) {\n      if ((target as Group).subTargetCheck) {\n        // hoverCursor should come from top-most subTarget,\n        // so we walk the array backwards\n        this.targets\n          .concat()\n          .reverse()\n          .map((_target) => {\n            hoverCursor = _target.hoverCursor || hoverCursor;\n          });\n      }\n      this.setCursor(hoverCursor);\n    } else {\n      const control = corner.control;\n      this.setCursor(control.cursorStyleHandler(e, control, target));\n    }\n  }\n\n  /**\n   * ## Handles multiple selection\n   * - toggles `target` selection (selects/deselects `target` if it isn't/is selected respectively)\n   * - sets the active object in case it is not set or in case there is a single active object left under active selection.\n   * ---\n   * - If the active object is the active selection we add/remove `target` from it\n   * - If not, add the active object and `target` to the active selection and make it the active object.\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target target of event to select/deselect\n   * @returns true if grouping occurred\n   */\n  protected handleMultiSelection(e: TPointerEvent, target?: FabricObject) {\n    const activeObject = this._activeObject;\n    const isAS = isActiveSelection(activeObject);\n    if (\n      // check if an active object exists on canvas and if the user is pressing the `selectionKey` while canvas supports multi selection.\n      !!activeObject &&\n      this._isSelectionKeyPressed(e) &&\n      this.selection &&\n      // on top of that the user also has to hit a target that is selectable.\n      !!target &&\n      target.selectable &&\n      // group target and active object only if they are different objects\n      // else we try to find a subtarget of `ActiveSelection`\n      (activeObject !== target || isAS) &&\n      //  make sure `activeObject` and `target` aren't ancestors of each other in case `activeObject` is not `ActiveSelection`\n      // if it is then we want to remove `target` from it\n      (isAS ||\n        (!target.isDescendantOf(activeObject) &&\n          !activeObject.isDescendantOf(target))) &&\n      //  target accepts selection\n      !target.onSelect({ e }) &&\n      // make sure we are not on top of a control\n      !activeObject.getActiveControl()\n    ) {\n      if (isAS) {\n        const prevActiveObjects = activeObject.getObjects();\n        if (target === activeObject) {\n          const pointer = this.getViewportPoint(e);\n          target =\n            // first search active objects for a target to remove\n            this.searchPossibleTargets(prevActiveObjects, pointer) ||\n            //  if not found, search under active selection for a target to add\n            // `prevActiveObjects` will be searched but we already know they will not be found\n            this.searchPossibleTargets(this._objects, pointer);\n          // if nothing is found bail out\n          if (!target || !target.selectable) {\n            return false;\n          }\n        }\n        if (target.group === activeObject) {\n          // `target` is part of active selection => remove it\n          activeObject.remove(target);\n          this._hoveredTarget = target;\n          this._hoveredTargets = [...this.targets];\n          // if after removing an object we are left with one only...\n          if (activeObject.size() === 1) {\n            // activate last remaining object\n            // deselecting the active selection will remove the remaining object from it\n            this._setActiveObject(activeObject.item(0), e);\n          }\n        } else {\n          // `target` isn't part of active selection => add it\n          activeObject.multiSelectAdd(target);\n          this._hoveredTarget = activeObject;\n          this._hoveredTargets = [...this.targets];\n        }\n        this._fireSelectionEvents(prevActiveObjects, e);\n      } else {\n        (activeObject as IText).isEditing &&\n          (activeObject as IText).exitEditing();\n        // add the active object and the target to the active selection and set it as the active object\n        const klass =\n          classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n        const newActiveSelection = new klass([], {\n          /**\n           * it is crucial to pass the canvas ref before calling {@link ActiveSelection#multiSelectAdd}\n           * since it uses {@link FabricObject#isInFrontOf} which relies on the canvas ref\n           */\n          canvas: this,\n        });\n        newActiveSelection.multiSelectAdd(activeObject, target);\n        this._hoveredTarget = newActiveSelection;\n        // ISSUE 4115: should we consider subTargets here?\n        // this._hoveredTargets = [];\n        // this._hoveredTargets = this.targets.concat();\n        this._setActiveObject(newActiveSelection, e);\n        this._fireSelectionEvents([activeObject], e);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ## Handles selection\n   * - selects objects that are contained in (and possibly intersecting) the selection bounding box\n   * - sets the active object\n   * ---\n   * runs on mouse up after a mouse move\n   */\n  protected handleSelection(e: TPointerEvent) {\n    if (!this.selection || !this._groupSelector) {\n      return false;\n    }\n    const { x, y, deltaX, deltaY } = this._groupSelector,\n      point1 = new Point(x, y),\n      point2 = point1.add(new Point(deltaX, deltaY)),\n      tl = point1.min(point2),\n      br = point1.max(point2),\n      size = br.subtract(tl);\n\n    const collectedObjects = this.collectObjects(\n      {\n        left: tl.x,\n        top: tl.y,\n        width: size.x,\n        height: size.y,\n      },\n      { includeIntersecting: !this.selectionFullyContained },\n    ) as FabricObject[];\n\n    const objects =\n      // though this method runs only after mouse move the pointer could do a mouse up on the same position as mouse down\n      // should it be handled as is?\n      point1.eq(point2)\n        ? collectedObjects[0]\n          ? [collectedObjects[0]]\n          : []\n        : collectedObjects.length > 1\n          ? collectedObjects\n              .filter((object) => !object.onSelect({ e }))\n              .reverse()\n          : // `setActiveObject` will call `onSelect(collectedObjects[0])` in this case\n            collectedObjects;\n\n    // set active object\n    if (objects.length === 1) {\n      // set as active object\n      this.setActiveObject(objects[0], e);\n    } else if (objects.length > 1) {\n      // add to active selection and make it the active object\n      const klass =\n        classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n      this.setActiveObject(new klass(objects, { canvas: this }), e);\n    }\n\n    // cleanup\n    this._groupSelector = null;\n    return true;\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  clear() {\n    this.textEditingManager.clear();\n    super.clear();\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  destroy() {\n    this.removeListeners();\n    this.textEditingManager.dispose();\n    super.destroy();\n  }\n}\n","export const linearDefaultCoords = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n};\n\nexport const radialDefaultCoords = {\n  ...linearDefaultCoords,\n  r1: 0,\n  r2: 0,\n};\n","/**\n *\n * @param value value to check if NaN\n * @param [valueIfNaN]\n * @returns `fallback` is `value is NaN\n */\nexport const ifNaN = (value: number, valueIfNaN?: number) => {\n  return isNaN(value) && typeof valueIfNaN === 'number' ? valueIfNaN : value;\n};\n","import { ifNaN } from '../util/internals/ifNaN';\nimport { capValue } from '../util/misc/capValue';\n\nconst RE_PERCENT = /^(\\d+\\.\\d+)%|(\\d+)%$/;\n\nexport function isPercent(value: string | null) {\n  return value && RE_PERCENT.test(value);\n}\n\n/**\n *\n * @param value\n * @param valueIfNaN\n * @returns ∈ [0, 1]\n */\nexport function parsePercent(\n  value: string | number | null | undefined,\n  valueIfNaN?: number,\n) {\n  const parsed =\n    typeof value === 'number'\n      ? value\n      : typeof value === 'string'\n        ? parseFloat(value) / (isPercent(value) ? 100 : 1)\n        : NaN;\n  return capValue(0, ifNaN(parsed, valueIfNaN), 1);\n}\n","import { Color } from '../../color/Color';\nimport { parsePercent } from '../../parser/percent';\nimport { ifNaN } from '../../util/internals/ifNaN';\nimport type { ColorStop } from '../typedefs';\n\nconst RE_KEY_VALUE_PAIRS = /\\s*;\\s*/;\nconst RE_KEY_VALUE = /\\s*:\\s*/;\n\nfunction parseColorStop(el: SVGStopElement, multiplier: number) {\n  let colorValue, opacity;\n  const style = el.getAttribute('style');\n  if (style) {\n    const keyValuePairs = style.split(RE_KEY_VALUE_PAIRS);\n\n    if (keyValuePairs[keyValuePairs.length - 1] === '') {\n      keyValuePairs.pop();\n    }\n\n    for (let i = keyValuePairs.length; i--; ) {\n      const [key, value] = keyValuePairs[i]\n        .split(RE_KEY_VALUE)\n        .map((s) => s.trim());\n      if (key === 'stop-color') {\n        colorValue = value;\n      } else if (key === 'stop-opacity') {\n        opacity = value;\n      }\n    }\n  }\n\n  const color = new Color(\n    colorValue || el.getAttribute('stop-color') || 'rgb(0,0,0)',\n  );\n\n  return {\n    offset: parsePercent(el.getAttribute('offset'), 0),\n    color: color.toRgb(),\n    opacity:\n      ifNaN(parseFloat(opacity || el.getAttribute('stop-opacity') || ''), 1) *\n      color.getAlpha() *\n      multiplier,\n  };\n}\n\nexport function parseColorStops(\n  el: SVGGradientElement,\n  opacityAttr: string | null,\n) {\n  const colorStops: ColorStop[] = [],\n    colorStopEls = el.getElementsByTagName('stop'),\n    multiplier = parsePercent(opacityAttr, 1);\n  for (let i = colorStopEls.length; i--; ) {\n    colorStops.push(parseColorStop(colorStopEls[i], multiplier));\n  }\n  return colorStops;\n}\n","import type { GradientType, GradientUnits } from '../typedefs';\n\nexport function parseType(el: SVGGradientElement): GradientType {\n  return el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT'\n    ? 'linear'\n    : 'radial';\n}\n\nexport function parseGradientUnits(el: SVGGradientElement): GradientUnits {\n  return el.getAttribute('gradientUnits') === 'userSpaceOnUse'\n    ? 'pixels'\n    : 'percentage';\n}\n","import { isPercent } from '../../parser/percent';\nimport type { TSize } from '../../typedefs';\nimport type { GradientCoords, GradientType, GradientUnits } from '../typedefs';\nimport { parseGradientUnits, parseType } from './misc';\n\nfunction convertPercentUnitsToValues<\n  T extends GradientType,\n  K extends keyof GradientCoords<T>,\n>(\n  valuesToConvert: Record<K, string | number>,\n  { width, height, gradientUnits }: TSize & { gradientUnits: GradientUnits },\n) {\n  let finalValue;\n  return (Object.keys(valuesToConvert) as K[]).reduce(\n    (acc, prop) => {\n      const propValue = valuesToConvert[prop];\n      if (propValue === 'Infinity') {\n        finalValue = 1;\n      } else if (propValue === '-Infinity') {\n        finalValue = 0;\n      } else {\n        finalValue =\n          typeof propValue === 'string' ? parseFloat(propValue) : propValue;\n        if (typeof propValue === 'string' && isPercent(propValue)) {\n          finalValue *= 0.01;\n          if (gradientUnits === 'pixels') {\n            // then we need to fix those percentages here in svg parsing\n            if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n              finalValue *= width;\n            }\n            if (prop === 'y1' || prop === 'y2') {\n              finalValue *= height;\n            }\n          }\n        }\n      }\n      acc[prop] = finalValue;\n      return acc;\n    },\n    {} as Record<K, number>,\n  );\n}\n\nfunction getValue(el: SVGGradientElement, key: string) {\n  return el.getAttribute(key);\n}\n\nexport function parseLinearCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'x1') || 0,\n    y1: getValue(el, 'y1') || 0,\n    x2: getValue(el, 'x2') || '100%',\n    y2: getValue(el, 'y2') || 0,\n  };\n}\n\nexport function parseRadialCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'fx') || getValue(el, 'cx') || '50%',\n    y1: getValue(el, 'fy') || getValue(el, 'cy') || '50%',\n    r1: 0,\n    x2: getValue(el, 'cx') || '50%',\n    y2: getValue(el, 'cy') || '50%',\n    r2: getValue(el, 'r') || '50%',\n  };\n}\n\nexport function parseCoords(el: SVGGradientElement, size: TSize) {\n  return convertPercentUnitsToValues(\n    parseType(el) === 'linear' ? parseLinearCoords(el) : parseRadialCoords(el),\n    {\n      ...size,\n      gradientUnits: parseGradientUnits(el),\n    },\n  );\n}\n","import { Color } from '../color/Color';\nimport { iMatrix } from '../constants';\nimport { parseTransformAttribute } from '../parser/parseTransformAttribute';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgExport';\nimport { linearDefaultCoords, radialDefaultCoords } from './constants';\nimport { parseColorStops } from './parser/parseColorStops';\nimport { parseCoords } from './parser/parseCoords';\nimport { parseType, parseGradientUnits } from './parser/misc';\nimport type {\n  ColorStop,\n  GradientCoords,\n  GradientOptions,\n  GradientType,\n  GradientUnits,\n  SVGOptions,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { isPath } from '../util/typeAssertions';\n\n/**\n * Gradient class\n * @class Gradient\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n */\nexport class Gradient<\n  S,\n  T extends GradientType = S extends GradientType ? S : 'linear',\n> {\n  /**\n   * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetX: number;\n\n  /**\n   * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetY: number;\n\n  /**\n   * A transform matrix to apply to the gradient before painting.\n   * Imported from svg gradients, is not applied with the current transform in the center.\n   * Before this transform is applied, the origin point is at the top left corner of the object\n   * plus the addition of offsetY and offsetX.\n   * @type Number[]\n   * @default null\n   */\n  declare gradientTransform?: TMat2D;\n\n  /**\n   * coordinates units for coords.\n   * If `pixels`, the number of coords are in the same unit of width / height.\n   * If set as `percentage` the coords are still a number, but 1 means 100% of width\n   * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\n   * allowed values pixels or percentage.\n   * @type GradientUnits\n   * @default 'pixels'\n   */\n  declare gradientUnits: GradientUnits;\n\n  /**\n   * Gradient type linear or radial\n   * @type GradientType\n   * @default 'linear'\n   */\n  declare type: T;\n\n  /**\n   * Defines how the gradient is located in space and spread\n   * @type GradientCoords\n   */\n  declare coords: GradientCoords<T>;\n\n  /**\n   * Defines how many colors a gradient has and how they are located on the axis\n   * defined by coords\n   * @type GradientCoords\n   */\n  declare colorStops: ColorStop[];\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number | string\n   */\n  declare readonly id: string | number;\n\n  static type = 'Gradient';\n\n  constructor(options: GradientOptions<T>) {\n    const {\n      type = 'linear' as T,\n      gradientUnits = 'pixels',\n      coords = {},\n      colorStops = [],\n      offsetX = 0,\n      offsetY = 0,\n      gradientTransform,\n      id,\n    } = options || {};\n    Object.assign(this, {\n      type,\n      gradientUnits,\n      coords: {\n        ...(type === 'radial' ? radialDefaultCoords : linearDefaultCoords),\n        ...coords,\n      },\n      colorStops,\n      offsetX,\n      offsetY,\n      gradientTransform,\n      id: id ? `${id}_${uid()}` : uid(),\n    });\n  }\n\n  /**\n   * Adds another colorStop\n   * @param {Record<string, string>} colorStop Object with offset and color\n   * @return {Gradient} thisArg\n   */\n  addColorStop(colorStops: Record<string, string>) {\n    for (const position in colorStops) {\n      const color = new Color(colorStops[position]);\n      this.colorStops.push({\n        offset: parseFloat(position),\n        color: color.toRgb(),\n        opacity: color.getAlpha(),\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Returns object representation of a gradient\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object}\n   */\n  toObject(propertiesToInclude?: (keyof this | string)[]) {\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: this.type,\n      coords: { ...this.coords },\n      colorStops: this.colorStops.map((colorStop) => ({ ...colorStop })),\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      gradientUnits: this.gradientUnits,\n      gradientTransform: this.gradientTransform\n        ? [...this.gradientTransform]\n        : undefined,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of an gradient\n   * @param {FabricObject} object Object to create a gradient for\n   * @return {String} SVG representation of an gradient (linear/radial)\n   */\n  toSVG(\n    object: FabricObject,\n    {\n      additionalTransform: preTransform,\n    }: { additionalTransform?: string } = {},\n  ) {\n    const markup = [],\n      transform = (\n        this.gradientTransform\n          ? this.gradientTransform.concat()\n          : iMatrix.concat()\n      ) as TMat2D,\n      gradientUnits =\n        this.gradientUnits === 'pixels'\n          ? 'userSpaceOnUse'\n          : 'objectBoundingBox';\n    // colorStops must be sorted ascending, and guarded against deep mutations\n    const colorStops = this.colorStops\n      .map((colorStop) => ({ ...colorStop }))\n      .sort((a, b) => {\n        return a.offset - b.offset;\n      });\n\n    let offsetX = -this.offsetX,\n      offsetY = -this.offsetY;\n    if (gradientUnits === 'objectBoundingBox') {\n      offsetX /= object.width;\n      offsetY /= object.height;\n    } else {\n      offsetX += object.width / 2;\n      offsetY += object.height / 2;\n    }\n    // todo what about polygon/polyline?\n    if (isPath(object) && this.gradientUnits !== 'percentage') {\n      offsetX -= object.pathOffset.x;\n      offsetY -= object.pathOffset.y;\n    }\n    transform[4] -= offsetX;\n    transform[5] -= offsetY;\n\n    const commonAttributes = [\n      `id=\"SVGID_${this.id}\"`,\n      `gradientUnits=\"${gradientUnits}\"`,\n      `gradientTransform=\"${\n        preTransform ? preTransform + ' ' : ''\n      }${matrixToSVG(transform)}\"`,\n      '',\n    ].join(' ');\n\n    if (this.type === 'linear') {\n      const { x1, y1, x2, y2 } = this.coords;\n      markup.push(\n        '<linearGradient ',\n        commonAttributes,\n        ' x1=\"',\n        x1,\n        '\" y1=\"',\n        y1,\n        '\" x2=\"',\n        x2,\n        '\" y2=\"',\n        y2,\n        '\">\\n',\n      );\n    } else if (this.type === 'radial') {\n      const { x1, y1, x2, y2, r1, r2 } = this\n        .coords as GradientCoords<'radial'>;\n      const needsSwap = r1 > r2;\n      // svg radial gradient has just 1 radius. the biggest.\n      markup.push(\n        '<radialGradient ',\n        commonAttributes,\n        ' cx=\"',\n        needsSwap ? x1 : x2,\n        '\" cy=\"',\n        needsSwap ? y1 : y2,\n        '\" r=\"',\n        needsSwap ? r1 : r2,\n        '\" fx=\"',\n        needsSwap ? x2 : x1,\n        '\" fy=\"',\n        needsSwap ? y2 : y1,\n        '\">\\n',\n      );\n      if (needsSwap) {\n        // svg goes from internal to external radius. if radius are inverted, swap color stops.\n        colorStops.reverse(); //  mutates array\n        colorStops.forEach((colorStop) => {\n          colorStop.offset = 1 - colorStop.offset;\n        });\n      }\n      const minRadius = Math.min(r1, r2);\n      if (minRadius > 0) {\n        // i have to shift all colorStops and add new one in 0.\n        const maxRadius = Math.max(r1, r2),\n          percentageShift = minRadius / maxRadius;\n        colorStops.forEach((colorStop) => {\n          colorStop.offset += percentageShift * (1 - colorStop.offset);\n        });\n      }\n    }\n\n    colorStops.forEach(({ color, offset, opacity }) => {\n      markup.push(\n        '<stop ',\n        'offset=\"',\n        offset * 100 + '%',\n        '\" style=\"stop-color:',\n        color,\n        typeof opacity !== 'undefined' ? ';stop-opacity: ' + opacity : ';',\n        '\"/>\\n',\n      );\n    });\n\n    markup.push(\n      this.type === 'linear' ? '</linearGradient>' : '</radialGradient>',\n      '\\n',\n    );\n\n    return markup.join('');\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasGradient\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {CanvasGradient}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasGradient {\n    const { x1, y1, x2, y2, r1, r2 } = this.coords as GradientCoords<'radial'>;\n    const gradient =\n      this.type === 'linear'\n        ? ctx.createLinearGradient(x1, y1, x2, y2)\n        : ctx.createRadialGradient(x1, y1, r1, x2, y2, r2);\n\n    this.colorStops.forEach(({ color, opacity, offset }) => {\n      gradient.addColorStop(\n        offset,\n        typeof opacity !== 'undefined'\n          ? new Color(color).setAlpha(opacity).toRgba()\n          : color,\n      );\n    });\n\n    return gradient;\n  }\n\n  static async fromObject(\n    options: GradientOptions<'linear'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'radial'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'linear'> | GradientOptions<'radial'>,\n  ) {\n    const { colorStops, gradientTransform } = options;\n    return new this({\n      ...options,\n      colorStops: colorStops\n        ? colorStops.map((colorStop) => ({ ...colorStop }))\n        : undefined,\n      gradientTransform: gradientTransform ? [...gradientTransform] : undefined,\n    });\n  }\n\n  /* _FROM_SVG_START_ */\n  /**\n   * Returns {@link Gradient} instance from an SVG element\n   * @static\n   * @memberOf Gradient\n   * @param {SVGGradientElement} el SVG gradient element\n   * @param {FabricObject} instance\n   * @param {String} opacity A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\n   * @param {SVGOptions} svgOptions an object containing the size of the SVG in order to parse correctly gradients\n   * that uses gradientUnits as 'userSpaceOnUse' and percentages.\n   * @return {Gradient} Gradient instance\n   * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n   * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n   *\n   *  @example\n   *\n   *  <linearGradient id=\"linearGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\"/>\n   *    <stop offset=\"100%\" stop-color=\"black\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <linearGradient id=\"linearGrad2\">\n   *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n   *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n   *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *  </radialGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad2\">\n   *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n   *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n   *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n   *  </radialGradient>\n   *\n   */\n  static fromElement(\n    el: SVGGradientElement,\n    instance: FabricObject,\n    svgOptions: SVGOptions,\n  ): Gradient<GradientType> {\n    const gradientUnits = parseGradientUnits(el);\n    const center = instance._findCenterFromElement();\n    return new this({\n      id: el.getAttribute('id') || undefined,\n      type: parseType(el),\n      coords: parseCoords(el, {\n        width: svgOptions.viewBoxWidth || svgOptions.width,\n        height: svgOptions.viewBoxHeight || svgOptions.height,\n      }),\n      colorStops: parseColorStops(el, svgOptions.opacity),\n      gradientUnits,\n      gradientTransform: parseTransformAttribute(\n        el.getAttribute('gradientTransform') || '',\n      ),\n      ...(gradientUnits === 'pixels'\n        ? {\n            offsetX: instance.width / 2 - center.x,\n            offsetY: instance.height / 2 - center.y,\n          }\n        : {\n            offsetX: 0,\n            offsetY: 0,\n          }),\n    });\n  }\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Gradient, 'gradient');\nclassRegistry.setClass(Gradient, 'linear');\nclassRegistry.setClass(Gradient, 'radial');\n","import { config } from '../config';\nimport type { Abortable, TCrossOrigin, TMat2D, TSize } from '../typedefs';\nimport { ifNaN } from '../util/internals/ifNaN';\nimport { uid } from '../util/internals/uid';\nimport { loadImage } from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { toFixed } from '../util/misc/toFixed';\nimport { classRegistry } from '../ClassRegistry';\nimport type {\n  PatternRepeat,\n  PatternOptions,\n  SerializedPatternOptions,\n} from './types';\nimport { log } from '../util/internals/console';\n\n/**\n * @see {@link http://fabricjs.com/patterns demo}\n * @see {@link http://fabricjs.com/dynamic-patterns demo}\n */\nexport class Pattern {\n  static type = 'Pattern';\n\n  /**\n   * Legacy identifier of the class. Prefer using this.constructor.type 'Pattern'\n   * or utils like isPattern, or instance of to indentify a pattern in your code.\n   * Will be removed in future versiones\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    return 'pattern';\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * @type PatternRepeat\n   * @defaults\n   */\n  repeat: PatternRepeat = 'repeat';\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX = 0;\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY = 0;\n\n  /**\n   * @type TCrossOrigin\n   * @default\n   */\n  crossOrigin: TCrossOrigin = '';\n\n  /**\n   * transform matrix to change the pattern, imported from svgs.\n   * @todo verify if using the identity matrix as default makes the rest of the code more easy\n   * @type Array\n   * @default\n   */\n  declare patternTransform?: TMat2D;\n\n  /**\n   * The actual pixel source of the pattern\n   */\n  declare source: CanvasImageSource;\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number\n   */\n  declare readonly id: number;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @param {option.source} [source] the pattern source, eventually empty or a drawable\n   */\n  constructor(options: PatternOptions) {\n    this.id = uid();\n    Object.assign(this, options);\n  }\n\n  /**\n   * @returns true if {@link source} is an <img> element\n   */\n  isImageSource(): this is { source: HTMLImageElement } {\n    return (\n      !!this.source && typeof (this.source as HTMLImageElement).src === 'string'\n    );\n  }\n\n  /**\n   * @returns true if {@link source} is a <canvas> element\n   */\n  isCanvasSource(): this is { source: HTMLCanvasElement } {\n    return !!this.source && !!(this.source as HTMLCanvasElement).toDataURL;\n  }\n\n  sourceToString(): string {\n    return this.isImageSource()\n      ? this.source.src\n      : this.isCanvasSource()\n        ? this.source.toDataURL()\n        : '';\n  }\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasPattern | null {\n    if (\n      // if the image failed to load, return, and allow rest to continue loading\n      !this.source ||\n      // if an image\n      (this.isImageSource() &&\n        (!this.source.complete ||\n          this.source.naturalWidth === 0 ||\n          this.source.naturalHeight === 0))\n    ) {\n      return null;\n    }\n\n    return ctx.createPattern(this.source, this.repeat)!;\n  }\n\n  /**\n   * Returns object representation of a pattern\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object} Object representation of a pattern instance\n   */\n  toObject(propertiesToInclude: string[] = []): Record<string, any> {\n    const { repeat, crossOrigin } = this;\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: 'pattern',\n      source: this.sourceToString(),\n      repeat,\n      crossOrigin,\n      offsetX: toFixed(this.offsetX, config.NUM_FRACTION_DIGITS),\n      offsetY: toFixed(this.offsetY, config.NUM_FRACTION_DIGITS),\n      patternTransform: this.patternTransform\n        ? [...this.patternTransform]\n        : null,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   */\n  toSVG({ width, height }: TSize): string {\n    const { source: patternSource, repeat, id } = this,\n      patternOffsetX = ifNaN(this.offsetX / width, 0),\n      patternOffsetY = ifNaN(this.offsetY / height, 0),\n      patternWidth =\n        repeat === 'repeat-y' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetX || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).width as number) / width,\n              0,\n            ),\n      patternHeight =\n        repeat === 'repeat-x' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetY || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).height as number) / height,\n              0,\n            );\n\n    return [\n      `<pattern id=\"SVGID_${id}\" x=\"${patternOffsetX}\" y=\"${patternOffsetY}\" width=\"${patternWidth}\" height=\"${patternHeight}\">`,\n      `<image x=\"0\" y=\"0\" width=\"${\n        (patternSource as HTMLImageElement).width\n      }\" height=\"${\n        (patternSource as HTMLImageElement).height\n      }\" xlink:href=\"${this.sourceToString()}\"></image>`,\n      `</pattern>`,\n      '',\n    ].join('\\n');\n  }\n  /* _TO_SVG_END_ */\n\n  static async fromObject(\n    {\n      type,\n      source,\n      patternTransform,\n      ...otherOptions\n    }: SerializedPatternOptions,\n    options?: Abortable,\n  ): Promise<Pattern> {\n    const img = await loadImage(source, {\n      ...options,\n      crossOrigin: otherOptions.crossOrigin,\n    });\n    return new this({\n      ...otherOptions,\n      patternTransform:\n        patternTransform && (patternTransform.slice(0) as TMat2D),\n      source: img,\n    });\n  }\n}\n\nclassRegistry.setClass(Pattern);\n// kept for compatibility reason\nclassRegistry.setClass(Pattern, 'pattern');\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport type { Shadow } from '../Shadow';\nimport type { Canvas } from '../canvas/Canvas';\nimport type { TBrushEventData } from './typedefs';\n\n/**\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nexport abstract class BaseBrush {\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color = 'rgb(0, 0, 0)';\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width = 1;\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type Shadow\n   * @default\n   */\n  shadow: Shadow | null = null;\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: CanvasLineCap = 'round';\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: CanvasLineJoin = 'round';\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit = 10;\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: number[] | null = null;\n\n  /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n   */\n\n  limitedToCanvasSize = false;\n\n  /**\n   * @todo add type\n   */\n  declare canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  abstract _render(): void;\n  abstract onMouseDown(pointer: Point, ev: TBrushEventData): void;\n  abstract onMouseMove(pointer: Point, ev: TBrushEventData): void;\n  /**\n   * @returns true if brush should continue blocking interaction\n   */\n  abstract onMouseUp(ev: TBrushEventData): boolean | void;\n\n  /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.setLineDash(this.strokeDashArray || []);\n  }\n\n  /**\n   * Sets the transformation on given context\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @private\n   */\n  protected _saveAndTransform(ctx: CanvasRenderingContext2D) {\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  }\n\n  protected needsFullRender() {\n    const color = new Color(this.color);\n    return color.getAlpha() < 1 || !!this.shadow;\n  }\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  protected _setShadow() {\n    if (!this.shadow || !this.canvas) {\n      return;\n    }\n\n    const canvas = this.canvas,\n      shadow = this.shadow,\n      ctx = canvas.contextTop,\n      zoom = canvas.getZoom() * canvas.getRetinaScaling();\n\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur = shadow.blur * zoom;\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\n  }\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  protected _resetShadow() {\n    const ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n   */\n  protected _isOutSideCanvas(pointer: Point) {\n    return (\n      pointer.x < 0 ||\n      pointer.x > this.canvas.getWidth() ||\n      pointer.y < 0 ||\n      pointer.y > this.canvas.getHeight()\n    );\n  }\n}\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { toFixed } from '../util/misc/toFixed';\nimport {\n  getBoundsOfCurve,\n  joinPath,\n  makePathSimpler,\n  parsePath,\n} from '../util/path';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type {\n  TComplexPathData,\n  TPathSegmentInfo,\n  TSimplePathData,\n} from '../util/path/typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type {\n  TBBox,\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n} from '../typedefs';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\ninterface UniquePathProps {\n  sourcePath?: string;\n  path?: TSimplePathData;\n}\n\nexport interface SerializedPathProps\n  extends SerializedObjectProps,\n    UniquePathProps {}\n\nexport interface PathProps extends FabricObjectProps, UniquePathProps {}\n\nexport interface IPathBBox extends TBBox {\n  left: number;\n  top: number;\n  pathOffset: Point;\n}\n\nexport class Path<\n  Props extends TOptions<PathProps> = Partial<PathProps>,\n  SProps extends SerializedPathProps = SerializedPathProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Array of path points\n   * @type Array\n   * @default\n   */\n  declare path: TSimplePathData;\n\n  declare pathOffset: Point;\n\n  declare sourcePath?: string;\n\n  declare segmentsInfo?: TPathSegmentInfo[];\n\n  static type = 'Path';\n\n  static cacheProperties = [...cacheProperties, 'path', 'fillRule'];\n\n  /**\n   * Constructor\n   * @param {TComplexPathData} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {Partial<PathProps>} [options] Options object\n   * @return {Path} thisArg\n   */\n  constructor(\n    path: TComplexPathData | string,\n    // todo: evaluate this spread here\n    { path: _, left, top, ...options }: Partial<Props> = {},\n  ) {\n    super();\n    Object.assign(this, Path.ownDefaults);\n    this.setOptions(options);\n    this._setPath(path || [], true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {TComplexPathData | string} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {boolean} [adjustPosition] pass true to reposition the object according to the bounding box\n   * @returns {Point} top left position of the bounding box, useful for complementary positioning\n   */\n  _setPath(path: TComplexPathData | string, adjustPosition?: boolean) {\n    this.path = makePathSimpler(Array.isArray(path) ? path : parsePath(path));\n    this.setBoundingBox(adjustPosition);\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = this._calcBoundsFromPath();\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _renderPathCommands(ctx: CanvasRenderingContext2D) {\n    const l = -this.pathOffset.x,\n      t = -this.pathOffset.y;\n\n    ctx.beginPath();\n\n    for (const command of this.path) {\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          ctx.lineTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'M': // moveTo, absolute\n          ctx.moveTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          ctx.bezierCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n            command[5] + l,\n            command[6] + t,\n          );\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          ctx.quadraticCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n          );\n          break;\n\n        case 'Z':\n          ctx.closePath();\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    this._renderPathCommands(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {string} string representation of an instance\n   */\n  toString() {\n    return `#<Path (${this.complexity()}): { \"top\": ${this.top}, \"left\": ${\n      this.left\n    } }>`;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      path: this.path.map((pathCmd) => pathCmd.slice()),\n    };\n  }\n\n  /**\n   * Returns dataless object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const o = this.toObject<T, K>(propertiesToInclude);\n    if (this.sourcePath) {\n      delete o.path;\n      o.sourcePath = this.sourcePath;\n    }\n    return o;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const path = joinPath(this.path, config.NUM_FRACTION_DIGITS);\n    return [\n      '<path ',\n      'COMMON_PARTS',\n      `d=\"${path}\" stroke-linecap=\"round\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @return the path command's translate transform attribute\n   */\n  _getOffsetTransform() {\n    const digits = config.NUM_FRACTION_DIGITS;\n    return ` translate(${toFixed(-this.pathOffset.x, digits)}, ${toFixed(\n      -this.pathOffset.y,\n      digits,\n    )})`;\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(), {\n        reviver,\n        additionalTransform: additionalTransform,\n      })\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      additionalTransform: additionalTransform,\n    });\n  }\n\n  /**\n   * Returns number representation of an instance complexity\n   * @return {number} complexity of this instance\n   */\n  complexity() {\n    return this.path.length;\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { width, height, pathOffset } = this._calcDimensions();\n    this.set({ width, height, pathOffset });\n    // using pathOffset because it match the use case.\n    // if pathOffset change here we need to use left + width/2 , top + height/2\n    adjustPosition && this.setPositionByOrigin(pathOffset, CENTER, CENTER);\n  }\n\n  _calcBoundsFromPath(): TBBox {\n    const bounds: XY[] = [];\n    let subpathStartX = 0,\n      subpathStartY = 0,\n      x = 0, // current x\n      y = 0; // current y\n\n    for (const command of this.path) {\n      // current instruction\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          x = command[1];\n          y = command[2];\n          bounds.push({ x: subpathStartX, y: subpathStartY }, { x, y });\n          break;\n\n        case 'M': // moveTo, absolute\n          x = command[1];\n          y = command[2];\n          subpathStartX = x;\n          subpathStartY = y;\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n              command[5],\n              command[6],\n            ),\n          );\n          x = command[5];\n          y = command[6];\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n            ),\n          );\n          x = command[3];\n          y = command[4];\n          break;\n\n        case 'Z':\n          x = subpathStartX;\n          y = subpathStartY;\n          break;\n      }\n    }\n    return makeBoundingBoxFromPoints(bounds);\n  }\n\n  /**\n   * @private\n   */\n  _calcDimensions(): IPathBBox {\n    const bbox = this._calcBoundsFromPath();\n\n    return {\n      ...bbox,\n      pathOffset: new Point(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2,\n      ),\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Path.fromElement`)\n   * @static\n   * @memberOf Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'd'];\n\n  /**\n   * Creates an instance of Path from an object\n   * @static\n   * @memberOf Path\n   * @param {Object} object\n   * @returns {Promise<Path>}\n   */\n  static fromObject<T extends TOptions<SerializedPathProps>>(object: T) {\n    return this._fromObject<Path>(object, {\n      extraParam: 'path',\n    });\n  }\n\n  /**\n   * Creates an instance of Path from an SVG <path> element\n   * @static\n   * @memberOf Path\n   * @param {HTMLElement} element to parse\n   * @param {Partial<PathProps>} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Partial<PathProps>,\n    cssRules?: CSSRules,\n  ) {\n    const { d, ...parsedAttributes } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return new this(d, {\n      ...parsedAttributes,\n      ...options,\n      // we pass undefined to instruct the constructor to position the object using the bbox\n      left: undefined,\n      top: undefined,\n    });\n  }\n}\n\nclassRegistry.setClass(Path);\nclassRegistry.setSVGClass(Path);\n\n/* _FROM_SVG_START_ */\n","import type { ModifierKey, TEvent } from '../EventTypeDefs';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Path } from '../shapes/Path';\nimport { getSmoothPathFromPoints, joinPath } from '../util/path';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\n/**\n * @private\n * @param {TSimplePathData} pathData SVG path commands\n * @returns {boolean}\n */\nfunction isEmptySVGPath(pathData: TSimplePathData): boolean {\n  return joinPath(pathData) === 'M 0 0 Q 0 0 0 0 L 0 0';\n}\n\nexport class PencilBrush extends BaseBrush {\n  /**\n   * Discard points that are less than `decimate` pixel distant from each other\n   * @type Number\n   * @default 0.4\n   */\n  decimate = 0.4;\n\n  /**\n   * Draws a straight line between last recorded point to current pointer\n   * Used for `shift` functionality\n   *\n   * @type boolean\n   * @default false\n   */\n  drawStraightLine = false;\n\n  /**\n   * The event modifier key that makes the brush draw a straight line.\n   * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n   * @type {ModifierKey | undefined | null}\n   */\n  straightLineKey: ModifierKey | undefined | null = 'shiftKey';\n\n  protected declare _points: Point[];\n  protected declare _hasStraightLine: boolean;\n  protected declare oldEnd?: Point;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this._points = [];\n    this._hasStraightLine = false;\n  }\n\n  needsFullRender() {\n    return super.needsFullRender() || this._hasStraightLine;\n  }\n\n  static drawSegment(ctx: CanvasRenderingContext2D, p1: Point, p2: Point) {\n    const midPoint = p1.midPointFrom(p2);\n    ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n    return midPoint;\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    this._prepareForDrawing(pointer);\n    // capture coordinates immediately\n    // this allows to draw dots (when movement never occurs)\n    this._addPoint(pointer);\n    this._render();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this._addPoint(pointer) && this._points.length > 1) {\n      if (this.needsFullRender()) {\n        // redraw curve\n        // clear top canvas\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._render();\n      } else {\n        const points = this._points,\n          length = points.length,\n          ctx = this.canvas.contextTop;\n        // draw the curve update\n        this._saveAndTransform(ctx);\n        if (this.oldEnd) {\n          ctx.beginPath();\n          ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n        }\n        this.oldEnd = PencilBrush.drawSegment(\n          ctx,\n          points[length - 2],\n          points[length - 1],\n        );\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp({ e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return true;\n    }\n    this.drawStraightLine = false;\n    this.oldEnd = undefined;\n    this._finalizeAndAddPath();\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Point} pointer Actual mouse position related to the canvas.\n   */\n  _prepareForDrawing(pointer: Point) {\n    this._reset();\n    this._addPoint(pointer);\n    this.canvas.contextTop.moveTo(pointer.x, pointer.y);\n  }\n\n  /**\n   * @private\n   * @param {Point} point Point to be added to points array\n   */\n  _addPoint(point: Point) {\n    if (\n      this._points.length > 1 &&\n      point.eq(this._points[this._points.length - 1])\n    ) {\n      return false;\n    }\n    if (this.drawStraightLine && this._points.length > 1) {\n      this._hasStraightLine = true;\n      this._points.pop();\n    }\n    this._points.push(point);\n    return true;\n  }\n\n  /**\n   * Clear points array and set contextTop canvas style.\n   * @private\n   */\n  _reset() {\n    this._points = [];\n    this._setBrushStyles(this.canvas.contextTop);\n    this._setShadow();\n    this._hasStraightLine = false;\n  }\n\n  /**\n   * Draw a smooth path on the topCanvas using quadraticCurveTo\n   * @private\n   * @param {CanvasRenderingContext2D} [ctx]\n   */\n  _render(ctx: CanvasRenderingContext2D = this.canvas.contextTop) {\n    let p1 = this._points[0],\n      p2 = this._points[1];\n    this._saveAndTransform(ctx);\n    ctx.beginPath();\n    //if we only have 2 points in the path and they are the same\n    //it means that the user only clicked the canvas without moving the mouse\n    //then we should be drawing a dot. A path isn't drawn between two identical dots\n    //that's why we set them apart a bit\n    if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n      const width = this.width / 1000;\n      p1.x -= width;\n      p2.x += width;\n    }\n    ctx.moveTo(p1.x, p1.y);\n\n    for (let i = 1; i < this._points.length; i++) {\n      // we pick the point between pi + 1 & pi + 2 as the\n      // end point and p1 as our control point.\n      PencilBrush.drawSegment(ctx, p1, p2);\n      p1 = this._points[i];\n      p2 = this._points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * Converts points to SVG path\n   * @param {Point[]} points Array of points\n   * @return {TSimplePathData} SVG path commands\n   */\n  convertPointsToSVGPath(points: Point[]): TSimplePathData {\n    const correction = this.width / 1000;\n    return getSmoothPathFromPoints(points, correction);\n  }\n\n  /**\n   * Creates a Path object to add on canvas\n   * @param {TSimplePathData} pathData Path data\n   * @return {Path} Path to add on canvas\n   */\n  createPath(pathData: TSimplePathData): Path {\n    const path = new Path(pathData, {\n      fill: null,\n      stroke: this.color,\n      strokeWidth: this.width,\n      strokeLineCap: this.strokeLineCap,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeDashArray: this.strokeDashArray,\n    });\n    if (this.shadow) {\n      this.shadow.affectStroke = true;\n      path.shadow = new Shadow(this.shadow);\n    }\n\n    return path;\n  }\n\n  /**\n   * Decimate points array with the decimate value\n   */\n  decimatePoints(points: Point[], distance: number) {\n    if (points.length <= 2) {\n      return points;\n    }\n    let lastPoint = points[0],\n      cDistance;\n    const zoom = this.canvas.getZoom(),\n      adjustedDistance = Math.pow(distance / zoom, 2),\n      l = points.length - 1,\n      newPoints = [lastPoint];\n    for (let i = 1; i < l - 1; i++) {\n      cDistance =\n        Math.pow(lastPoint.x - points[i].x, 2) +\n        Math.pow(lastPoint.y - points[i].y, 2);\n      if (cDistance >= adjustedDistance) {\n        lastPoint = points[i];\n        newPoints.push(lastPoint);\n      }\n    }\n    // Add the last point from the original line to the end of the array.\n    // This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n    newPoints.push(points[l]);\n    return newPoints;\n  }\n\n  /**\n   * On mouseup after drawing the path on contextTop canvas\n   * we use the points captured to create an new Path object\n   * and add it to the canvas.\n   */\n  _finalizeAndAddPath() {\n    const ctx = this.canvas.contextTop;\n    ctx.closePath();\n    if (this.decimate) {\n      this._points = this.decimatePoints(this._points, this.decimate);\n    }\n    const pathData = this.convertPointsToSVGPath(this._points);\n    if (isEmptySVGPath(pathData)) {\n      // do not create 0 width/height paths, as they are\n      // rendered inconsistently across browsers\n      // Firefox 4, for example, renders a dot,\n      // whereas Chrome 10 renders nothing\n      this.canvas.requestRenderAll();\n      return;\n    }\n\n    const path = this.createPath(pathData);\n    this.canvas.clearContext(this.canvas.contextTop);\n    this.canvas.fire('before:path:created', { path: path });\n    this.canvas.add(path);\n    this.canvas.requestRenderAll();\n    path.setCoords();\n    this._resetShadow();\n\n    // fire event 'path' created\n    this.canvas.fire('path:created', { path: path });\n  }\n}\n","import type { ObjectEvents } from '../EventTypeDefs';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { cos } from '../util/misc/cos';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { sin } from '../util/misc/sin';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { CSSRules } from '../parser/typedefs';\nimport { SCALE_X, SCALE_Y } from '../constants';\n\ninterface UniqueCircleProps {\n  /**\n   * Radius of this circle\n   * @type Number\n   * @default 0\n   */\n  radius: number;\n\n  /**\n   * Angle for the start of the circle, in degrees.\n   * @type TDegree 0 - 359\n   * @default 0\n   */\n  startAngle: number;\n\n  /**\n   * Angle for the end of the circle, in degrees\n   * @type TDegree 1 - 360\n   * @default 360\n   */\n  endAngle: number;\n\n  /**\n   * Orientation for the direction of the circle.\n   * Setting to true will switch the arc of the circle to traverse from startAngle to endAngle in a counter-clockwise direction.\n   * Note: this will only change how the circle is drawn, and does not affect rotational transformation.\n   * @default false\n   */\n  counterClockwise: boolean;\n}\n\nexport interface SerializedCircleProps\n  extends SerializedObjectProps,\n    UniqueCircleProps {}\n\nexport interface CircleProps extends FabricObjectProps, UniqueCircleProps {}\n\nconst CIRCLE_PROPS = [\n  'radius',\n  'startAngle',\n  'endAngle',\n  'counterClockwise',\n] as const;\n\nexport const circleDefaultValues: Partial<TClassProperties<Circle>> = {\n  radius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  counterClockwise: false,\n};\n\nexport class Circle<\n    Props extends TOptions<CircleProps> = Partial<CircleProps>,\n    SProps extends SerializedCircleProps = SerializedCircleProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueCircleProps\n{\n  declare radius: number;\n  declare startAngle: number;\n  declare endAngle: number;\n  declare counterClockwise: boolean;\n\n  static type = 'Circle';\n\n  static cacheProperties = [...cacheProperties, ...CIRCLE_PROPS];\n\n  static ownDefaults = circleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Circle.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Circle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n\n    if (key === 'radius') {\n      this.setRadius(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(\n      0,\n      0,\n      this.radius,\n      degreesToRadians(this.startAngle),\n      degreesToRadians(this.endAngle),\n      this.counterClockwise,\n    );\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusX(): number {\n    return this.get('radius') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusY(): number {\n    return this.get('radius') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Sets radius of an object (and updates width accordingly)\n   */\n  setRadius(value: number) {\n    this.radius = value;\n    this.set({ width: value * 2, height: value * 2 });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...CIRCLE_PROPS, ...propertiesToInclude]);\n  }\n\n  /* _TO_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    const angle = (this.endAngle - this.startAngle) % 360;\n\n    if (angle === 0) {\n      return [\n        '<circle ',\n        'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'r=\"',\n        `${this.radius}`,\n        '\" />\\n',\n      ];\n    } else {\n      const { radius } = this;\n      const start = degreesToRadians(this.startAngle),\n        end = degreesToRadians(this.endAngle),\n        startX = cos(start) * radius,\n        startY = sin(start) * radius,\n        endX = cos(end) * radius,\n        endY = sin(end) * radius,\n        largeFlag = angle > 180 ? 1 : 0,\n        sweepFlag = this.counterClockwise ? 0 : 1;\n      return [\n        `<path d=\"M ${startX} ${startY} A ${radius} ${radius} 0 ${largeFlag} ${sweepFlag} ${endX} ${endY}\" `,\n        'COMMON_PARTS',\n        ' />\\n',\n      ];\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Circle.fromElement})\n   * @static\n   * @memberOf Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  static ATTRIBUTE_NAMES = ['cx', 'cy', 'r', ...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns {@link Circle} instance from an SVG element\n   * @static\n   * @memberOf Circle\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Partial Circle object to default missing properties on the element.\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ): Promise<Circle> {\n    const {\n      left = 0,\n      top = 0,\n      radius = 0,\n      ...otherParsedAttributes\n    } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    ) as Partial<CircleProps>;\n\n    // this probably requires to be fixed for default origins not being top/left.\n\n    return new this({\n      ...otherParsedAttributes,\n      radius,\n      left: left - radius,\n      top: top - radius,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * @todo how do we declare this??\n   */\n  static fromObject<T extends TOptions<SerializedCircleProps>>(object: T) {\n    return super._fromObject<Circle>(object);\n  }\n}\n\nclassRegistry.setClass(Circle);\nclassRegistry.setSVGClass(Circle);\n","import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Circle } from '../shapes/Circle';\nimport { Group } from '../shapes/Group';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { CircleBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\nexport class CircleBrush extends BaseBrush {\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  declare points: CircleBrushPoint[];\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.points = [];\n  }\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Point} pointer\n   */\n  drawDot(pointer: Point) {\n    const point = this.addPoint(pointer),\n      ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    this.dot(ctx, point);\n    ctx.restore();\n  }\n\n  dot(ctx: CanvasRenderingContext2D, point: CircleBrushPoint) {\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown(pointer: Point) {\n    this.points = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  }\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render() {\n    const ctx = this.canvas.contextTop,\n      points = this.points;\n    this._saveAndTransform(ctx);\n    for (let i = 0; i < points.length; i++) {\n      this.dot(ctx, points[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this.needsFullRender()) {\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.addPoint(pointer);\n      this._render();\n    } else {\n      this.drawDot(pointer);\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const circles: Circle[] = [];\n\n    for (let i = 0; i < this.points.length; i++) {\n      const point = this.points[i],\n        circle = new Circle({\n          radius: point.radius,\n          left: point.x,\n          top: point.y,\n          originX: CENTER,\n          originY: CENTER,\n          fill: point.fill,\n        });\n\n      this.shadow && (circle.shadow = new Shadow(this.shadow));\n\n      circles.push(circle);\n    }\n    const group = new Group(circles, { canvas: this.canvas });\n\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  /**\n   * @param {Object} pointer\n   * @return {Point} Just added pointer point\n   */\n  addPoint({ x, y }: Point) {\n    const pointerPoint: CircleBrushPoint = {\n      x,\n      y,\n      radius: getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2,\n      fill: new Color(this.color).setAlpha(getRandomInt(0, 100) / 100).toRgba(),\n    };\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n}\n","import type { Point } from '../Point';\nimport { Group } from '../shapes/Group';\nimport { Shadow } from '../Shadow';\nimport { Rect } from '../shapes/Rect';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { SprayBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\n/**\n *\n * @param rects\n * @returns\n */\nfunction getUniqueRects(rects: Rect[]) {\n  const uniqueRects: Record<string, boolean> = {};\n  const uniqueRectsArray: Rect[] = [];\n\n  for (let i = 0, key: string; i < rects.length; i++) {\n    key = `${rects[i].left}${rects[i].top}`;\n    if (!uniqueRects[key]) {\n      uniqueRects[key] = true;\n      uniqueRectsArray.push(rects[i]);\n    }\n  }\n\n  return uniqueRectsArray;\n}\n\nexport class SprayBrush extends BaseBrush {\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density = 20;\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth = 1;\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance = 1;\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity = false;\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping = true;\n\n  private declare sprayChunks: SprayBrushPoint[][];\n\n  private declare sprayChunk: SprayBrushPoint[];\n\n  /**\n   * Constructor\n   * @param {Canvas} canvas\n   * @return {SprayBrush} Instance of a spray brush\n   */\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.sprayChunks = [];\n    this.sprayChunk = [];\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point) {\n    this.sprayChunks = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const rects: Rect[] = [];\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      const sprayChunk = this.sprayChunks[i];\n      for (let j = 0; j < sprayChunk.length; j++) {\n        const chunck = sprayChunk[j];\n        const rect = new Rect({\n          width: chunck.width,\n          height: chunck.width,\n          left: chunck.x + 1,\n          top: chunck.y + 1,\n          originX: CENTER,\n          originY: CENTER,\n          fill: this.color,\n        });\n        rects.push(rect);\n      }\n    }\n\n    const group = new Group(\n      this.optimizeOverlapping ? getUniqueRects(rects) : rects,\n      {\n        objectCaching: true,\n        subTargetCheck: false,\n        interactive: false,\n      },\n    );\n    this.shadow && group.set('shadow', new Shadow(this.shadow));\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  renderChunck(sprayChunck: SprayBrushPoint[]) {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < sprayChunck.length; i++) {\n      const point = sprayChunck[i];\n      ctx.globalAlpha = point.opacity;\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Render all spray chunks\n   */\n  _render() {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      this.renderChunck(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @param {Point} pointer\n   */\n  addSprayChunk(pointer: Point) {\n    this.sprayChunk = [];\n    const radius = this.width / 2;\n\n    for (let i = 0; i < this.density; i++) {\n      this.sprayChunk.push({\n        x: getRandomInt(pointer.x - radius, pointer.x + radius),\n        y: getRandomInt(pointer.y - radius, pointer.y + radius),\n        width: this.dotWidthVariance\n          ? getRandomInt(\n              // bottom clamp width to 1\n              Math.max(1, this.dotWidth - this.dotWidthVariance),\n              this.dotWidth + this.dotWidthVariance,\n            )\n          : this.dotWidth,\n        opacity: this.randomOpacity ? getRandomInt(0, 100) / 100 : 1,\n      });\n    }\n\n    this.sprayChunks.push(this.sprayChunk);\n  }\n}\n","import { Pattern } from '../Pattern';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { Canvas } from '../canvas/Canvas';\nimport { PencilBrush } from './PencilBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\nexport class PatternBrush extends PencilBrush {\n  declare source?: CanvasImageSource;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n  }\n\n  getPatternSrc() {\n    const dotWidth = 20,\n      dotDistance = 5,\n      patternCanvas = createCanvasElement(),\n      patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n    if (patternCtx) {\n      patternCtx.fillStyle = this.color;\n      patternCtx.beginPath();\n      patternCtx.arc(\n        dotWidth / 2,\n        dotWidth / 2,\n        dotWidth / 2,\n        0,\n        Math.PI * 2,\n        false,\n      );\n      patternCtx.closePath();\n      patternCtx.fill();\n    }\n    return patternCanvas;\n  }\n\n  /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  getPattern(ctx: CanvasRenderingContext2D) {\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  }\n\n  /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    super._setBrushStyles(ctx);\n    const pattern = this.getPattern(ctx);\n    pattern && (ctx.strokeStyle = pattern);\n  }\n\n  /**\n   * Creates path\n   */\n  createPath(pathData: TSimplePathData) {\n    const path = super.createPath(pathData),\n      topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new Pattern({\n      source: this.source || this.getPatternSrc(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y,\n    });\n    return path;\n  }\n}\n","import { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport { Point } from '../Point';\nimport { isFiller } from '../util/typeAssertions';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { makeBoundingBoxFromPoints } from '../util';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\n// @TODO this code is terrible and Line should be a special case of polyline.\n\nconst coordProps = ['x1', 'x2', 'y1', 'y2'] as const;\n\ninterface UniqueLineProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\nexport interface SerializedLineProps\n  extends SerializedObjectProps,\n    UniqueLineProps {}\n\nexport class Line<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedLineProps = SerializedLineProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueLineProps\n{\n  /**\n   * x value or first line edge\n   * @type number\n   * @default\n   */\n  declare x1: number;\n\n  /**\n   * y value or first line edge\n   * @type number\n   * @default\n   */\n  declare y1: number;\n\n  /**\n   * x value or second line edge\n   * @type number\n   * @default\n   */\n  declare x2: number;\n\n  /**\n   * y value or second line edge\n   * @type number\n   * @default\n   */\n  declare y2: number;\n\n  static type = 'Line';\n\n  static cacheProperties = [...cacheProperties, ...coordProps];\n  /**\n   * Constructor\n   * @param {Array} [points] Array of points\n   * @param {Object} [options] Options object\n   * @return {Line} thisArg\n   */\n  constructor([x1, y1, x2, y2] = [0, 0, 0, 0], options: Partial<Props> = {}) {\n    super();\n    Object.assign(this, Line.ownDefaults);\n    this.setOptions(options);\n    this.x1 = x1;\n    this.x2 = x2;\n    this.y1 = y1;\n    this.y2 = y2;\n    this._setWidthHeight();\n    const { left, top } = options;\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {Object} [options] Options\n   */\n  _setWidthHeight() {\n    const { x1, y1, x2, y2 } = this;\n    this.width = Math.abs(x2 - x1);\n    this.height = Math.abs(y2 - y1);\n    const { left, top, width, height } = makeBoundingBoxFromPoints([\n      { x: x1, y: y1 },\n      { x: x2, y: y2 },\n    ]);\n    const position = new Point(left + width / 2, top + height / 2);\n    this.setPositionByOrigin(position, CENTER, CENTER);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    if (coordProps.includes(key as keyof UniqueLineProps)) {\n      // this doesn't make sense very much, since setting x1 when top or left\n      // are already set, is just going to show a strange result since the\n      // line will move way more than the developer expect.\n      // in fabric5 it worked only when the line didn't have extra transformations,\n      // in fabric6 too. With extra transform they behave bad in different ways.\n      // This needs probably a good rework or a tutorial if you have to create a dynamic line\n      this._setWidthHeight();\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n\n    const p = this.calcLinePoints();\n    ctx.moveTo(p.x1, p.y1);\n    ctx.lineTo(p.x2, p.y2);\n\n    ctx.lineWidth = this.strokeWidth;\n\n    // TODO: test this\n    // make sure setting \"fill\" changes color of a line\n    // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n    const origStrokeStyle = ctx.strokeStyle;\n    if (isFiller(this.stroke)) {\n      ctx.strokeStyle = this.stroke.toLive(ctx)!;\n    } else {\n      ctx.strokeStyle = this.stroke ?? ctx.fillStyle;\n    }\n    this.stroke && this._renderStroke(ctx);\n    ctx.strokeStyle = origStrokeStyle;\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    return new Point((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      ...this.calcLinePoints(),\n    };\n  }\n\n  /*\n   * Calculate object dimensions from its properties\n   * @private\n   */\n  _getNonTransformedDimensions(): Point {\n    const dim = super._getNonTransformedDimensions();\n    if (this.strokeLineCap === 'butt') {\n      if (this.width === 0) {\n        dim.y -= this.strokeWidth;\n      }\n      if (this.height === 0) {\n        dim.x -= this.strokeWidth;\n      }\n    }\n    return dim;\n  }\n\n  /**\n   * Recalculates line points given width and height\n   * Those points are simply placed around the center,\n   * This is not useful outside internal render functions and svg output\n   * Is not meant to be for the developer.\n   * @private\n   */\n  calcLinePoints(): UniqueLineProps {\n    const { x1: _x1, x2: _x2, y1: _y1, y2: _y2, width, height } = this;\n    const xMult = _x1 <= _x2 ? -1 : 1,\n      yMult = _y1 <= _y2 ? -1 : 1,\n      x1 = (xMult * width) / 2,\n      y1 = (yMult * height) / 2,\n      x2 = (xMult * -width) / 2,\n      y2 = (yMult * -height) / 2;\n\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { x1, x2, y1, y2 } = this.calcLinePoints();\n    return [\n      '<line ',\n      'COMMON_PARTS',\n      `x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Line.fromElement})\n   * @static\n   * @memberOf Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(coordProps);\n\n  /**\n   * Returns Line instance from an SVG element\n   * @static\n   * @memberOf Line\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      x1 = 0,\n      y1 = 0,\n      x2 = 0,\n      y2 = 0,\n      ...parsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n    return new this([x1, y1, x2, y2], parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Line instance from an object representation\n   * @static\n   * @memberOf Line\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Line>}\n   */\n  static fromObject<T extends TOptions<SerializedLineProps>>({\n    x1,\n    y1,\n    x2,\n    y2,\n    ...object\n  }: T) {\n    return this._fromObject<Line>(\n      {\n        ...object,\n        points: [x1, y1, x2, y2],\n      },\n      {\n        extraParam: 'points',\n      },\n    );\n  }\n}\n\nclassRegistry.setClass(Line);\nclassRegistry.setSVGClass(Line);\n","import { classRegistry } from '../ClassRegistry';\nimport { FabricObject } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { TClassProperties, TOptions } from '../typedefs';\nimport type { ObjectEvents } from '../EventTypeDefs';\n\nexport const triangleDefaultValues: Partial<TClassProperties<Triangle>> = {\n  width: 100,\n  height: 100,\n};\n\nexport class Triangle<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  static type = 'Triangle';\n\n  static ownDefaults = triangleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...Triangle.ownDefaults };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Triangle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(-widthBy2, heightBy2);\n    ctx.lineTo(0, -heightBy2);\n    ctx.lineTo(widthBy2, heightBy2);\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2,\n      points = `${-widthBy2} ${heightBy2},0 ${-heightBy2},${widthBy2} ${heightBy2}`;\n    return ['<polygon ', 'COMMON_PARTS', 'points=\"', points, '\" />'];\n  }\n}\n\nclassRegistry.setClass(Triangle);\nclassRegistry.setSVGClass(Triangle);\n","import { SCALE_X, SCALE_Y, twoMathPi } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const ellipseDefaultValues: Partial<TClassProperties<Ellipse>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueEllipseProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedEllipseProps\n  extends SerializedObjectProps,\n    UniqueEllipseProps {}\n\nexport interface EllipseProps extends FabricObjectProps, UniqueEllipseProps {}\n\nconst ELLIPSE_PROPS = ['rx', 'ry'] as const;\n\nexport class Ellipse<\n    Props extends TOptions<EllipseProps> = Partial<EllipseProps>,\n    SProps extends SerializedEllipseProps = SerializedEllipseProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements EllipseProps\n{\n  /**\n   * Horizontal radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Ellipse';\n\n  static cacheProperties = [...cacheProperties, ...ELLIPSE_PROPS];\n\n  static ownDefaults = ellipseDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Ellipse.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Ellipse.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   * @return {Ellipse} thisArg\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    switch (key) {\n      case 'rx':\n        this.rx = value;\n        this.set('width', value * 2);\n        break;\n\n      case 'ry':\n        this.ry = value;\n        this.set('height', value * 2);\n        break;\n    }\n    return this;\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRx() {\n    return this.get('rx') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns Vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRy() {\n    return this.get('ry') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...ELLIPSE_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    return [\n      '<ellipse ',\n      'COMMON_PARTS',\n      `cx=\"0\" cy=\"0\" rx=\"${this.rx}\" ry=\"${this.ry}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n    ctx.arc(0, 0, this.rx, 0, twoMathPi, false);\n    ctx.restore();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Ellipse.fromElement})\n   * @static\n   * @memberOf Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'cx', 'cy', 'rx', 'ry'];\n\n  /**\n   * Returns {@link Ellipse} instance from an SVG element\n   * @static\n   * @memberOf Ellipse\n   * @param {HTMLElement} element Element to parse\n   * @return {Ellipse}\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    return new this(parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Ellipse);\nclassRegistry.setSVGClass(Ellipse);\n","import type { XY } from '../Point';\n\n/**\n * Parses \"points\" attribute, returning an array of values\n * @static\n * @memberOf fabric\n * @param {String} points points attribute string\n * @return {Array} array of points\n */\nexport function parsePointsAttribute(points: string | null): XY[] {\n  // points attribute is required and must not be empty\n  if (!points) {\n    return [];\n  }\n\n  // replace commas with whitespace and remove bookending whitespace\n  const pointsSplit: string[] = points.replace(/,/g, ' ').trim().split(/\\s+/);\n\n  const parsedPoints = [];\n\n  for (let i = 0; i < pointsSplit.length; i += 2) {\n    parsedPoints.push({\n      x: parseFloat(pointsSplit[i]),\n      y: parseFloat(pointsSplit[i + 1]),\n    });\n  }\n\n  // odd number of points is an error\n  // if (parsedPoints.length % 2 !== 0) {\n  //   return null;\n  // }\n  return parsedPoints;\n}\n","import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { parsePointsAttribute } from '../parser/parsePointsAttribute';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { calcDimensionsMatrix, transformPoint } from '../util/misc/matrix';\nimport { projectStrokeOnPoints } from '../util/misc/projectStroke';\nimport type { TProjectStrokeOnPointsOptions } from '../util/misc/projectStroke/types';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport {\n  CENTER,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const polylineDefaultValues: Partial<TClassProperties<Polyline>> = {\n  /**\n   * @deprecated transient option soon to be removed in favor of a different design\n   */\n  exactBoundingBox: false,\n};\n\nexport interface SerializedPolylineProps extends SerializedObjectProps {\n  points: XY[];\n}\n\nexport class Polyline<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedPolylineProps = SerializedPolylineProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Points array\n   * @type Array\n   * @default\n   */\n  declare points: XY[];\n\n  /**\n   * WARNING: Feature in progress\n   * Calculate the exact bounding box taking in account strokeWidth on acute angles\n   * this will be turned to true by default on fabric 6.0\n   * maybe will be left in as an optimization since calculations may be slow\n   * @deprecated transient option soon to be removed in favor of a different design\n   * @type Boolean\n   * @default false\n   */\n  declare exactBoundingBox: boolean;\n\n  private declare initialized: true | undefined;\n\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polyline';\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Polyline.ownDefaults,\n    };\n  }\n\n  /**\n   * A list of properties that if changed trigger a recalculation of dimensions\n   * @todo check if you really need to recalculate for all cases\n   */\n  static layoutProperties: (keyof Polyline)[] = [\n    SKEW_X,\n    SKEW_Y,\n    'strokeLineCap',\n    'strokeLineJoin',\n    'strokeMiterLimit',\n    'strokeWidth',\n    'strokeUniform',\n    'points',\n  ];\n\n  declare pathOffset: Point;\n\n  declare strokeOffset: Point;\n\n  static cacheProperties = [...cacheProperties, 'points'];\n\n  strokeDiff: Point;\n\n  /**\n   * Constructor\n   * @param {Array} points Array of points (where each point is an object with x and y)\n   * @param {Object} [options] Options object\n   * @return {Polyline} thisArg\n   * @example\n   * var poly = new Polyline([\n   *     { x: 10, y: 10 },\n   *     { x: 50, y: 30 },\n   *     { x: 40, y: 70 },\n   *     { x: 60, y: 50 },\n   *     { x: 100, y: 150 },\n   *     { x: 40, y: 100 }\n   *   ], {\n   *   stroke: 'red',\n   *   left: 100,\n   *   top: 100\n   * });\n   */\n  constructor(points: XY[] = [], options: Props = {} as Props) {\n    super();\n    Object.assign(this, Polyline.ownDefaults);\n    this.setOptions(options);\n    this.points = points;\n    const { left, top } = options;\n    this.initialized = true;\n    this.setBoundingBox(true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  protected isOpen() {\n    return true;\n  }\n\n  private _projectStrokeOnPoints(options: TProjectStrokeOnPointsOptions) {\n    return projectStrokeOnPoints(this.points, options, this.isOpen());\n  }\n\n  /**\n   * Calculate the polygon bounding box\n   * @private\n   */\n  _calcDimensions(options?: Partial<TProjectStrokeOnPointsOptions>) {\n    options = {\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      strokeLineCap: this.strokeLineCap,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeUniform: this.strokeUniform,\n      strokeWidth: this.strokeWidth,\n      ...(options || {}),\n    };\n    const points = this.exactBoundingBox\n      ? this._projectStrokeOnPoints(\n          options as TProjectStrokeOnPointsOptions,\n        ).map((projection) => projection.projectedPoint)\n      : this.points;\n    if (points.length === 0) {\n      return {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        pathOffset: new Point(),\n        strokeOffset: new Point(),\n        strokeDiff: new Point(),\n      };\n    }\n    const bbox = makeBoundingBoxFromPoints(points),\n      // Remove scale effect, since it's applied after\n      matrix = calcDimensionsMatrix({ ...options, scaleX: 1, scaleY: 1 }),\n      bboxNoStroke = makeBoundingBoxFromPoints(\n        this.points.map((p) => transformPoint(p, matrix, true)),\n      ),\n      scale = new Point(this.scaleX, this.scaleY);\n    let offsetX = bbox.left + bbox.width / 2,\n      offsetY = bbox.top + bbox.height / 2;\n    if (this.exactBoundingBox) {\n      offsetX = offsetX - offsetY * Math.tan(degreesToRadians(this.skewX));\n      // Order of those assignments is important.\n      // offsetY relies on offsetX being already changed by the line above\n      offsetY = offsetY - offsetX * Math.tan(degreesToRadians(this.skewY));\n    }\n\n    return {\n      ...bbox,\n      pathOffset: new Point(offsetX, offsetY),\n      strokeOffset: new Point(bboxNoStroke.left, bboxNoStroke.top)\n        .subtract(new Point(bbox.left, bbox.top))\n        .multiply(scale),\n      strokeDiff: new Point(bbox.width, bbox.height)\n        .subtract(new Point(bboxNoStroke.width, bboxNoStroke.height))\n        .multiply(scale),\n    };\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = makeBoundingBoxFromPoints(this.points);\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { left, top, width, height, pathOffset, strokeOffset, strokeDiff } =\n      this._calcDimensions();\n    this.set({ width, height, pathOffset, strokeOffset, strokeDiff });\n    adjustPosition &&\n      this.setPositionByOrigin(\n        new Point(left + width / 2, top + height / 2),\n        CENTER,\n        CENTER,\n      );\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return this.exactBoundingBox;\n  }\n\n  /**\n   * @override stroke is taken in account in size\n   */\n  _getNonTransformedDimensions() {\n    return this.exactBoundingBox\n      ? // TODO: fix this\n        new Point(this.width, this.height)\n      : super._getNonTransformedDimensions();\n  }\n\n  /**\n   * @override stroke and skewing are taken into account when projecting stroke on points,\n   * therefore we don't want the default calculation to account for skewing as well.\n   * Though it is possible to pass `width` and `height` in `options`, doing so is very strange, use with discretion.\n   *\n   * @private\n   */\n  _getTransformedDimensions(options: any = {}) {\n    if (this.exactBoundingBox) {\n      let size: Point;\n      /* When `strokeUniform = true`, any changes to the properties require recalculating the `width` and `height` because\n        the stroke projections are affected.\n        When `strokeUniform = false`, we don't need to recalculate for scale transformations, as the effect of scale on\n        projections follows a linear function (e.g. scaleX of 2 just multiply width by 2)*/\n      if (\n        Object.keys(options).some(\n          (key) =>\n            this.strokeUniform ||\n            (this.constructor as typeof Polyline).layoutProperties.includes(\n              key as keyof TProjectStrokeOnPointsOptions,\n            ),\n        )\n      ) {\n        const { width, height } = this._calcDimensions(options);\n        size = new Point(options.width ?? width, options.height ?? height);\n      } else {\n        size = new Point(\n          options.width ?? this.width,\n          options.height ?? this.height,\n        );\n      }\n      return size.multiply(\n        new Point(options.scaleX || this.scaleX, options.scaleY || this.scaleY),\n      );\n    } else {\n      return super._getTransformedDimensions(options);\n    }\n  }\n\n  /**\n   * Recalculates dimensions when changing skew and scale\n   * @private\n   */\n  _set(key: string, value: any) {\n    const changed = this.initialized && this[key as keyof this] !== value;\n    const output = super._set(key, value);\n    if (\n      this.exactBoundingBox &&\n      changed &&\n      (((key === SCALE_X || key === SCALE_Y) &&\n        this.strokeUniform &&\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          'strokeUniform',\n        )) ||\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          key as keyof Polyline,\n        ))\n    ) {\n      this.setDimensions();\n    }\n    return output;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      points: this.points.map(({ x, y }) => ({ x, y })),\n    };\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const points = [],\n      diffX = this.pathOffset.x,\n      diffY = this.pathOffset.y,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n\n    for (let i = 0, len = this.points.length; i < len; i++) {\n      points.push(\n        toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS),\n        ',',\n        toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS),\n        ' ',\n      );\n    }\n    return [\n      `<${\n        (this.constructor as typeof Polyline).type.toLowerCase() as\n          | 'polyline'\n          | 'polygon'\n      } `,\n      'COMMON_PARTS',\n      `points=\"${points.join('')}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const len = this.points.length,\n      x = this.pathOffset.x,\n      y = this.pathOffset.y;\n\n    if (!len || isNaN(this.points[len - 1].y)) {\n      // do not draw if no points or odd points\n      // NaN comes from parseFloat of a empty string in parser\n      return;\n    }\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n    for (let i = 0; i < len; i++) {\n      const point = this.points[i];\n      ctx.lineTo(point.x - x, point.y - y);\n    }\n    !this.isOpen() && ctx.closePath();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance\n   */\n  complexity(): number {\n    return this.points.length;\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Polyline.fromElement})\n   * @static\n   * @memberOf Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns Polyline instance from an SVG element\n   * @static\n   * @memberOf Polyline\n   * @param {HTMLElement} element Element to parser\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const points = parsePointsAttribute(element.getAttribute('points')),\n      // we omit left and top to instruct the constructor to position the object using the bbox\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      { left, top, ...parsedAttributes } = parseAttributes(\n        element,\n        this.ATTRIBUTE_NAMES,\n        cssRules,\n      );\n    return new this(points, {\n      ...parsedAttributes,\n      ...options,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Polyline instance from an object representation\n   * @static\n   * @memberOf Polyline\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Polyline>}\n   */\n  static fromObject<T extends TOptions<SerializedPolylineProps>>(object: T) {\n    return this._fromObject<Polyline>(object, {\n      extraParam: 'points',\n    });\n  }\n}\n\nclassRegistry.setClass(Polyline);\nclassRegistry.setSVGClass(Polyline);\n","import { classRegistry } from '../ClassRegistry';\nimport { Polyline, polylineDefaultValues } from './Polyline';\n\nexport class Polygon extends Polyline {\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polygon';\n\n  protected isOpen() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Polygon);\nclassRegistry.setSVGClass(Polygon);\n","import type { ObjectEvents } from '../../EventTypeDefs';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { TOptions } from '../../typedefs';\nimport { FabricObject } from '../Object/FabricObject';\nimport { styleProperties } from './constants';\nimport type { StylePropertiesType } from './constants';\nimport type { FabricText } from './Text';\nimport { pick } from '../../util';\nimport { pickBy } from '../../util/misc/pick';\n\nexport type CompleteTextStyleDeclaration = Pick<\n  FabricText,\n  StylePropertiesType\n>;\n\nexport type TextStyleDeclaration = Partial<CompleteTextStyleDeclaration>;\n\nexport type TextStyle = {\n  [line: number | string]: { [char: number | string]: TextStyleDeclaration };\n};\n\nexport abstract class StyledText<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  declare abstract styles: TextStyle;\n  protected declare abstract _textLines: string[][];\n  protected declare _forceClearCache: boolean;\n  static _styleProperties: Readonly<StylePropertiesType[]> = styleProperties;\n  abstract get2DCursorLocation(\n    selectionStart: number,\n    skipWrapping?: boolean,\n  ): { charIndex: number; lineIndex: number };\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex?: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return true;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        // eslint-disable-next-line no-unused-vars\n        for (const p3 in obj[p1][p2]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if object has a style property or has it ina specified line\n   * This function is used to detect if a text will use a particular property or not.\n   * @param {String} property to check for\n   * @param {Number} lineIndex to check the style on\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex?: number): boolean {\n    if (!this.styles) {\n      return false;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return false;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { 0: this.styles[lineIndex] };\n    // eslint-disable-next-line\n    for (const p1 in obj) {\n      // eslint-disable-next-line\n      for (const p2 in obj[p1]) {\n        if (typeof obj[p1][p2][property] !== 'undefined') {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if characters in a text have a value for a property\n   * whose value matches the textbox's value for that property.  If so,\n   * the character-level property is deleted.  If the character\n   * has no other properties, then it is also deleted.  Finally,\n   * if the line containing that character has no other characters\n   * then it also is deleted.\n   */\n  cleanStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return false;\n    }\n    const obj = this.styles;\n    let stylesCount = 0,\n      letterCount,\n      stylePropertyValue,\n      allStyleObjectPropertiesMatch = true,\n      graphemeCount = 0;\n    for (const p1 in obj) {\n      letterCount = 0;\n      for (const p2 in obj[p1]) {\n        const styleObject = obj[p1][p2] || {},\n          stylePropertyHasBeenSet = styleObject[property] !== undefined;\n\n        stylesCount++;\n\n        if (stylePropertyHasBeenSet) {\n          if (!stylePropertyValue) {\n            stylePropertyValue = styleObject[property];\n          } else if (styleObject[property] !== stylePropertyValue) {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (styleObject[property] === this[property as keyof this]) {\n            delete styleObject[property];\n          }\n        } else {\n          allStyleObjectPropertiesMatch = false;\n        }\n\n        if (Object.keys(styleObject).length !== 0) {\n          letterCount++;\n        } else {\n          delete obj[p1][p2];\n        }\n      }\n\n      if (letterCount === 0) {\n        delete obj[p1];\n      }\n    }\n    // if every grapheme has the same style set then\n    // delete those styles and set it on the parent\n    for (let i = 0; i < this._textLines.length; i++) {\n      graphemeCount += this._textLines[i].length;\n    }\n    if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n      this[property as keyof this] = stylePropertyValue as any;\n      this.removeStyle(property);\n    }\n  }\n\n  /**\n   * Remove a style property or properties from all individual character styles\n   * in a text object.  Deletes the character style object if it contains no other style\n   * props.  Deletes a line style object if it contains no other character styles.\n   *\n   * @param {String} props The property to remove from character styles.\n   */\n  removeStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return;\n    }\n    const obj = this.styles;\n    let line, lineNum, charNum;\n    for (lineNum in obj) {\n      line = obj[lineNum];\n      for (charNum in line) {\n        delete line[charNum][property];\n        if (Object.keys(line[charNum]).length === 0) {\n          delete line[charNum];\n        }\n      }\n      if (Object.keys(line).length === 0) {\n        delete obj[lineNum];\n      }\n    }\n  }\n\n  private _extendStyles(index: number, style: TextStyleDeclaration): void {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(index);\n\n    if (!this._getLineStyle(lineIndex)) {\n      this._setLineStyle(lineIndex);\n    }\n\n    const newStyle = pickBy(\n      {\n        // first create a new object that is a merge of existing and new\n        ...this._getStyleDeclaration(lineIndex, charIndex),\n        ...style,\n        // use the predicate to discard undefined values\n      },\n      (value) => value !== undefined,\n    );\n\n    // finally assign to the old position the new style\n    this._setStyleDeclaration(lineIndex, charIndex, newStyle);\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number,\n    endIndex?: number,\n    complete?: boolean,\n  ): TextStyleDeclaration[] {\n    const styles: TextStyleDeclaration[] = [];\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      styles.push(this.getStyleAtPosition(i, complete));\n    }\n    return styles;\n  }\n\n  /**\n   * Gets style of a current selection/cursor position\n   * @param {Number} position  to get styles at\n   * @param {Boolean} [complete] full style if true\n   * @return {Object} style Style object at a specified index\n   * @private\n   */\n  getStyleAtPosition(position: number, complete?: boolean) {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(position);\n    return complete\n      ? this.getCompleteStyleDeclaration(lineIndex, charIndex)\n      : this._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} styles Styles object\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified startIndex + 1\n   */\n  setSelectionStyles(styles: object, startIndex: number, endIndex?: number) {\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      this._extendStyles(i, styles);\n    }\n    /* not included in _extendStyles to avoid clearing cache more than once */\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Get a reference, not a clone, to the style object for a given character,\n   * if no style is set for a line or char, return a new empty object.\n   * This is tricky and confusing because when you get an empty object you can't\n   * determine if it is a reference or a new one.\n   * @TODO this should always return a reference or always a clone or undefined when necessary.\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    const lineStyle = this.styles && this.styles[lineIndex];\n    return lineStyle ? lineStyle[charIndex] ?? {} : {};\n  }\n\n  /**\n   * return a new object that contains all the style property for a character\n   * the object returned is newly created\n   * @param {Number} lineIndex of the line where the character is\n   * @param {Number} charIndex position of the character on the line\n   * @return {Object} style object\n   */\n  getCompleteStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): CompleteTextStyleDeclaration {\n    return {\n      ...pick(\n        this,\n        (this.constructor as typeof StyledText)\n          ._styleProperties as (keyof this)[],\n      ),\n      ...this._getStyleDeclaration(lineIndex, charIndex),\n    } as CompleteTextStyleDeclaration;\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    this.styles[lineIndex][charIndex] = style;\n  }\n\n  /**\n   *\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    delete this.styles[lineIndex][charIndex];\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @return {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    return !!this.styles[lineIndex];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    this.styles[lineIndex] = {};\n  }\n\n  protected _deleteLineStyle(lineIndex: number) {\n    delete this.styles[lineIndex];\n  }\n}\n","import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText, GraphemeBBox } from './Text';\nimport { STROKE, FILL } from '../../constants';\nimport { createRotateMatrix } from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport { Point } from '../../Point';\nimport { matrixToSVG } from '../../util/misc/svgExport';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver?: TSVGReviver): string {\n    const textSvg = this._createBaseSVGMarkup(this._toSVG(), {\n        reviver,\n        noStyle: true,\n        withShadow: true,\n      }),\n      path = this.path;\n    if (path) {\n      return (\n        textSvg +\n        path._createBaseSVGMarkup(path._toSVG(), {\n          reviver,\n          withShadow: true,\n          additionalTransform: matrixToSVG(this.calcOwnMatrix()),\n        })\n      );\n    }\n    return textSvg;\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    },\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `,\n      `font-size=\"${this.fontSize}\" `,\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number,\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // bounding-box background\n    this.backgroundColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          this.backgroundColor,\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height,\n        ),\n      );\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n        this._setSVGTextLineBg(\n          textBgRects,\n          i,\n          textLeftOffset + lineOffset,\n          height,\n        );\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height,\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number,\n    charBox: GraphemeBBox,\n  ) {\n    const numFractionDigit = config.NUM_FRACTION_DIGITS;\n    const styleProps = this.getSvgSpanStyles(\n        styleDecl,\n        char !== char.trim() || !!char.match(multipleSpacesRegex),\n      ),\n      fillStyles = styleProps ? `style=\"${styleProps}\"` : '',\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, numFractionDigit)}\" ` : '',\n      { angle, renderLeft, renderTop, width } = charBox;\n    let angleAttr = '';\n    if (renderLeft !== undefined) {\n      const wBy2 = width / 2;\n      angle &&\n        (angleAttr = ` rotate=\"${toFixed(radiansToDegrees(angle), numFractionDigit)}\"`);\n      const m = createRotateMatrix({ angle: radiansToDegrees(angle!) });\n      m[4] = renderLeft!;\n      m[5] = renderTop!;\n      const renderPoint = new Point(-wBy2, 0).transform(m);\n      left = renderPoint.x;\n      top = renderPoint.y;\n    }\n\n    return `<tspan x=\"${toFixed(left, numFractionDigit)}\" y=\"${toFixed(\n      top,\n      numFractionDigit,\n    )}\" ${dySpan}${angleAttr}${fillStyles}>${escapeXml(char)}</tspan>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || this.path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing or a path, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset,\n            charBox,\n          ),\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number,\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine,\n            ),\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine,\n        ),\n      );\n  }\n\n  /**\n   * @deprecated unused\n   */\n  _getSVGLineTopOffset(\n    this: TextSVGExportMixin & FabricText,\n    lineIndex: number,\n  ) {\n    let lineTopOffset = 0,\n      j;\n    for (j = 0; j < lineIndex; j++) {\n      lineTopOffset += this.getHeightOfLine(j);\n    }\n    const lastHeight = this.getHeightOfLine(j);\n    return {\n      lineTop: lineTopOffset,\n      offset:\n        ((this._fontSizeMult - this._fontSizeFraction) * lastHeight) /\n        (this.lineHeight * this._fontSizeMult),\n    };\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    return `${super.getSvgStyles(skipShadow)} text-decoration-thickness: ${toFixed((this.textDecorationThickness * this.getObjectScaling().y) / 10, config.NUM_FRACTION_DIGITS)}%; white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean,\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n      textDecorationThickness,\n      linethrough,\n      overline,\n      underline,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration({\n      underline: underline ?? this.underline,\n      overline: overline ?? this.overline,\n      linethrough: linethrough ?? this.linethrough,\n    });\n    const thickness = textDecorationThickness || this.textDecorationThickness;\n    return [\n      stroke ? colorPropToSVG(STROKE, stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration\n        ? `text-decoration: ${textDecoration}; text-decoration-thickness: ${toFixed((thickness * this.getObjectScaling().y) / 10, config.NUM_FRACTION_DIGITS)}%; `\n        : '',\n      fill ? colorPropToSVG(FILL, fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ],\n      )\n      .join(' ');\n  }\n}\n","import { cache } from '../../cache';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, STROKE } from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type {\n  CompleteTextStyleDeclaration,\n  TextStyle,\n  TextStyleDeclaration,\n} from './StyledText';\nimport { StyledText } from './StyledText';\nimport { SHARED_ATTRIBUTES } from '../../parser/attributes';\nimport { parseAttributes } from '../../parser/parseAttributes';\nimport type {\n  Abortable,\n  TCacheCanvasDimensions,\n  TClassProperties,\n  TFiller,\n  TOptions,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { graphemeSplit } from '../../util/lang_string';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport type { TextStyleArray } from '../../util/misc/textStyles';\nimport {\n  hasStyleChanged,\n  stylesFromArray,\n  stylesToArray,\n} from '../../util/misc/textStyles';\nimport { getPathSegmentsInfo, getPointOnPath } from '../../util/path';\nimport { cacheProperties } from '../Object/FabricObject';\nimport type { Path } from '../Path';\nimport { TextSVGExportMixin } from './TextSVGExportMixin';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { StylePropertiesType } from './constants';\nimport {\n  additionalProps,\n  textDefaultValues,\n  textLayoutProperties,\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n  TEXT_DECORATION_THICKNESS,\n} from './constants';\nimport { CENTER, LEFT, RIGHT, TOP, BOTTOM } from '../../constants';\nimport { isFiller } from '../../util/typeAssertions';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { CSSRules } from '../../parser/typedefs';\n\nlet measuringContext: CanvasRenderingContext2D | null;\n\n/**\n * Return a context for measurement of text string.\n * if created it gets stored for reuse\n */\nfunction getMeasuringContext() {\n  if (!measuringContext) {\n    const canvas = createCanvasElementFor({\n      width: 0,\n      height: 0,\n    });\n    measuringContext = canvas.getContext('2d');\n  }\n  return measuringContext;\n}\n\nexport type TPathSide = 'left' | 'right';\n\nexport type TPathAlign = 'baseline' | 'center' | 'ascender' | 'descender';\n\nexport type TextLinesInfo = {\n  lines: string[];\n  graphemeLines: string[][];\n  graphemeText: string[];\n  _unwrappedLines: string[][];\n};\n\n/**\n * Measure and return the info of a single grapheme.\n * needs the the info of previous graphemes already filled\n * Override to customize measuring\n */\nexport type GraphemeBBox = {\n  width: number;\n  height: number;\n  kernedWidth: number;\n  left: number;\n  deltaY: number;\n  renderLeft?: number;\n  renderTop?: number;\n  angle?: number;\n};\n\n// @TODO this is not complete\ninterface UniqueTextProps {\n  charSpacing: number;\n  lineHeight: number;\n  fontSize: number;\n  fontWeight: string | number;\n  fontFamily: string;\n  fontStyle: string;\n  pathSide: TPathSide;\n  pathAlign: TPathAlign;\n  underline: boolean;\n  overline: boolean;\n  linethrough: boolean;\n  textAlign: string;\n  direction: CanvasDirection;\n  path?: Path;\n  textDecorationThickness: number;\n}\n\nexport interface SerializedTextProps\n  extends SerializedObjectProps,\n    UniqueTextProps {\n  styles: TextStyleArray | TextStyle;\n}\n\nexport interface TextProps extends FabricObjectProps, UniqueTextProps {\n  styles: TextStyle;\n}\n\n/**\n * Text class\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n */\nexport class FabricText<\n    Props extends TOptions<TextProps> = Partial<TextProps>,\n    SProps extends SerializedTextProps = SerializedTextProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends StyledText<Props, SProps, EventSpec>\n  implements UniqueTextProps\n{\n  /**\n   * Properties that requires a text layout recalculation when changed\n   * @type string[]\n   * @protected\n   */\n  static textLayoutProperties: string[] = textLayoutProperties;\n\n  /**\n   * @private\n   */\n  declare _reNewline: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespaces that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpacesAndTabs: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespace that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpaceAndTab: RegExp;\n\n  /**\n   * Use this regular expression to filter consecutive groups of non spaces.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reWords: RegExp;\n\n  declare text: string;\n\n  /**\n   * Font size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare fontSize: number;\n\n  /**\n   * Font weight (e.g. bold, normal, 400, 600, 800)\n   * @type {(Number|String)}\n   * @default\n   */\n  declare fontWeight: string | number;\n\n  /**\n   * Font family\n   * @type String\n   * @default\n   */\n  declare fontFamily: string;\n\n  /**\n   * Text decoration underline.\n   * @type Boolean\n   * @default\n   */\n  declare underline: boolean;\n\n  /**\n   * Text decoration overline.\n   * @type Boolean\n   * @default\n   */\n  declare overline: boolean;\n\n  /**\n   * Text decoration linethrough.\n   * @type Boolean\n   * @default\n   */\n  declare linethrough: boolean;\n\n  /**\n   * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n   * \"justify-left\", \"justify-center\" or \"justify-right\".\n   * @type String\n   * @default\n   */\n  declare textAlign: string;\n\n  /**\n   * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n   * @type String\n   * @default\n   */\n  declare fontStyle: string;\n\n  /**\n   * Line height\n   * @type Number\n   * @default\n   */\n  declare lineHeight: number;\n\n  /**\n   * Superscript schema object (minimum overlap)\n   */\n  declare superscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (upwards)\n     * @default -0.35\n     */\n    baseline: number;\n  };\n\n  /**\n   * Subscript schema object (minimum overlap)\n   */\n  declare subscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (downwards)\n     * @default 0.11\n     */\n    baseline: number;\n  };\n\n  /**\n   * Background color of text lines\n   * @type String\n   * @default\n   */\n  declare textBackgroundColor: string;\n\n  declare styles: TextStyle;\n\n  /**\n   * Path that the text should follow.\n   * since 4.6.0 the path will be drawn automatically.\n   * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n   * if you want it to be hidden, assign visible = false to the path.\n   * This feature is in BETA, and SVG import/export is not yet supported.\n   * @type Path\n   * @example\n   * const textPath = new Text('Text on a path', {\n   *     top: 150,\n   *     left: 150,\n   *     textAlign: 'center',\n   *     charSpacing: -50,\n   *     path: new Path('M 0 0 C 50 -100 150 -100 200 0', {\n   *         strokeWidth: 1,\n   *         visible: false\n   *     }),\n   *     pathSide: 'left',\n   *     pathStartOffset: 0\n   * });\n   * @default\n   */\n  declare path?: Path;\n\n  /**\n   * The text decoration tickness for underline, overline and strikethrough\n   * The tickness is expressed in thousandths of fontSize ( em ).\n   * The original value was 1/15 that translates to 66.6667 thousandths.\n   * The choice of unit of measure is to align with charSpacing.\n   * You can slim the tickness without issues, while large underline or overline may end up\n   * outside the bounding box of the text. In order to fix that a bigger refactor of the code\n   * is needed and is out of scope for now. If you need such large overline on the first line\n   * of text or large underline on the last line of text, consider disabling caching as a\n   * workaround\n   * @default 66.667\n   */\n  declare textDecorationThickness: number;\n\n  /**\n   * Offset amount for text path starting position\n   * Only used when text has a path\n   * @default\n   */\n  declare pathStartOffset: number;\n\n  /**\n   * Which side of the path the text should be drawn on.\n   * Only used when text has a path\n   * @type {TPathSide} 'left|right'\n   * @default\n   */\n  declare pathSide: TPathSide;\n\n  /**\n   * How text is aligned to the path. This property determines\n   * the perpendicular position of each character relative to the path.\n   * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n   * This feature is in BETA, and its behavior may change\n   * @type TPathAlign\n   * @default\n   */\n  declare pathAlign: TPathAlign;\n\n  /**\n   * @private\n   */\n  declare _fontSizeFraction: number;\n\n  /**\n   * @private\n   */\n  declare offsets: { underline: number; linethrough: number; overline: number };\n\n  /**\n   * Text Line proportion to font Size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare _fontSizeMult: number;\n\n  /**\n   * additional space between characters\n   * expressed in thousands of em unit\n   * @type Number\n   * @default\n   */\n  declare charSpacing: number;\n\n  /**\n   * Baseline shift, styles only, keep at 0 for the main text object\n   * @type {Number}\n   * @default\n   */\n  declare deltaY: number;\n\n  /**\n   * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n   * determine the direction of the text.\n   * This has to be set manually together with textAlign and originX for proper\n   * experience.\n   * some interesting link for the future\n   * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n   * @since 4.5.0\n   * @type {CanvasDirection} 'ltr|rtl'\n   * @default\n   */\n  declare direction: CanvasDirection;\n\n  /**\n   * contains characters bounding boxes\n   * This variable is considered to be protected.\n   * But for how mixins are implemented right now, we can't leave it private\n   * @protected\n   */\n  __charBounds: GraphemeBBox[][] = [];\n\n  /**\n   * use this size when measuring text. To avoid IE11 rounding errors\n   * @type {Number}\n   * @default\n   * @readonly\n   * @private\n   */\n  declare CACHE_FONT_SIZE: number;\n\n  /**\n   * contains the min text width to avoid getting 0\n   * @type {Number}\n   * @default\n   */\n  declare MIN_TEXT_WIDTH: number;\n\n  /**\n   * contains the the text of the object, divided in lines as they are displayed\n   * on screen. Wrapping will divide the text independently of line breaks\n   * @type {string[]}\n   * @default\n   */\n  declare textLines: string[];\n\n  /**\n   * same as textlines, but each line is an array of graphemes as split by splitByGrapheme\n   * @type {string[]}\n   * @default\n   */\n  declare _textLines: string[][];\n\n  declare _unwrappedTextLines: string[][];\n  declare _text: string[];\n  declare cursorWidth: number;\n  declare __lineHeights: number[];\n  declare __lineWidths: number[];\n  declare initialized?: true;\n\n  static cacheProperties = [...cacheProperties, ...additionalProps];\n\n  static ownDefaults = textDefaultValues;\n\n  static type = 'Text';\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...FabricText.ownDefaults };\n  }\n\n  constructor(text: string, options?: Props) {\n    super();\n    Object.assign(this, FabricText.ownDefaults);\n    this.setOptions(options);\n    if (!this.styles) {\n      this.styles = {};\n    }\n    this.text = text;\n    this.initialized = true;\n    if (this.path) {\n      this.setPathInfo();\n    }\n    this.initDimensions();\n    this.setCoords();\n  }\n\n  /**\n   * If text has a path, it will add the extra information needed\n   * for path and text calculations\n   */\n  setPathInfo() {\n    const path = this.path;\n    if (path) {\n      path.segmentsInfo = getPathSegmentsInfo(path.path);\n    }\n  }\n\n  /**\n   * @private\n   * Divides text into lines of text and lines of graphemes.\n   */\n  _splitText(): TextLinesInfo {\n    const newLines = this._splitTextIntoLines(this.text);\n    this.textLines = newLines.lines;\n    this._textLines = newLines.graphemeLines;\n    this._unwrappedTextLines = newLines._unwrappedLines;\n    this._text = newLines.graphemeText;\n    return newLines;\n  }\n\n  /**\n   * Initialize or update text dimensions.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   */\n  initDimensions() {\n    this._splitText();\n    this._clearCache();\n    this.dirty = true;\n    if (this.path) {\n      this.width = this.path.width;\n      this.height = this.path.height;\n    } else {\n      this.width =\n        this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      this.height = this.calcTextHeight();\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n  }\n\n  /**\n   * Enlarge space boxes and shift the others\n   */\n  enlargeSpaces() {\n    let diffSpace,\n      currentLineWidth,\n      numberOfSpaces,\n      accumulatedSpace,\n      line,\n      charBound,\n      spaces;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      if (\n        this.textAlign !== JUSTIFY &&\n        (i === len - 1 || this.isEndOfWrapping(i))\n      ) {\n        continue;\n      }\n      accumulatedSpace = 0;\n      line = this._textLines[i];\n      currentLineWidth = this.getLineWidth(i);\n      if (\n        currentLineWidth < this.width &&\n        (spaces = this.textLines[i].match(this._reSpacesAndTabs))\n      ) {\n        numberOfSpaces = spaces.length;\n        diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n        for (let j = 0; j <= line.length; j++) {\n          charBound = this.__charBounds[i][j];\n          if (this._reSpaceAndTab.test(line[j])) {\n            charBound.width += diffSpace;\n            charBound.kernedWidth += diffSpace;\n            charBound.left += accumulatedSpace;\n            accumulatedSpace += diffSpace;\n          } else {\n            charBound.left += accumulatedSpace;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    return lineIndex === this._textLines.length - 1;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * It return always 1 for text and Itext. Textbox has its own implementation\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1;\n  missingNewlineOffset(_lineIndex: number): 1 {\n    return 1;\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor\n   * @param {Number} selectionStart\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(selectionStart: number, skipWrapping?: boolean) {\n    const lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n    let i: number;\n    for (i = 0; i < lines.length; i++) {\n      if (selectionStart <= lines[i].length) {\n        return {\n          lineIndex: i,\n          charIndex: selectionStart,\n        };\n      }\n      selectionStart -=\n        lines[i].length + this.missingNewlineOffset(i, skipWrapping);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex:\n        lines[i - 1].length < selectionStart\n          ? lines[i - 1].length\n          : selectionStart,\n    };\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of text object\n   */\n  toString(): string {\n    return `#<Text (${this.complexity()}): { \"text\": \"${\n      this.text\n    }\", \"fontFamily\": \"${this.fontFamily}\" }>`;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @param {Object} dim.x width of object to be cached\n   * @param {Object} dim.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const dims = super._getCacheCanvasDimensions();\n    const fontSize = this.fontSize;\n    dims.width += fontSize * dims.zoomX;\n    dims.height += fontSize * dims.zoomY;\n    return dims;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const path = this.path;\n    path && !path.isNotVisible() && path._render(ctx);\n    this._setTextStyles(ctx);\n    this._renderTextLinesBackground(ctx);\n    this._renderTextDecoration(ctx, 'underline');\n    this._renderText(ctx);\n    this._renderTextDecoration(ctx, 'overline');\n    this._renderTextDecoration(ctx, 'linethrough');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderText(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderTextStroke(ctx);\n      this._renderTextFill(ctx);\n    } else {\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n    }\n  }\n\n  /**\n   * Set the font parameter of the context with the object properties or with charStyle\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [charStyle] object with font style properties\n   * @param {String} [charStyle.fontFamily] Font Family\n   * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n   * @param {String} [charStyle.fontWeight] Font weight\n   * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n   */\n  _setTextStyles(\n    ctx: CanvasRenderingContext2D,\n    charStyle?: any,\n    forMeasuring?: boolean,\n  ) {\n    ctx.textBaseline = 'alphabetic';\n    if (this.path) {\n      switch (this.pathAlign) {\n        case CENTER:\n          ctx.textBaseline = 'middle';\n          break;\n        case 'ascender':\n          ctx.textBaseline = TOP;\n          break;\n        case 'descender':\n          ctx.textBaseline = BOTTOM;\n          break;\n      }\n    }\n    ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n  }\n\n  /**\n   * calculate and return the text Width measuring each line.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {Number} Maximum width of Text object\n   */\n  calcTextWidth(): number {\n    let maxWidth = this.getLineWidth(0);\n\n    for (let i = 1, len = this._textLines.length; i < len; i++) {\n      const currentLineWidth = this.getLineWidth(i);\n      if (currentLineWidth > maxWidth) {\n        maxWidth = currentLineWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  /**\n   * @private\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} line Text to render\n   * @param {Number} left Left position of text\n   * @param {Number} top Top position of text\n   * @param {Number} lineIndex Index of a line in a text\n   */\n  _renderTextLine(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: string[],\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    this._renderChars(method, ctx, line, left, top, lineIndex);\n  }\n\n  /**\n   * Renders the text background for lines, taking care of style\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextLinesBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n      return;\n    }\n    const originalFill = ctx.fillStyle,\n      leftOffset = this._getLeftOffset();\n    let lineTopOffset = this._getTopOffset();\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (\n        !this.textBackgroundColor &&\n        !this.styleHas('textBackgroundColor', i)\n      ) {\n        lineTopOffset += heightOfLine;\n        continue;\n      }\n      const jlen = this._textLines[i].length;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxWidth = 0;\n      let boxStart = 0;\n      let drawStart;\n      let currentColor;\n      let lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (let j = 0; j < jlen; j++) {\n        // at this point charbox are either standard or full with pathInfo if there is a path.\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (this.path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillStyle = currentColor;\n          currentColor &&\n            ctx.fillRect(\n              -charBox.width / 2,\n              (-heightOfLine / this.lineHeight) * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight,\n            );\n          ctx.restore();\n        } else if (currentColor !== lastColor) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = lastColor;\n          lastColor &&\n            ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight,\n            );\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      if (currentColor && !this.path) {\n        drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentColor;\n        ctx.fillRect(\n          drawStart,\n          lineTopOffset,\n          boxWidth,\n          heightOfLine / this.lineHeight,\n        );\n      }\n      lineTopOffset += heightOfLine;\n    }\n    ctx.fillStyle = originalFill;\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * measure and return the width of a single character.\n   * possibly overridden to accommodate different measure logic or\n   * to hook some external lib for character measurement\n   * @private\n   * @param {String} _char, char to be measured\n   * @param {Object} charStyle style of char to be measured\n   * @param {String} [previousChar] previous char\n   * @param {Object} [prevCharStyle] style of previous char\n   */\n  _measureChar(\n    _char: string,\n    charStyle: CompleteTextStyleDeclaration,\n    previousChar: string | undefined,\n    prevCharStyle: CompleteTextStyleDeclaration | Record<string, never>,\n  ) {\n    const fontCache = cache.getFontCache(charStyle),\n      fontDeclaration = this._getFontDeclaration(charStyle),\n      couple = previousChar + _char,\n      stylesAreEqual =\n        previousChar &&\n        fontDeclaration === this._getFontDeclaration(prevCharStyle),\n      fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE;\n    let width: number | undefined,\n      coupleWidth: number | undefined,\n      previousWidth: number | undefined,\n      kernedWidth: number | undefined;\n\n    if (previousChar && fontCache[previousChar] !== undefined) {\n      previousWidth = fontCache[previousChar];\n    }\n    if (fontCache[_char] !== undefined) {\n      kernedWidth = width = fontCache[_char];\n    }\n    if (stylesAreEqual && fontCache[couple] !== undefined) {\n      coupleWidth = fontCache[couple];\n      kernedWidth = coupleWidth - previousWidth!;\n    }\n    if (\n      width === undefined ||\n      previousWidth === undefined ||\n      coupleWidth === undefined\n    ) {\n      const ctx = getMeasuringContext()!;\n      // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n      this._setTextStyles(ctx, charStyle, true);\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        // safe to use the non-null since if undefined we defined it before.\n        kernedWidth = coupleWidth - previousWidth!;\n      }\n    }\n    return {\n      width: width * fontMultiplier,\n      kernedWidth: kernedWidth! * fontMultiplier,\n    };\n  }\n\n  /**\n   * Computes height of character at given position\n   * @param {Number} line the line index number\n   * @param {Number} _char the character index number\n   * @return {Number} fontSize of the character\n   */\n  getHeightOfChar(line: number, _char: number): number {\n    return this.getValueOfPropertyAt(line, _char, 'fontSize');\n  }\n\n  /**\n   * measure a text line measuring all characters.\n   * @param {Number} lineIndex line number\n   */\n  measureLine(lineIndex: number) {\n    const lineInfo = this._measureLine(lineIndex);\n    if (this.charSpacing !== 0) {\n      lineInfo.width -= this._getWidthOfCharSpacing();\n    }\n    if (lineInfo.width < 0) {\n      lineInfo.width = 0;\n    }\n    return lineInfo;\n  }\n\n  /**\n   * measure every grapheme of a line, populating __charBounds\n   * @param {Number} lineIndex\n   * @return {Object} object.width total width of characters\n   * @return {Object} object.numOfSpaces length of chars that match this._reSpacesAndTabs\n   */\n  _measureLine(lineIndex: number) {\n    let width = 0,\n      prevGrapheme: string | undefined,\n      graphemeInfo: GraphemeBBox | undefined;\n\n    const reverse = this.pathSide === RIGHT,\n      path = this.path,\n      line = this._textLines[lineIndex],\n      llength = line.length,\n      lineBounds = new Array<GraphemeBBox>(llength);\n\n    this.__charBounds[lineIndex] = lineBounds;\n    for (let i = 0; i < llength; i++) {\n      const grapheme = line[i];\n      graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n      lineBounds[i] = graphemeInfo;\n      width += graphemeInfo.kernedWidth;\n      prevGrapheme = grapheme;\n    }\n    // this latest bound box represent the last character of the line\n    // to simplify cursor handling in interactive mode.\n    lineBounds[llength] = {\n      left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0,\n    } as GraphemeBBox;\n    if (path && path.segmentsInfo) {\n      let positionInPath = 0;\n      const totalPathLength =\n        path.segmentsInfo[path.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case LEFT:\n          positionInPath = reverse ? totalPathLength - width : 0;\n          break;\n        case CENTER:\n          positionInPath = (totalPathLength - width) / 2;\n          break;\n        case RIGHT:\n          positionInPath = reverse ? 0 : totalPathLength - width;\n          break;\n        //todo - add support for justify\n      }\n      positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n      for (\n        let i = reverse ? llength - 1 : 0;\n        reverse ? i >= 0 : i < llength;\n        reverse ? i-- : i++\n      ) {\n        graphemeInfo = lineBounds[i];\n        if (positionInPath > totalPathLength) {\n          positionInPath %= totalPathLength;\n        } else if (positionInPath < 0) {\n          positionInPath += totalPathLength;\n        }\n        // it would probably much faster to send all the grapheme position for a line\n        // and calculate path position/angle at once.\n        this._setGraphemeOnPath(positionInPath, graphemeInfo);\n        positionInPath += graphemeInfo.kernedWidth;\n      }\n    }\n    return { width: width, numOfSpaces: 0 };\n  }\n\n  /**\n   * Calculate the angle  and the left,top position of the char that follow a path.\n   * It appends it to graphemeInfo to be reused later at rendering\n   * @private\n   * @param {Number} positionInPath to be measured\n   * @param {GraphemeBBox} graphemeInfo current grapheme box information\n   * @param {Object} startingPoint position of the point\n   */\n  _setGraphemeOnPath(positionInPath: number, graphemeInfo: GraphemeBBox) {\n    const centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n      path = this.path!;\n\n    // we are at currentPositionOnPath. we want to know what point on the path is.\n    const info = getPointOnPath(path.path, centerPosition, path.segmentsInfo)!;\n    graphemeInfo.renderLeft = info.x - path.pathOffset.x;\n    graphemeInfo.renderTop = info.y - path.pathOffset.y;\n    graphemeInfo.angle = info.angle + (this.pathSide === RIGHT ? Math.PI : 0);\n  }\n\n  /**\n   *\n   * @param {String} grapheme to be measured\n   * @param {Number} lineIndex index of the line where the char is\n   * @param {Number} charIndex position in the line\n   * @param {String} [prevGrapheme] character preceding the one to be measured\n   * @returns {GraphemeBBox} grapheme bbox\n   */\n  _getGraphemeBox(\n    grapheme: string,\n    lineIndex: number,\n    charIndex: number,\n    prevGrapheme?: string,\n    skipLeft?: boolean,\n  ): GraphemeBBox {\n    const style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      prevStyle = prevGrapheme\n        ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1)\n        : {},\n      info = this._measureChar(grapheme, style, prevGrapheme, prevStyle);\n    let kernedWidth = info.kernedWidth,\n      width = info.width,\n      charSpacing;\n\n    if (this.charSpacing !== 0) {\n      charSpacing = this._getWidthOfCharSpacing();\n      width += charSpacing;\n      kernedWidth += charSpacing;\n    }\n\n    const box: GraphemeBBox = {\n      width,\n      left: 0,\n      height: style.fontSize,\n      kernedWidth,\n      deltaY: style.deltaY,\n    };\n    if (charIndex > 0 && !skipLeft) {\n      const previousBox = this.__charBounds[lineIndex][charIndex - 1];\n      box.left =\n        previousBox.left + previousBox.width + info.kernedWidth - info.width;\n    }\n    return box;\n  }\n\n  /**\n   * Calculate height of line at 'lineIndex'\n   * @param {Number} lineIndex index of line to calculate\n   * @return {Number}\n   */\n  getHeightOfLine(lineIndex: number): number {\n    if (this.__lineHeights[lineIndex]) {\n      return this.__lineHeights[lineIndex];\n    }\n\n    // char 0 is measured before the line cycle because it needs to char\n    // emptylines\n    let maxHeight = this.getHeightOfChar(lineIndex, 0);\n    for (let i = 1, len = this._textLines[lineIndex].length; i < len; i++) {\n      maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n    }\n\n    return (this.__lineHeights[lineIndex] =\n      maxHeight * this.lineHeight * this._fontSizeMult);\n  }\n\n  /**\n   * Calculate text box height\n   */\n  calcTextHeight() {\n    let lineHeight,\n      height = 0;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineHeight = this.getHeightOfLine(i);\n      height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n    }\n    return height;\n  }\n\n  /**\n   * @private\n   * @return {Number} Left offset\n   */\n  _getLeftOffset(): number {\n    return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n  }\n\n  /**\n   * @private\n   * @return {Number} Top offset\n   */\n  _getTopOffset(): number {\n    return -this.height / 2;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   */\n  _renderTextCommon(\n    ctx: CanvasRenderingContext2D,\n    method: 'fillText' | 'strokeText',\n  ) {\n    ctx.save();\n    let lineHeights = 0;\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset();\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i),\n        maxHeight = heightOfLine / this.lineHeight,\n        leftOffset = this._getLineLeftOffset(i);\n      this._renderTextLine(\n        method,\n        ctx,\n        this._textLines[i],\n        left + leftOffset,\n        top + lineHeights + maxHeight,\n        i,\n      );\n      lineHeights += heightOfLine;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill && !this.styleHas(FILL)) {\n      return;\n    }\n\n    this._renderTextCommon(ctx, 'fillText');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextStroke(ctx: CanvasRenderingContext2D) {\n    if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    this._setLineDash(ctx, this.strokeDashArray);\n    ctx.beginPath();\n    this._renderTextCommon(ctx, 'strokeText');\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {String} method fillText or strokeText.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} line Content of the line, splitted in an array by grapheme\n   * @param {Number} left\n   * @param {Number} top\n   * @param {Number} lineIndex\n   */\n  _renderChars(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: Array<any>,\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      path = this.path,\n      shortCut =\n        !isJustify &&\n        this.charSpacing === 0 &&\n        this.isEmptyStyles(lineIndex) &&\n        !path,\n      isLtr = this.direction === 'ltr',\n      sign = this.direction === 'ltr' ? 1 : -1,\n      // this was changed in the PR #7674\n      // currentDirection = ctx.canvas.getAttribute('dir');\n      currentDirection = ctx.direction;\n\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      boxWidth = 0,\n      timeToRender,\n      drawingLeft;\n\n    ctx.save();\n    if (currentDirection !== this.direction) {\n      ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n      ctx.direction = isLtr ? 'ltr' : 'rtl';\n      ctx.textAlign = isLtr ? LEFT : RIGHT;\n    }\n    top -= (lineHeight * this._fontSizeFraction) / this.lineHeight;\n    if (shortCut) {\n      // render all the line in one pass without checking\n      // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n      this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top);\n      ctx.restore();\n      return;\n    }\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i] as Required<GraphemeBBox>;\n      if (boxWidth === 0) {\n        left += sign * (charBox.kernedWidth - charBox.width);\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, false);\n      }\n      if (timeToRender) {\n        if (path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            -boxWidth / 2,\n            0,\n          );\n          ctx.restore();\n        } else {\n          drawingLeft = left;\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            drawingLeft,\n            top,\n          );\n        }\n        charsToRender = '';\n        actualStyle = nextStyle;\n        left += sign * boxWidth;\n        boxWidth = 0;\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {TFiller} filler a fabric gradient instance\n   * @return {CanvasPattern} a pattern to use as fill/stroke style\n   */\n  _applyPatternGradientTransformText(filler: TFiller) {\n    // TODO: verify compatibility with strokeUniform\n    const width = this.width + this.strokeWidth,\n      height = this.height + this.strokeWidth,\n      pCanvas = createCanvasElementFor({\n        width,\n        height,\n      }),\n      pCtx = pCanvas.getContext('2d')!;\n    pCanvas.width = width;\n    pCanvas.height = height;\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.fillStyle = filler.toLive(pCtx)!;\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fill();\n    return pCtx.createPattern(pCanvas, 'no-repeat')!;\n  }\n\n  handleFiller<T extends 'fill' | 'stroke'>(\n    ctx: CanvasRenderingContext2D,\n    property: `${T}Style`,\n    filler: TFiller | string,\n  ): { offsetX: number; offsetY: number } {\n    let offsetX: number, offsetY: number;\n    if (isFiller(filler)) {\n      if (\n        (filler as Gradient<'linear'>).gradientUnits === 'percentage' ||\n        (filler as Gradient<'linear'>).gradientTransform ||\n        (filler as Pattern).patternTransform\n      ) {\n        // need to transform gradient in a pattern.\n        // this is a slow process. If you are hitting this codepath, and the object\n        // is not using caching, you should consider switching it on.\n        // we need a canvas as big as the current object caching canvas.\n        offsetX = -this.width / 2;\n        offsetY = -this.height / 2;\n        ctx.translate(offsetX, offsetY);\n        ctx[property] = this._applyPatternGradientTransformText(filler);\n        return { offsetX, offsetY };\n      } else {\n        // is a simple gradient or pattern\n        ctx[property] = filler.toLive(ctx)!;\n        return this._applyPatternGradientTransform(ctx, filler);\n      }\n    } else {\n      // is a color\n      ctx[property] = filler;\n    }\n    return { offsetX: 0, offsetY: 0 };\n  }\n\n  /**\n   * This function prepare the canvas for a stroke style, and stroke and strokeWidth\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with stroke and strokeWidth defined\n   * @returns\n   */\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    {\n      stroke,\n      strokeWidth,\n    }: Pick<CompleteTextStyleDeclaration, 'stroke' | 'strokeWidth'>,\n  ) {\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineDashOffset = this.strokeDashOffset;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.miterLimit = this.strokeMiterLimit;\n    return this.handleFiller(ctx, 'strokeStyle', stroke!);\n  }\n\n  /**\n   * This function prepare the canvas for a ill style, and fill\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with ill defined\n   * @returns\n   */\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    return this.handleFiller(ctx, 'fillStyle', fill!);\n  }\n\n  /**\n   * @private\n   * @param {String} method\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {String} _char\n   * @param {Number} left Left coordinate\n   * @param {Number} top Top coordinate\n   * @param {Number} lineHeight Height of the line\n   */\n  _renderChar(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    lineIndex: number,\n    charIndex: number,\n    _char: string,\n    left: number,\n    top: number,\n  ) {\n    const decl = this._getStyleDeclaration(lineIndex, charIndex),\n      fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      shouldFill = method === 'fillText' && fullDecl.fill,\n      shouldStroke =\n        method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n    if (!shouldStroke && !shouldFill) {\n      return;\n    }\n    ctx.save();\n\n    ctx.font = this._getFontDeclaration(fullDecl);\n\n    if (decl.textBackgroundColor) {\n      this._removeShadow(ctx);\n    }\n    if (decl.deltaY) {\n      top += decl.deltaY;\n    }\n\n    if (shouldFill) {\n      const fillOffsets = this._setFillStyles(ctx, fullDecl);\n      ctx.fillText(\n        _char,\n        left - fillOffsets.offsetX,\n        top - fillOffsets.offsetY,\n      );\n    }\n\n    if (shouldStroke) {\n      const strokeOffsets = this._setStrokeStyles(ctx, fullDecl);\n      ctx.strokeText(\n        _char,\n        left - strokeOffsets.offsetX,\n        top - strokeOffsets.offsetY,\n      );\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Turns the character into a 'superior figure' (i.e. 'superscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSuperscript(start: number, end: number) {\n    this._setScript(start, end, this.superscript);\n  }\n\n  /**\n   * Turns the character into an 'inferior figure' (i.e. 'subscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSubscript(start: number, end: number) {\n    this._setScript(start, end, this.subscript);\n  }\n\n  /**\n   * Applies 'schema' at given position\n   * @private\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   * @param {Number} schema\n   */\n  protected _setScript(\n    start: number,\n    end: number,\n    schema: {\n      size: number;\n      baseline: number;\n    },\n  ) {\n    const loc = this.get2DCursorLocation(start, true),\n      fontSize = this.getValueOfPropertyAt(\n        loc.lineIndex,\n        loc.charIndex,\n        'fontSize',\n      ),\n      dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n      style = {\n        fontSize: fontSize * schema.size,\n        deltaY: dy + fontSize * schema.baseline,\n      };\n    this.setSelectionStyles(style, start, end);\n  }\n\n  /**\n   * @private\n   * @param {Number} lineIndex index text line\n   * @return {Number} Line left offset\n   */\n  _getLineLeftOffset(lineIndex: number): number {\n    const lineWidth = this.getLineWidth(lineIndex),\n      lineDiff = this.width - lineWidth,\n      textAlign = this.textAlign,\n      direction = this.direction,\n      isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n    let leftOffset = 0;\n    if (\n      textAlign === JUSTIFY ||\n      (textAlign === JUSTIFY_CENTER && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_RIGHT && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_LEFT && !isEndOfWrapping)\n    ) {\n      return 0;\n    }\n    if (textAlign === CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (textAlign === JUSTIFY_CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === JUSTIFY_RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (direction === 'rtl') {\n      if (\n        textAlign === RIGHT ||\n        textAlign === JUSTIFY ||\n        textAlign === JUSTIFY_RIGHT\n      ) {\n        leftOffset = 0;\n      } else if (textAlign === LEFT || textAlign === JUSTIFY_LEFT) {\n        leftOffset = -lineDiff;\n      } else if (textAlign === CENTER || textAlign === JUSTIFY_CENTER) {\n        leftOffset = -lineDiff / 2;\n      }\n    }\n    return leftOffset;\n  }\n\n  /**\n   * @private\n   */\n  _clearCache() {\n    this._forceClearCache = false;\n    this.__lineWidths = [];\n    this.__lineHeights = [];\n    this.__charBounds = [];\n  }\n\n  /**\n   * Measure a single line given its index. Used to calculate the initial\n   * text bounding box. The values are calculated and stored in __lineWidths cache.\n   * @private\n   * @param {Number} lineIndex line number\n   * @return {Number} Line width\n   */\n  getLineWidth(lineIndex: number): number {\n    if (this.__lineWidths[lineIndex] !== undefined) {\n      return this.__lineWidths[lineIndex];\n    }\n\n    const { width } = this.measureLine(lineIndex);\n    this.__lineWidths[lineIndex] = width;\n    return width;\n  }\n\n  _getWidthOfCharSpacing() {\n    if (this.charSpacing !== 0) {\n      return (this.fontSize * this.charSpacing) / 1000;\n    }\n    return 0;\n  }\n\n  /**\n   * Retrieves the value of property at given character position\n   * @param {Number} lineIndex the line number\n   * @param {Number} charIndex the character number\n   * @param {String} property the property name\n   * @returns the value of 'property'\n   */\n  getValueOfPropertyAt<T extends StylePropertiesType>(\n    lineIndex: number,\n    charIndex: number,\n    property: T,\n  ): this[T] {\n    const charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n    return (charStyle[property] ?? this[property]) as this[T];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextDecoration(\n    ctx: CanvasRenderingContext2D,\n    type: 'underline' | 'linethrough' | 'overline',\n  ) {\n    if (!this[type] && !this.styleHas(type)) {\n      return;\n    }\n    let topOffset = this._getTopOffset();\n    const leftOffset = this._getLeftOffset(),\n      path = this.path,\n      charSpacing = this._getWidthOfCharSpacing(),\n      offsetAligner =\n        type === 'linethrough' ? 0.5 : type === 'overline' ? 1 : 0,\n      offsetY = this.offsets[type];\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (!this[type] && !this.styleHas(type, i)) {\n        topOffset += heightOfLine;\n        continue;\n      }\n      const line = this._textLines[i];\n      const maxHeight = heightOfLine / this.lineHeight;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxStart = 0;\n      let boxWidth = 0;\n      let lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n      let lastFill = this.getValueOfPropertyAt(i, 0, FILL);\n      let lastTickness = this.getValueOfPropertyAt(\n        i,\n        0,\n        TEXT_DECORATION_THICKNESS,\n      );\n      let currentDecoration = lastDecoration;\n      let currentFill = lastFill;\n      let currentTickness = lastTickness;\n      const top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n      let size = this.getHeightOfChar(i, 0);\n      let dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n      for (let j = 0, jlen = line.length; j < jlen; j++) {\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentDecoration = this.getValueOfPropertyAt(i, j, type);\n        currentFill = this.getValueOfPropertyAt(i, j, FILL);\n        currentTickness = this.getValueOfPropertyAt(\n          i,\n          j,\n          TEXT_DECORATION_THICKNESS,\n        );\n        const currentSize = this.getHeightOfChar(i, j);\n        const currentDy = this.getValueOfPropertyAt(i, j, 'deltaY');\n        if (path && currentDecoration && currentFill) {\n          const finalTickness = (this.fontSize * currentTickness) / 1000;\n          ctx.save();\n          // bug? verify lastFill is a valid fill here.\n          ctx.fillStyle = lastFill as string;\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillRect(\n            -charBox.kernedWidth / 2,\n            offsetY * currentSize + currentDy - offsetAligner * finalTickness,\n            charBox.kernedWidth,\n            finalTickness,\n          );\n          ctx.restore();\n        } else if (\n          (currentDecoration !== lastDecoration ||\n            currentFill !== lastFill ||\n            currentSize !== size ||\n            currentTickness !== lastTickness ||\n            currentDy !== dy) &&\n          boxWidth > 0\n        ) {\n          const finalTickness = (this.fontSize * lastTickness) / 1000;\n          let drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          if (lastDecoration && lastFill && lastTickness) {\n            // bug? verify lastFill is a valid fill here.\n            ctx.fillStyle = lastFill as string;\n            ctx.fillRect(\n              drawStart,\n              top + offsetY * size + dy - offsetAligner * finalTickness,\n              boxWidth,\n              finalTickness,\n            );\n          }\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastDecoration = currentDecoration;\n          lastTickness = currentTickness;\n          lastFill = currentFill;\n          size = currentSize;\n          dy = currentDy;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      let drawStart = leftOffset + lineLeftOffset + boxStart;\n      if (this.direction === 'rtl') {\n        drawStart = this.width - drawStart - boxWidth;\n      }\n      ctx.fillStyle = currentFill as string;\n      const finalTickness = (this.fontSize * currentTickness) / 1000;\n      currentDecoration &&\n        currentFill &&\n        currentTickness &&\n        ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy - offsetAligner * finalTickness,\n          boxWidth - charSpacing,\n          finalTickness,\n        );\n      topOffset += heightOfLine;\n    }\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * return font declaration string for canvas context\n   * @param {Object} [styleObject] object\n   * @returns {String} font declaration formatted for canvas context.\n   */\n  _getFontDeclaration(\n    {\n      fontFamily = this.fontFamily,\n      fontStyle = this.fontStyle,\n      fontWeight = this.fontWeight,\n      fontSize = this.fontSize,\n    }: Partial<\n      Pick<\n        TextStyleDeclaration,\n        'fontFamily' | 'fontStyle' | 'fontWeight' | 'fontSize'\n      >\n    > = {},\n    forMeasuring?: boolean,\n  ): string {\n    const parsedFontFamily =\n      fontFamily.includes(\"'\") ||\n      fontFamily.includes('\"') ||\n      fontFamily.includes(',') ||\n      FabricText.genericFonts.includes(fontFamily.toLowerCase())\n        ? fontFamily\n        : `\"${fontFamily}\"`;\n    return [\n      fontStyle,\n      fontWeight,\n      `${forMeasuring ? this.CACHE_FONT_SIZE : fontSize}px`,\n      parsedFontFamily,\n    ].join(' ');\n  }\n\n  /**\n   * Renders text instance on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    if (!this.visible) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    if (this._forceClearCache) {\n      this.initDimensions();\n    }\n    super.render(ctx);\n  }\n\n  /**\n   * Override this method to customize grapheme splitting\n   * @todo the util `graphemeSplit` needs to be injectable in some way.\n   * is more comfortable to inject the correct util rather than having to override text\n   * in the middle of the prototype chain\n   * @param {string} value\n   * @returns {string[]} array of graphemes\n   */\n  graphemeSplit(value: string): string[] {\n    return graphemeSplit(value);\n  }\n\n  /**\n   * Returns the text as an array of lines.\n   * @param {String} text text to split\n   * @returns  Lines in the text\n   */\n  _splitTextIntoLines(text: string): TextLinesInfo {\n    const lines = text.split(this._reNewline),\n      newLines = new Array<string[]>(lines.length),\n      newLine = ['\\n'];\n    let newText: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      newLines[i] = this.graphemeSplit(lines[i]);\n      newText = newText.concat(newLines[i], newLine);\n    }\n    newText.pop();\n    return {\n      _unwrappedLines: newLines,\n      lines: lines,\n      graphemeText: newText,\n      graphemeLines: newLines,\n    };\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject([...additionalProps, ...propertiesToInclude] as K[]),\n      styles: stylesToArray(this.styles, this.text),\n      ...(this.path ? { path: this.path.toObject() } : {}),\n    };\n  }\n\n  set(key: string | any, value?: any) {\n    const { textLayoutProperties } = this.constructor as typeof FabricText;\n    super.set(key, value);\n    let needsDims = false;\n    let isAddingPath = false;\n    if (typeof key === 'object') {\n      for (const _key in key) {\n        if (_key === 'path') {\n          this.setPathInfo();\n        }\n        needsDims = needsDims || textLayoutProperties.includes(_key);\n        isAddingPath = isAddingPath || _key === 'path';\n      }\n    } else {\n      needsDims = textLayoutProperties.includes(key);\n      isAddingPath = key === 'path';\n    }\n    if (isAddingPath) {\n      this.setPathInfo();\n    }\n    if (needsDims && this.initialized) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    return this;\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity\n   */\n  complexity(): number {\n    return 1;\n  }\n\n  /**\n   * List of generic font families\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#generic-name\n   */\n  static genericFonts = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n    'ui-serif',\n    'ui-sans-serif',\n    'ui-monospace',\n    'ui-rounded',\n    'math',\n    'emoji',\n    'fangsong',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricText.fromElement})\n   * @static\n   * @memberOf Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(\n    'x',\n    'y',\n    'dx',\n    'dy',\n    'font-family',\n    'font-style',\n    'font-weight',\n    'font-size',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor',\n  );\n\n  /**\n   * Returns FabricText instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf Text\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      FabricText.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    const {\n      textAnchor = LEFT as typeof LEFT | typeof CENTER | typeof RIGHT,\n      textDecoration = '',\n      dx = 0,\n      dy = 0,\n      top = 0,\n      left = 0,\n      fontSize = DEFAULT_SVG_FONT_SIZE,\n      strokeWidth = 1,\n      ...restOfOptions\n    } = { ...options, ...parsedAttributes };\n\n    const textContent = (element.textContent || '')\n      .replace(/^\\s+|\\s+$|\\n+/g, '')\n      .replace(/\\s+/g, ' ');\n\n    // this code here is probably the usual issue for SVG center find\n    // this can later looked at again and probably removed.\n\n    const text = new this(textContent, {\n        left: left + dx,\n        top: top + dy,\n        underline: textDecoration.includes('underline'),\n        overline: textDecoration.includes('overline'),\n        linethrough: textDecoration.includes('line-through'),\n        // we initialize this as 0\n        strokeWidth: 0,\n        fontSize,\n        ...restOfOptions,\n      }),\n      textHeightScaleFactor = text.getScaledHeight() / text.height,\n      lineHeightDiff =\n        (text.height + text.strokeWidth) * text.lineHeight - text.height,\n      scaledDiff = lineHeightDiff * textHeightScaleFactor,\n      textHeight = text.getScaledHeight() + scaledDiff;\n\n    let offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (textAnchor === CENTER) {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (textAnchor === RIGHT) {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top:\n        text.top -\n        (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) /\n          text.lineHeight,\n      strokeWidth,\n    });\n    return text;\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns FabricText instance from an object representation\n   * @param {Object} object plain js Object to create an instance from\n   * @returns {Promise<FabricText>}\n   */\n  static fromObject<\n    T extends TOptions<SerializedTextProps>,\n    S extends FabricText,\n  >(object: T) {\n    return this._fromObject<S>(\n      {\n        ...object,\n        styles: stylesFromArray(object.styles || {}, object.text),\n      },\n      {\n        extraParam: 'text',\n      },\n    );\n  }\n}\n\napplyMixins(FabricText, [TextSVGExportMixin]);\nclassRegistry.setClass(FabricText);\nclassRegistry.setSVGClass(FabricText);\n","import type {\n  DragEventData,\n  DropEventData,\n  TPointerEvent,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { IText } from './IText';\nimport { setStyle } from '../../util/dom_style';\nimport { cloneStyles } from '../../util/internals/cloneStyles';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, NONE } from '../../constants';\n\n/**\n * #### Dragging IText/Textbox Lifecycle\n * - {@link start} is called from `mousedown` {@link IText#_mouseDownHandler} and determines if dragging should start by testing {@link isPointerOverSelection}\n * - if true `mousedown` {@link IText#_mouseDownHandler} is blocked to keep selection\n * - if the pointer moves, canvas fires numerous mousemove {@link Canvas#_onMouseMove} that we make sure **aren't** prevented ({@link IText#shouldStartDragging}) in order for the window to start a drag session\n * - once/if the session starts canvas calls {@link onDragStart} on the active object to determine if dragging should occur\n * - canvas fires relevant drag events that are handled by the handlers defined in this scope\n * - {@link end} is called from `mouseup` {@link IText#mouseUpHandler}, blocking IText default click behavior\n * - in case the drag session didn't occur, {@link end} handles a click, since logic to do so was blocked during `mousedown`\n */\nexport class DraggableTextDelegate {\n  readonly target: IText;\n  private __mouseDownInPlace = false;\n  private __dragStartFired = false;\n  private __isDraggingOver = false;\n  private __dragStartSelection?: {\n    selectionStart: number;\n    selectionEnd: number;\n  };\n  private __dragImageDisposer?: VoidFunction;\n  private _dispose?: () => void;\n\n  constructor(target: IText) {\n    this.target = target;\n    const disposers = [\n      this.target.on('dragenter', this.dragEnterHandler.bind(this)),\n      this.target.on('dragover', this.dragOverHandler.bind(this)),\n      this.target.on('dragleave', this.dragLeaveHandler.bind(this)),\n      this.target.on('dragend', this.dragEndHandler.bind(this)),\n      this.target.on('drop', this.dropHandler.bind(this)),\n    ];\n    this._dispose = () => {\n      disposers.forEach((d) => d());\n      this._dispose = undefined;\n    };\n  }\n\n  isPointerOverSelection(e: TPointerEvent) {\n    const target = this.target;\n    const newSelection = target.getSelectionStartFromPointer(e);\n    return (\n      target.isEditing &&\n      newSelection >= target.selectionStart &&\n      newSelection <= target.selectionEnd &&\n      target.selectionStart < target.selectionEnd\n    );\n  }\n\n  /**\n   * @public override this method to disable dragging and default to mousedown logic\n   */\n  start(e: TPointerEvent) {\n    return (this.__mouseDownInPlace = this.isPointerOverSelection(e));\n  }\n\n  /**\n   * @public override this method to disable dragging without discarding selection\n   */\n  isActive() {\n    return this.__mouseDownInPlace;\n  }\n\n  /**\n   * Ends interaction and sets cursor in case of a click\n   * @returns true if was active\n   */\n  end(e: TPointerEvent) {\n    const active = this.isActive();\n    if (active && !this.__dragStartFired) {\n      // mousedown has been blocked since `active` is true => cursor has not been set.\n      // `__dragStartFired` is false => dragging didn't occur, pointer didn't move and is over selection.\n      // meaning this is actually a click, `active` is a false positive.\n      this.target.setCursorByClick(e);\n      this.target.initDelayedCursor(true);\n    }\n    this.__mouseDownInPlace = false;\n    this.__dragStartFired = false;\n    this.__isDraggingOver = false;\n    return active;\n  }\n\n  getDragStartSelection() {\n    return this.__dragStartSelection;\n  }\n\n  /**\n   * Override to customize the drag image\n   * https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage\n   */\n  setDragImage(\n    e: DragEvent,\n    {\n      selectionStart,\n      selectionEnd,\n    }: {\n      selectionStart: number;\n      selectionEnd: number;\n    },\n  ) {\n    const target = this.target;\n    const canvas = target.canvas!;\n    const flipFactor = new Point(target.flipX ? -1 : 1, target.flipY ? -1 : 1);\n    const boundaries = target._getCursorBoundaries(selectionStart);\n    const selectionPosition = new Point(\n      boundaries.left + boundaries.leftOffset,\n      boundaries.top + boundaries.topOffset,\n    ).multiply(flipFactor);\n    const pos = selectionPosition.transform(target.calcTransformMatrix());\n    const pointer = canvas.getScenePoint(e);\n    const diff = pointer.subtract(pos);\n    const retinaScaling = target.getCanvasRetinaScaling();\n    const bbox = target.getBoundingRect();\n    const correction = pos.subtract(new Point(bbox.left, bbox.top));\n    const vpt = canvas.viewportTransform;\n    const offset = correction.add(diff).transform(vpt, true);\n    //  prepare instance for drag image snapshot by making all non selected text invisible\n    const bgc = target.backgroundColor;\n    const styles = cloneStyles(target.styles);\n    target.backgroundColor = '';\n    const styleOverride = {\n      stroke: 'transparent',\n      fill: 'transparent',\n      textBackgroundColor: 'transparent',\n    };\n    target.setSelectionStyles(styleOverride, 0, selectionStart);\n    target.setSelectionStyles(styleOverride, selectionEnd, target.text.length);\n    target.dirty = true;\n    const dragImage = target.toCanvasElement({\n      enableRetinaScaling: canvas.enableRetinaScaling,\n      viewportTransform: true,\n    });\n    // restore values\n    target.backgroundColor = bgc;\n    target.styles = styles;\n    target.dirty = true;\n    //  position drag image offscreen\n    setStyle(dragImage, {\n      position: 'fixed',\n      left: `${-dragImage.width}px`,\n      border: NONE,\n      width: `${dragImage.width / retinaScaling}px`,\n      height: `${dragImage.height / retinaScaling}px`,\n    });\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    this.__dragImageDisposer = () => {\n      dragImage.remove();\n    };\n    getDocumentFromElement(\n      (e.target || this.target.hiddenTextarea)! as HTMLElement,\n    ).body.appendChild(dragImage);\n    e.dataTransfer?.setDragImage(dragImage, offset.x, offset.y);\n  }\n\n  /**\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drag source\n   */\n  onDragStart(e: DragEvent): boolean {\n    this.__dragStartFired = true;\n    const target = this.target;\n    const active = this.isActive();\n    if (active && e.dataTransfer) {\n      const selection = (this.__dragStartSelection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n      });\n      const value = target._text\n        .slice(selection.selectionStart, selection.selectionEnd)\n        .join('');\n      const data = { text: target.text, value, ...selection };\n      e.dataTransfer.setData('text/plain', value);\n      e.dataTransfer.setData(\n        'application/fabric',\n        JSON.stringify({\n          value: value,\n          styles: target.getSelectionStyles(\n            selection.selectionStart,\n            selection.selectionEnd,\n            true,\n          ),\n        }),\n      );\n      e.dataTransfer.effectAllowed = 'copyMove';\n      this.setDragImage(e, data);\n    }\n    target.abortCursorAnimation();\n    return active;\n  }\n\n  /**\n   * use {@link targetCanDrop} to respect overriding\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent): boolean {\n    if (\n      this.target.editable &&\n      !this.target.getActiveControl() &&\n      !e.defaultPrevented\n    ) {\n      if (this.isActive() && this.__dragStartSelection) {\n        //  drag source trying to drop over itself\n        //  allow dropping only outside of drag start selection\n        const index = this.target.getSelectionStartFromPointer(e);\n        const dragStartSelection = this.__dragStartSelection;\n        return (\n          index < dragStartSelection.selectionStart ||\n          index > dragStartSelection.selectionEnd\n        );\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * in order to respect overriding {@link IText#canDrop} we call that instead of calling {@link canDrop} directly\n   */\n  protected targetCanDrop(e: DragEvent) {\n    return this.target.canDrop(e);\n  }\n\n  dragEnterHandler({ e }: DragEventData) {\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    }\n  }\n\n  dragOverHandler(ev: DragEventData) {\n    const { e } = ev;\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    } else if (this.__isDraggingOver && !canDrop) {\n      //  drop state has changed\n      this.__isDraggingOver = false;\n    }\n    if (this.__isDraggingOver) {\n      //  can be dropped, inform browser\n      e.preventDefault();\n      //  inform event subscribers\n      ev.canDrop = true;\n      ev.dropTarget = this.target;\n    }\n  }\n\n  dragLeaveHandler() {\n    if (this.__isDraggingOver || this.isActive()) {\n      this.__isDraggingOver = false;\n    }\n  }\n\n  /**\n   * Override the `text/plain | application/fabric` types of {@link DragEvent#dataTransfer}\n   * in order to change the drop value or to customize styling respectively, by listening to the `drop:before` event\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#performing_a_drop\n   */\n  dropHandler(ev: DropEventData) {\n    const { e } = ev;\n    const didDrop = e.defaultPrevented;\n    this.__isDraggingOver = false;\n    // inform browser that the drop has been accepted\n    e.preventDefault();\n    let insert = e.dataTransfer?.getData('text/plain');\n    if (insert && !didDrop) {\n      const target = this.target;\n      const canvas = target.canvas!;\n      let insertAt = target.getSelectionStartFromPointer(e);\n      const { styles } = (\n        e.dataTransfer!.types.includes('application/fabric')\n          ? JSON.parse(e.dataTransfer!.getData('application/fabric'))\n          : {}\n      ) as { styles: TextStyleDeclaration[] };\n      const trailing = insert[Math.max(0, insert.length - 1)];\n      const selectionStartOffset = 0;\n      //  drag and drop in same instance\n      if (this.__dragStartSelection) {\n        const selectionStart = this.__dragStartSelection.selectionStart;\n        const selectionEnd = this.__dragStartSelection.selectionEnd;\n        if (insertAt > selectionStart && insertAt <= selectionEnd) {\n          insertAt = selectionStart;\n        } else if (insertAt > selectionEnd) {\n          insertAt -= selectionEnd - selectionStart;\n        }\n        target.removeChars(selectionStart, selectionEnd);\n        // prevent `dragend` from handling event\n        delete this.__dragStartSelection;\n      }\n      //  remove redundant line break\n      if (\n        target._reNewline.test(trailing) &&\n        (target._reNewline.test(target._text[insertAt]) ||\n          insertAt === target._text.length)\n      ) {\n        insert = insert.trimEnd();\n      }\n      //  inform subscribers\n      ev.didDrop = true;\n      ev.dropTarget = target;\n      //  finalize\n      target.insertChars(insert, styles, insertAt);\n      // can this part be moved in an outside event? andrea to check.\n      canvas.setActiveObject(target);\n      target.enterEditing(e);\n      target.selectionStart = Math.min(\n        insertAt + selectionStartOffset,\n        target._text.length,\n      );\n      target.selectionEnd = Math.min(\n        target.selectionStart + insert.length,\n        target._text.length,\n      );\n      target.hiddenTextarea!.value = target.text;\n      target._updateTextarea();\n      target.hiddenTextarea!.focus();\n      target.fire(CHANGED, {\n        index: insertAt + selectionStartOffset,\n        action: 'drop',\n      });\n      canvas.fire('text:changed', { target });\n      canvas.contextTopDirty = true;\n      canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * fired only on the drag source after drop (if occurred)\n   * handle changes to the drag source in case of a drop on another object or a cancellation\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   */\n  dragEndHandler({ e }: DragEventData) {\n    if (this.isActive() && this.__dragStartFired) {\n      //  once the drop event finishes we check if we need to change the drag source\n      //  if the drag source received the drop we bail out since the drop handler has already handled logic\n      if (this.__dragStartSelection) {\n        const target = this.target;\n        const canvas = this.target.canvas!;\n        const { selectionStart, selectionEnd } = this.__dragStartSelection;\n        const dropEffect = e.dataTransfer?.dropEffect || NONE;\n        if (dropEffect === NONE) {\n          // pointer is back over selection\n          target.selectionStart = selectionStart;\n          target.selectionEnd = selectionEnd;\n          target._updateTextarea();\n          target.hiddenTextarea!.focus();\n        } else {\n          target.clearContextTop();\n          if (dropEffect === 'move') {\n            target.removeChars(selectionStart, selectionEnd);\n            target.selectionStart = target.selectionEnd = selectionStart;\n            target.hiddenTextarea &&\n              (target.hiddenTextarea.value = target.text);\n            target._updateTextarea();\n            target.fire(CHANGED, {\n              index: selectionStart,\n              action: 'dragend',\n            });\n            canvas.fire('text:changed', { target });\n            canvas.requestRenderAll();\n          }\n          target.exitEditing();\n        }\n      }\n    }\n\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    delete this.__dragImageDisposer;\n    delete this.__dragStartSelection;\n    this.__isDraggingOver = false;\n  }\n\n  dispose() {\n    this._dispose && this._dispose();\n  }\n}\n","import type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { FabricText } from '../Text/Text';\nimport { animate } from '../../util/animation/animate';\nimport type { TOnAnimationChangeCallback } from '../../util/animation/types';\nimport type { ValueAnimation } from '../../util/animation/ValueAnimation';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport type { TOptions } from '../../typedefs';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, MODIFIED, RIGHT, reNewline } from '../../constants';\nimport type { IText } from './IText';\n\n/**\n *  extend this regex to support non english languages\n *\n *  - ` `      Matches a SPACE character (char code 32).\n *  - `\\n`     Matches a LINE FEED character (char code 10).\n *  - `\\.`     Matches a \".\" character (char code 46).\n *  - `,`      Matches a \",\" character (char code 44).\n *  - `;`      Matches a \";\" character (char code 59).\n *  - `!`      Matches a \"!\" character (char code 33).\n *  - `\\?`     Matches a \"?\" character (char code 63).\n *  - `\\-`     Matches a \"-\" character (char code 45).\n */\n// eslint-disable-next-line no-useless-escape\nconst reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\nexport type ITextEvents = ObjectEvents & {\n  'selection:changed': never;\n  changed: never | { index: number; action: string };\n  'editing:entered': never | { e: TPointerEvent };\n  'editing:exited': never;\n};\n\nexport abstract class ITextBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends FabricText<Props, SProps, EventSpec> {\n  declare abstract isEditing: boolean;\n  declare abstract cursorDelay: number;\n  declare abstract selectionStart: number;\n  declare abstract selectionEnd: number;\n  declare abstract cursorDuration: number;\n  declare abstract editable: boolean;\n  declare abstract editingBorderColor: string;\n\n  declare abstract compositionStart: number;\n  declare abstract compositionEnd: number;\n\n  declare abstract hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * Helps determining when the text is in composition, so that the cursor\n   * rendering is altered.\n   */\n  protected declare inCompositionMode: boolean;\n\n  protected declare _reSpace: RegExp;\n  private declare _currentTickState?: ValueAnimation;\n  private declare _currentTickCompleteState?: ValueAnimation;\n  protected _currentCursorOpacity = 1;\n  private declare _textBeforeEdit: string;\n  protected declare __selectionStartOnMouseDown: number;\n\n  /**\n   * Keeps track if the IText object was selected before the actual click.\n   * This because we want to delay enter editing by a click.\n   */\n  protected declare selected: boolean;\n  protected declare cursorOffsetCache: { left?: number; top?: number };\n  protected declare _savedProps?: {\n    hasControls: boolean;\n    borderColor: string;\n    lockMovementX: boolean;\n    lockMovementY: boolean;\n    selectable: boolean;\n    hoverCursor: CSSStyleDeclaration['cursor'] | null;\n    defaultCursor?: CSSStyleDeclaration['cursor'];\n    moveCursor?: CSSStyleDeclaration['cursor'];\n  };\n  protected declare _selectionDirection: 'left' | 'right' | null;\n\n  abstract initHiddenTextarea(): void;\n  abstract _fireSelectionChanged(): void;\n  abstract renderCursorOrSelection(): void;\n  abstract getSelectionStartFromPointer(e: TPointerEvent): number;\n  abstract _getCursorBoundaries(\n    index: number,\n    skipCaching?: boolean,\n  ): {\n    left: number;\n    top: number;\n    leftOffset: number;\n    topOffset: number;\n  };\n\n  /**\n   * Initializes all the interactive behavior of IText\n   */\n  initBehavior() {\n    this._tick = this._tick.bind(this);\n    this._onTickComplete = this._onTickComplete.bind(this);\n    this.updateSelectionOnMouseMove =\n      this.updateSelectionOnMouseMove.bind(this);\n  }\n\n  onDeselect(options?: { e?: TPointerEvent; object?: FabricObject }) {\n    this.isEditing && this.exitEditing();\n    this.selected = false;\n    return super.onDeselect(options);\n  }\n\n  /**\n   * @private\n   */\n  _animateCursor({\n    toValue,\n    duration,\n    delay,\n    onComplete,\n  }: {\n    toValue: number;\n    duration: number;\n    delay?: number;\n    onComplete?: TOnAnimationChangeCallback<number, void>;\n  }) {\n    return animate({\n      startValue: this._currentCursorOpacity,\n      endValue: toValue,\n      duration,\n      delay,\n      onComplete,\n      abort: () =>\n        !this.canvas ||\n        // we do not want to animate a selection, only cursor\n        this.selectionStart !== this.selectionEnd,\n      onChange: (value) => {\n        this._currentCursorOpacity = value;\n        this.renderCursorOrSelection();\n      },\n    });\n  }\n\n  /**\n   * changes the cursor from visible to invisible\n   */\n  private _tick(delay?: number) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(delay || 0, 100),\n      onComplete: this._onTickComplete,\n    });\n  }\n\n  /**\n   * Changes the cursor from invisible to visible\n   */\n  private _onTickComplete() {\n    this._currentTickCompleteState?.abort();\n    this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick,\n    });\n  }\n\n  /**\n   * Initializes delayed cursor\n   */\n  initDelayedCursor(restart?: boolean) {\n    this.abortCursorAnimation();\n    this._tick(restart ? 0 : this.cursorDelay);\n  }\n\n  /**\n   * Aborts cursor animation, clears all timeouts and clear textarea context if necessary\n   */\n  abortCursorAnimation() {\n    let shouldClear = false;\n    [this._currentTickState, this._currentTickCompleteState].forEach(\n      (cursorAnimation) => {\n        if (cursorAnimation && !cursorAnimation.isDone()) {\n          shouldClear = true;\n          cursorAnimation.abort();\n        }\n      },\n    );\n\n    this._currentCursorOpacity = 1;\n\n    //  make sure we clear context even if instance is not editing\n    if (shouldClear) {\n      this.clearContextTop();\n    }\n  }\n\n  /**\n   * Restart tue cursor animation if either is in complete state ( between animations )\n   * or if it never started before\n   */\n  restartCursorIfNeeded() {\n    if (\n      [this._currentTickState, this._currentTickCompleteState].some(\n        (cursorAnimation) => !cursorAnimation || cursorAnimation.isDone(),\n      )\n    ) {\n      this.initDelayedCursor();\n    }\n  }\n\n  /**\n   * Selects entire text\n   */\n  selectAll() {\n    this.selectionStart = 0;\n    this.selectionEnd = this._text.length;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Selects entire text and updates the visual state\n   */\n  cmdAll() {\n    this.selectAll();\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Returns selected text\n   * @return {String}\n   */\n  getSelectedText(): string {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n  }\n\n  /**\n   * Find new selection index representing start of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    // remove space before cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index--;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    // remove space after cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index++;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Find new selection index representing start of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    while (!/\\n/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    while (!/\\n/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Finds index corresponding to beginning or end of a word\n   * @param {Number} selectionStart Index of a character\n   * @param {Number} direction 1 or -1\n   * @return {Number} Index of the beginning or end of a word\n   */\n  searchWordBoundary(selectionStart: number, direction: 1 | -1): number {\n    const text = this._text;\n    // if we land on a space we move the cursor backwards\n    // if we are searching boundary end we move the cursor backwards ONLY if we don't land on a line break\n    let index =\n        selectionStart > 0 &&\n        this._reSpace.test(text[selectionStart]) &&\n        (direction === -1 || !reNewline.test(text[selectionStart - 1]))\n          ? selectionStart - 1\n          : selectionStart,\n      _char = text[index];\n    while (index > 0 && index < text.length && !reNonWord.test(_char)) {\n      index += direction;\n      _char = text[index];\n    }\n    if (direction === -1 && reNonWord.test(_char)) {\n      index++;\n    }\n    return index;\n  }\n\n  /**\n   * Selects the word that contains the char at index selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectWord(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    // search backwards\n    const newSelectionStart = this.searchWordBoundary(selectionStart, -1),\n      // search forward\n      newSelectionEnd = Math.max(\n        newSelectionStart,\n        this.searchWordBoundary(selectionStart, 1),\n      );\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    // remove next major, for now it renders twice :(\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Selects the line that contains selectionStart\n   * @param {Number} selectionStart Index of a character\n   */\n  selectLine(selectionStart?: number) {\n    selectionStart = selectionStart ?? this.selectionStart;\n    const newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n      newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n  }\n\n  /**\n   * Enters editing state\n   */\n  enterEditing(e?: TPointerEvent) {\n    if (this.isEditing || !this.editable) {\n      return;\n    }\n    this.enterEditingImpl();\n    this.fire('editing:entered', e ? { e } : undefined);\n    this._fireSelectionChanged();\n    if (this.canvas) {\n      this.canvas.fire('text:editing:entered', {\n        target: this as unknown as IText,\n        e,\n      });\n      this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * runs the actual logic that enter from editing state, see {@link enterEditing}\n   */\n  enterEditingImpl() {\n    if (this.canvas) {\n      this.canvas.calcOffset();\n      this.canvas.textEditingManager.exitTextEditing();\n    }\n\n    this.isEditing = true;\n\n    this.initHiddenTextarea();\n    this.hiddenTextarea!.focus();\n    this.hiddenTextarea!.value = this.text;\n    this._updateTextarea();\n    this._saveEditingProps();\n    this._setEditingProps();\n    this._textBeforeEdit = this.text;\n\n    this._tick();\n  }\n\n  /**\n   * called by {@link Canvas#textEditingManager}\n   */\n  updateSelectionOnMouseMove(e: TPointerEvent) {\n    if (this.getActiveControl()) {\n      return;\n    }\n\n    const el = this.hiddenTextarea!;\n    // regain focus\n    getDocumentFromElement(el).activeElement !== el && el.focus();\n\n    const newSelectionStart = this.getSelectionStartFromPointer(e),\n      currentStart = this.selectionStart,\n      currentEnd = this.selectionEnd;\n    if (\n      (newSelectionStart !== this.__selectionStartOnMouseDown ||\n        currentStart === currentEnd) &&\n      (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n    ) {\n      return;\n    }\n    if (newSelectionStart > this.__selectionStartOnMouseDown) {\n      this.selectionStart = this.__selectionStartOnMouseDown;\n      this.selectionEnd = newSelectionStart;\n    } else {\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = this.__selectionStartOnMouseDown;\n    }\n    if (\n      this.selectionStart !== currentStart ||\n      this.selectionEnd !== currentEnd\n    ) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setEditingProps() {\n    this.hoverCursor = 'text';\n\n    if (this.canvas) {\n      this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n    }\n\n    this.borderColor = this.editingBorderColor;\n    this.hasControls = this.selectable = false;\n    this.lockMovementX = this.lockMovementY = true;\n  }\n\n  /**\n   * convert from textarea to grapheme indexes\n   */\n  fromStringToGraphemeSelection(start: number, end: number, text: string) {\n    const smallerTextStart = text.slice(0, start),\n      graphemeStart = this.graphemeSplit(smallerTextStart).length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = text.slice(start, end),\n      graphemeEnd = this.graphemeSplit(smallerTextEnd).length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * convert from fabric to textarea values\n   */\n  fromGraphemeToStringSelection(\n    start: number,\n    end: number,\n    graphemes: string[],\n  ) {\n    const smallerTextStart = graphemes.slice(0, start),\n      graphemeStart = smallerTextStart.join('').length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = graphemes.slice(start, end),\n      graphemeEnd = smallerTextEnd.join('').length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _updateTextarea() {\n    this.cursorOffsetCache = {};\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    if (!this.inCompositionMode) {\n      const newSelection = this.fromGraphemeToStringSelection(\n        this.selectionStart,\n        this.selectionEnd,\n        this._text,\n      );\n      this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n      this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    this.cursorOffsetCache = {};\n    const textarea = this.hiddenTextarea;\n    this.text = textarea.value;\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    const newSelection = this.fromStringToGraphemeSelection(\n      textarea.selectionStart,\n      textarea.selectionEnd,\n      textarea.value,\n    );\n    this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n    if (!this.inCompositionMode) {\n      this.selectionStart = newSelection.selectionStart;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const style = this._calcTextareaPosition();\n      this.hiddenTextarea!.style.left = style.left;\n      this.hiddenTextarea!.style.top = style.top;\n    }\n  }\n\n  /**\n   * @private\n   * @return {Object} style contains style for hiddenTextarea\n   */\n  _calcTextareaPosition() {\n    if (!this.canvas) {\n      return { left: '1px', top: '1px' };\n    }\n    const desiredPosition = this.inCompositionMode\n        ? this.compositionStart\n        : this.selectionStart,\n      boundaries = this._getCursorBoundaries(desiredPosition),\n      cursorLocation = this.get2DCursorLocation(desiredPosition),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex = cursorLocation.charIndex,\n      charHeight =\n        this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') *\n        this.lineHeight,\n      leftOffset = boundaries.leftOffset,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      upperCanvas = this.canvas.upperCanvasEl,\n      upperCanvasWidth = upperCanvas.width / retinaScaling,\n      upperCanvasHeight = upperCanvas.height / retinaScaling,\n      maxWidth = upperCanvasWidth - charHeight,\n      maxHeight = upperCanvasHeight - charHeight;\n\n    const p = new Point(\n      boundaries.left + leftOffset,\n      boundaries.top + boundaries.topOffset + charHeight,\n    )\n      .transform(this.calcTransformMatrix())\n      .transform(this.canvas.viewportTransform)\n      .multiply(\n        new Point(\n          upperCanvas.clientWidth / upperCanvasWidth,\n          upperCanvas.clientHeight / upperCanvasHeight,\n        ),\n      );\n\n    if (p.x < 0) {\n      p.x = 0;\n    }\n    if (p.x > maxWidth) {\n      p.x = maxWidth;\n    }\n    if (p.y < 0) {\n      p.y = 0;\n    }\n    if (p.y > maxHeight) {\n      p.y = maxHeight;\n    }\n\n    // add canvas offset on document\n    p.x += this.canvas._offset.left;\n    p.y += this.canvas._offset.top;\n\n    return {\n      left: `${p.x}px`,\n      top: `${p.y}px`,\n      fontSize: `${charHeight}px`,\n      charHeight: charHeight,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _restoreEditingProps() {\n    if (!this._savedProps) {\n      return;\n    }\n\n    this.hoverCursor = this._savedProps.hoverCursor;\n    this.hasControls = this._savedProps.hasControls;\n    this.borderColor = this._savedProps.borderColor;\n    this.selectable = this._savedProps.selectable;\n    this.lockMovementX = this._savedProps.lockMovementX;\n    this.lockMovementY = this._savedProps.lockMovementY;\n\n    if (this.canvas) {\n      this.canvas.defaultCursor =\n        this._savedProps.defaultCursor || this.canvas.defaultCursor;\n      this.canvas.moveCursor =\n        this._savedProps.moveCursor || this.canvas.moveCursor;\n    }\n\n    delete this._savedProps;\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * Please use exitEditingImpl, this function was kept to avoid breaking changes.\n   * Will be removed in fabric 7.0\n   * @deprecated use \"exitEditingImpl\"\n   */\n  protected _exitEditing() {\n    const hiddenTextarea = this.hiddenTextarea;\n    this.selected = false;\n    this.isEditing = false;\n\n    if (hiddenTextarea) {\n      hiddenTextarea.blur && hiddenTextarea.blur();\n      hiddenTextarea.parentNode &&\n        hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n    }\n    this.hiddenTextarea = null;\n    this.abortCursorAnimation();\n    this.selectionStart !== this.selectionEnd && this.clearContextTop();\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * But it does not fire events\n   */\n  exitEditingImpl() {\n    this._exitEditing();\n    this.selectionEnd = this.selectionStart;\n    this._restoreEditingProps();\n    if (this._forceClearCache) {\n      this.initDimensions();\n      this.setCoords();\n    }\n  }\n\n  /**\n   * Exits from editing state and fires relevant events\n   */\n  exitEditing() {\n    const isTextChanged = this._textBeforeEdit !== this.text;\n    this.exitEditingImpl();\n\n    this.fire('editing:exited');\n    isTextChanged && this.fire(MODIFIED);\n    if (this.canvas) {\n      this.canvas.fire('text:editing:exited', {\n        target: this as unknown as IText,\n      });\n      // todo: evaluate add an action to this event\n      isTextChanged && this.canvas.fire('object:modified', { target: this });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _removeExtraneousStyles() {\n    for (const prop in this.styles) {\n      if (!this._textLines[prop as unknown as number]) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * remove and reflow a style block from start to end.\n   * @param {Number} start linear start position for removal (included in removal)\n   * @param {Number} end linear end position for removal ( excluded from removal )\n   */\n  removeStyleFromTo(start: number, end: number) {\n    const { lineIndex: lineStart, charIndex: charStart } =\n        this.get2DCursorLocation(start, true),\n      { lineIndex: lineEnd, charIndex: charEnd } = this.get2DCursorLocation(\n        end,\n        true,\n      );\n    if (lineStart !== lineEnd) {\n      // step1 remove the trailing of lineStart\n      if (this.styles[lineStart]) {\n        for (\n          let i = charStart;\n          i < this._unwrappedTextLines[lineStart].length;\n          i++\n        ) {\n          delete this.styles[lineStart][i];\n        }\n      }\n      // step2 move the trailing of lineEnd to lineStart if needed\n      if (this.styles[lineEnd]) {\n        for (\n          let i = charEnd;\n          i < this._unwrappedTextLines[lineEnd].length;\n          i++\n        ) {\n          const styleObj = this.styles[lineEnd][i];\n          if (styleObj) {\n            this.styles[lineStart] || (this.styles[lineStart] = {});\n            this.styles[lineStart][charStart + i - charEnd] = styleObj;\n          }\n        }\n      }\n      // step3 detects lines will be completely removed.\n      for (let i = lineStart + 1; i <= lineEnd; i++) {\n        delete this.styles[i];\n      }\n      // step4 shift remaining lines.\n      this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n    } else {\n      // remove and shift left on the same line\n      if (this.styles[lineStart]) {\n        const styleObj = this.styles[lineStart];\n        const diff = charEnd - charStart;\n        for (let i = charStart; i < charEnd; i++) {\n          delete styleObj[i];\n        }\n        for (const char in this.styles[lineStart]) {\n          const numericChar = parseInt(char, 10);\n          if (numericChar >= charEnd) {\n            styleObj[numericChar - diff] = styleObj[char];\n            delete styleObj[char];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Shifts line styles up or down\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} offset Can any number?\n   */\n  shiftLineStyles(lineIndex: number, offset: number) {\n    const clonedStyles = Object.assign({}, this.styles);\n    for (const line in this.styles) {\n      const numericLine = parseInt(line, 10);\n      if (numericLine > lineIndex) {\n        this.styles[numericLine + offset] = clonedStyles[numericLine];\n        if (!clonedStyles[numericLine - offset]) {\n          delete this.styles[numericLine];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle insertion of more consecutive style lines for when one or more\n   * newlines gets added to the text. Since current style needs to be shifted\n   * first we shift the current style of the number lines needed, then we add\n   * new lines from the last to the first.\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} qty number of lines to add\n   * @param {Array} copiedStyle Array of objects styles\n   */\n  insertNewlineStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    qty: number,\n    copiedStyle?: { [index: number]: TextStyleDeclaration },\n  ) {\n    const newLineStyles: { [index: number]: TextStyleDeclaration } = {};\n    const originalLineLength = this._unwrappedTextLines[lineIndex].length;\n    const isEndOfLine = originalLineLength === charIndex;\n\n    let someStyleIsCarryingOver = false;\n    qty || (qty = 1);\n    this.shiftLineStyles(lineIndex, qty);\n    const currentCharStyle = this.styles[lineIndex]\n      ? this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1]\n      : undefined;\n\n    // we clone styles of all chars\n    // after cursor onto the current line\n    for (const index in this.styles[lineIndex]) {\n      const numIndex = parseInt(index, 10);\n      if (numIndex >= charIndex) {\n        someStyleIsCarryingOver = true;\n        newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n        // remove lines from the previous line since they're on a new line now\n        if (!(isEndOfLine && charIndex === 0)) {\n          delete this.styles[lineIndex][index];\n        }\n      }\n    }\n    let styleCarriedOver = false;\n    if (someStyleIsCarryingOver && !isEndOfLine) {\n      // if is end of line, the extra style we copied\n      // is probably not something we want\n      this.styles[lineIndex + qty] = newLineStyles;\n      styleCarriedOver = true;\n    }\n    if (styleCarriedOver || originalLineLength > charIndex) {\n      // skip the last line of since we already prepared it.\n      // or contains text without style that we don't want to style\n      // just because it changed lines\n      qty--;\n    }\n    // for the all the lines or all the other lines\n    // we clone current char style onto the next (otherwise empty) line\n    while (qty > 0) {\n      if (copiedStyle && copiedStyle[qty - 1]) {\n        this.styles[lineIndex + qty] = {\n          0: { ...copiedStyle[qty - 1] },\n        };\n      } else if (currentCharStyle) {\n        this.styles[lineIndex + qty] = {\n          0: { ...currentCharStyle },\n        };\n      } else {\n        delete this.styles[lineIndex + qty];\n      }\n      qty--;\n    }\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Inserts style object for a given line/char index\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} quantity number Style object to insert, if given\n   * @param {Array} copiedStyle array of style objects\n   */\n  insertCharStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    quantity: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    if (!this.styles) {\n      this.styles = {};\n    }\n    const currentLineStyles = this.styles[lineIndex],\n      currentLineStylesCloned = currentLineStyles\n        ? { ...currentLineStyles }\n        : {};\n\n    quantity || (quantity = 1);\n    // shift all char styles by quantity forward\n    // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n    for (const index in currentLineStylesCloned) {\n      const numericIndex = parseInt(index, 10);\n      if (numericIndex >= charIndex) {\n        currentLineStyles[numericIndex + quantity] =\n          currentLineStylesCloned[numericIndex];\n        // only delete the style if there was nothing moved there\n        if (!currentLineStylesCloned[numericIndex - quantity]) {\n          delete currentLineStyles[numericIndex];\n        }\n      }\n    }\n    this._forceClearCache = true;\n    if (copiedStyle) {\n      while (quantity--) {\n        if (!Object.keys(copiedStyle[quantity]).length) {\n          continue;\n        }\n        if (!this.styles[lineIndex]) {\n          this.styles[lineIndex] = {};\n        }\n        this.styles[lineIndex][charIndex + quantity] = {\n          ...copiedStyle[quantity],\n        };\n      }\n      return;\n    }\n    if (!currentLineStyles) {\n      return;\n    }\n    const newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n    while (newStyle && quantity--) {\n      this.styles[lineIndex][charIndex + quantity] = { ...newStyle };\n    }\n  }\n\n  /**\n   * Inserts style object(s)\n   * @param {Array} insertedText Characters at the location where style is inserted\n   * @param {Number} start cursor index for inserting style\n   * @param {Array} [copiedStyle] array of style objects to insert.\n   */\n  insertNewStyleBlock(\n    insertedText: string[],\n    start: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    const cursorLoc = this.get2DCursorLocation(start, true),\n      addedLines = [0];\n    let linesLength = 0;\n    // get an array of how many char per lines are being added.\n    for (let i = 0; i < insertedText.length; i++) {\n      if (insertedText[i] === '\\n') {\n        linesLength++;\n        addedLines[linesLength] = 0;\n      } else {\n        addedLines[linesLength]++;\n      }\n    }\n    // for the first line copy the style from the current char position.\n    if (addedLines[0] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex,\n        addedLines[0],\n        copiedStyle,\n      );\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n    }\n    linesLength &&\n      this.insertNewlineStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex + addedLines[0],\n        linesLength,\n      );\n    let i;\n    for (i = 1; i < linesLength; i++) {\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(\n          cursorLoc.lineIndex + i,\n          0,\n          addedLines[i],\n          copiedStyle,\n        );\n      } else if (copiedStyle) {\n        // this test is required in order to close #6841\n        // when a pasted buffer begins with a newline then\n        // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]\n        // may be undefined for some reason\n        if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n      }\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n    }\n    if (addedLines[i] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex + i,\n        0,\n        addedLines[i],\n        copiedStyle,\n      );\n    }\n  }\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars(start: number, end: number = start + 1) {\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars(\n    text: string,\n    style: TextStyleDeclaration[] | undefined,\n    start: number,\n    end: number = start,\n  ) {\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    const graphemes = this.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [\n      ...this._text.slice(0, start),\n      ...graphemes,\n      ...this._text.slice(end),\n    ];\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * Set the selectionStart and selectionEnd according to the new position of cursor\n   * mimic the key - mouse navigation when shift is pressed.\n   */\n  setSelectionStartEndWithShift(\n    start: number,\n    end: number,\n    newSelection: number,\n  ) {\n    if (newSelection <= start) {\n      if (end === start) {\n        this._selectionDirection = LEFT;\n      } else if (this._selectionDirection === RIGHT) {\n        this._selectionDirection = LEFT;\n        this.selectionEnd = start;\n      }\n      this.selectionStart = newSelection;\n    } else if (newSelection > start && newSelection < end) {\n      if (this._selectionDirection === RIGHT) {\n        this.selectionEnd = newSelection;\n      } else {\n        this.selectionStart = newSelection;\n      }\n    } else {\n      // newSelection is > selection start and end\n      if (end === start) {\n        this._selectionDirection = RIGHT;\n      } else if (this._selectionDirection === LEFT) {\n        this._selectionDirection = RIGHT;\n        this.selectionStart = end;\n      }\n      this.selectionEnd = newSelection;\n    }\n  }\n}\n","import { config } from '../../config';\nimport { getFabricDocument, getEnv } from '../../env';\nimport { capValue } from '../../util/misc/capValue';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextBehavior } from './ITextBehavior';\nimport type { TKeyMapIText } from './constants';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, LEFT, RIGHT } from '../../constants';\nimport type { IText } from './IText';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\n\nexport abstract class ITextKeyBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextBehavior<Props, SProps, EventSpec> {\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behavior for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the IText or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = Object.assign({}, this.keysMap);\n   * The function must be in IText.prototype.myFunction And will receive event as args[0]\n   */\n  declare keysMap: TKeyMapIText;\n\n  declare keysMapRtl: TKeyMapIText;\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  declare ctrlKeysMapUp: TKeyMapIText;\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  declare ctrlKeysMapDown: TKeyMapIText;\n\n  declare hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * DOM container to append the hiddenTextarea.\n   * An alternative to attaching to the document.body.\n   * Useful to reduce laggish redraw of the full document.body tree and\n   * also with modals event capturing that won't let the textarea take focus.\n   * @type HTMLElement\n   * @default\n   */\n  declare hiddenTextareaContainer?: HTMLElement | null;\n\n  private declare _clickHandlerInitialized: boolean;\n  private declare _copyDone: boolean;\n  private declare fromPaste: boolean;\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea() {\n    const doc =\n      (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n      getFabricDocument();\n    const textarea = doc.createElement('textarea');\n    Object.entries({\n      autocapitalize: 'off',\n      autocorrect: 'off',\n      autocomplete: 'off',\n      spellcheck: 'false',\n      'data-fabric': 'textarea',\n      wrap: 'off',\n    }).map(([attribute, value]) => textarea.setAttribute(attribute, value));\n    const { top, left, fontSize } = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    textarea.style.cssText = `position: absolute; top: ${top}; left: ${left}; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: ${fontSize};`;\n\n    (this.hiddenTextareaContainer || doc.body).appendChild(textarea);\n\n    Object.entries({\n      blur: 'blur',\n      keydown: 'onKeyDown',\n      keyup: 'onKeyUp',\n      input: 'onInput',\n      copy: 'copy',\n      cut: 'copy',\n      paste: 'paste',\n      compositionstart: 'onCompositionStart',\n      compositionupdate: 'onCompositionUpdate',\n      compositionend: 'onCompositionEnd',\n    } as Record<string, keyof this>).map(([eventName, handler]) =>\n      textarea.addEventListener(\n        eventName,\n        (this[handler] as EventListener).bind(this),\n      ),\n    );\n    this.hiddenTextarea = textarea;\n  }\n\n  /**\n   * Override this method to customize cursor behavior on textbox blur\n   */\n  blur() {\n    this.abortCursorAnimation();\n  }\n\n  /**\n   * Handles keydown event\n   * only used for arrows and combination of modifier keys.\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyDown(e: KeyboardEvent) {\n    if (!this.isEditing) {\n      return;\n    }\n    const keyMap = this.direction === 'rtl' ? this.keysMapRtl : this.keysMap;\n    if (e.keyCode in keyMap) {\n      (this[keyMap[e.keyCode] as keyof this] as (arg: KeyboardEvent) => void)(\n        e,\n      );\n    } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapDown[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.inCompositionMode = false;\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    } else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyUp(e: KeyboardEvent) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {\n      (\n        this[this.ctrlKeysMapUp[e.keyCode] as keyof this] as (\n          arg: KeyboardEvent,\n        ) => void\n      )(e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  }\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput(this: this & { hiddenTextarea: HTMLTextAreaElement }, e: Event) {\n    const fromPaste = this.fromPaste;\n    const { value, selectionStart, selectionEnd } = this.hiddenTextarea;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    const updateAndFire = () => {\n      this.updateFromTextArea();\n      this.fire(CHANGED);\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this as unknown as IText });\n        this.canvas.requestRenderAll();\n      }\n    };\n    if (this.hiddenTextarea.value === '') {\n      this.styles = {};\n      updateAndFire();\n      return;\n    }\n    // decisions about style changes.\n    const nextText = this._splitTextIntoLines(value).graphemeText,\n      charCount = this._text.length,\n      nextCharCount = nextText.length,\n      _selectionStart = this.selectionStart,\n      _selectionEnd = this.selectionEnd,\n      selection = _selectionStart !== _selectionEnd;\n    let copiedStyle: TextStyleDeclaration[] | undefined,\n      removedText,\n      charDiff = nextCharCount - charCount,\n      removeFrom,\n      removeTo;\n\n    const textareaSelection = this.fromStringToGraphemeSelection(\n      selectionStart,\n      selectionEnd,\n      value,\n    );\n    const backDelete = _selectionStart > textareaSelection.selectionStart;\n\n    if (selection) {\n      removedText = this._text.slice(_selectionStart, _selectionEnd);\n      charDiff += _selectionEnd - _selectionStart;\n    } else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(_selectionEnd + charDiff, _selectionEnd);\n      } else {\n        removedText = this._text.slice(\n          _selectionStart,\n          _selectionStart - charDiff,\n        );\n      }\n    }\n    const insertedText = nextText.slice(\n      textareaSelection.selectionEnd - charDiff,\n      textareaSelection.selectionEnd,\n    );\n    if (removedText && removedText.length) {\n      if (insertedText.length) {\n        // let's copy some style before deleting.\n        // we want to copy the style before the cursor OR the style at the cursor if selection\n        // is bigger than 0.\n        copiedStyle = this.getSelectionStyles(\n          _selectionStart,\n          _selectionStart + 1,\n          false,\n        );\n        // now duplicate the style one for each inserted text.\n        copiedStyle = insertedText.map(\n          () =>\n            // this return an array of references, but that is fine since we are\n            // copying the style later.\n            copiedStyle![0],\n        );\n      }\n      if (selection) {\n        removeFrom = _selectionStart;\n        removeTo = _selectionEnd;\n      } else if (backDelete) {\n        // detect differences between forwardDelete and backDelete\n        removeFrom = _selectionEnd - removedText.length;\n        removeTo = _selectionEnd;\n      } else {\n        removeFrom = _selectionEnd;\n        removeTo = _selectionEnd + removedText.length;\n      }\n      this.removeStyleFromTo(removeFrom, removeTo);\n    }\n    if (insertedText.length) {\n      const { copyPasteData } = getEnv();\n      if (\n        fromPaste &&\n        insertedText.join('') === copyPasteData.copiedText &&\n        !config.disableStyleCopyPaste\n      ) {\n        copiedStyle = copyPasteData.copiedTextStyle;\n      }\n      this.insertNewStyleBlock(insertedText, _selectionStart, copiedStyle);\n    }\n    updateAndFire();\n  }\n\n  /**\n   * Composition start\n   */\n  onCompositionStart() {\n    this.inCompositionMode = true;\n  }\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd() {\n    this.inCompositionMode = false;\n  }\n\n  onCompositionUpdate({ target }: CompositionEvent) {\n    const { selectionStart, selectionEnd } = target as HTMLTextAreaElement;\n    this.compositionStart = selectionStart;\n    this.compositionEnd = selectionEnd;\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * Copies selected text\n   */\n  copy() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n    const { copyPasteData } = getEnv();\n    copyPasteData.copiedText = this.getSelectedText();\n    if (!config.disableStyleCopyPaste) {\n      copyPasteData.copiedTextStyle = this.getSelectionStyles(\n        this.selectionStart,\n        this.selectionEnd,\n        true,\n      );\n    } else {\n      copyPasteData.copiedTextStyle = undefined;\n    }\n    this._copyDone = true;\n  }\n\n  /**\n   * Pastes text\n   */\n  paste() {\n    this.fromPaste = true;\n  }\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor(lineIndex: number, charIndex: number): number {\n    let widthBeforeCursor = this._getLineLeftOffset(lineIndex),\n      bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  }\n\n  /**\n   * Gets start offset of a selection\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (\n      lineIndex === this._textLines.length - 1 ||\n      e.metaKey ||\n      e.keyCode === 34\n    ) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n      textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return (\n      textAfterCursor.length +\n      indexOnOtherLine +\n      1 +\n      this.missingNewlineOffset(lineIndex)\n    );\n  }\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset(e: KeyboardEvent, isRight: boolean): number {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    } else {\n      return this.selectionStart;\n    }\n  }\n\n  /**\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n      textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\n      missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\n    // return a negative offset\n    return (\n      -this._textLines[lineIndex - 1].length +\n      indexOnOtherLine -\n      textBeforeCursor.length +\n      (1 - missingNewlineOffset)\n    );\n  }\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine(lineIndex: number, width: number) {\n    const line = this._textLines[lineIndex],\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    let widthOfCharsOnLine = lineLeftOffset,\n      indexOnLine = 0,\n      charWidth,\n      foundMatch;\n\n    for (let j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        const leftEdge = widthOfCharsOnLine - charWidth,\n          rightEdge = widthOfCharsOnLine,\n          offsetFromLeftEdge = Math.abs(leftEdge - width),\n          offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  }\n\n  /**\n   * Moves cursor down\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorDown(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  }\n\n  /**\n   * Moves cursor up\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorUp(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  }\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorUpOrDown(direction: 'Up' | 'Down', e: KeyboardEvent) {\n    const offset = this[`get${direction}CursorOffset`](\n      e,\n      this._selectionDirection === RIGHT,\n    );\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    } else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      const max = this.text.length;\n      this.selectionStart = capValue(0, this.selectionStart, max);\n      this.selectionEnd = capValue(0, this.selectionEnd, max);\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift(offset: number) {\n    const newSelection =\n      this._selectionDirection === LEFT\n        ? this.selectionStart + offset\n        : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(\n      this.selectionStart,\n      this.selectionEnd,\n      newSelection,\n    );\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift(offset: number) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor left\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorLeft(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  }\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   *\n   * @todo refactor not to use method name composition\n   */\n  _move(\n    e: KeyboardEvent,\n    prop: 'selectionStart' | 'selectionEnd',\n    direction: 'Left' | 'Right',\n  ): boolean {\n    let newValue: number | undefined;\n    if (e.altKey) {\n      newValue = this[`findWordBoundary${direction}`](this[prop]);\n    } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {\n      newValue = this[`findLineBoundary${direction}`](this[prop]);\n    } else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== 'undefined' && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _moveLeft(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Left');\n  }\n\n  /**\n   * @private\n   */\n  _moveRight(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Right');\n  }\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithoutShift(e: KeyboardEvent) {\n    let change = true;\n    this._selectionDirection = LEFT;\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (\n      this.selectionEnd === this.selectionStart &&\n      this.selectionStart !== 0\n    ) {\n      change = this._moveLeft(e, 'selectionStart');\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  }\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === RIGHT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveLeft(e, 'selectionEnd');\n    } else if (this.selectionStart !== 0) {\n      this._selectionDirection = LEFT;\n      return this._moveLeft(e, 'selectionStart');\n    }\n  }\n\n  /**\n   * Moves cursor right\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRight(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  }\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorLeftOrRight(direction: 'Left' | 'Right', e: KeyboardEvent) {\n    const actionName = `moveCursor${direction}${\n      e.shiftKey ? 'WithShift' : 'WithoutShift'\n    }` as const;\n    this._currentCursorOpacity = 1;\n    if (this[actionName](e)) {\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorRightWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === LEFT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveRight(e, 'selectionStart');\n    } else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = RIGHT;\n      return this._moveRight(e, 'selectionEnd');\n    }\n  }\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRightWithoutShift(e: KeyboardEvent) {\n    let changed = true;\n    this._selectionDirection = RIGHT;\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  }\n}\n","import type {\n  ObjectPointerEvents,\n  TPointerEvent,\n  TPointerEventInfo,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { invertTransform } from '../../util/misc/matrix';\nimport { DraggableTextDelegate } from './DraggableTextDelegate';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextKeyBehavior } from './ITextKeyBehavior';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport type { IText } from './IText';\n/**\n * `LEFT_CLICK === 0`\n */\nconst notALeftClick = (e: Event) => !!(e as MouseEvent).button;\n\nexport abstract class ITextClickBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextKeyBehavior<Props, SProps, EventSpec> {\n  protected draggableTextDelegate: DraggableTextDelegate;\n\n  initBehavior() {\n    // Initializes event handlers related to cursor or selection\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mouseup', this.mouseUpHandler);\n    this.on('mousedblclick', this.doubleClickHandler);\n    this.on('mousetripleclick', this.tripleClickHandler);\n\n    this.draggableTextDelegate = new DraggableTextDelegate(\n      this as unknown as IText,\n    );\n\n    super.initBehavior();\n  }\n\n  /**\n   * If this method returns true a mouse move operation over a text selection\n   * will not prevent the native mouse event allowing the browser to start a drag operation.\n   * shouldStartDragging can be read 'do not prevent default for mouse move event'\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns\n   */\n  shouldStartDragging() {\n    return this.draggableTextDelegate.isActive();\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drag source,\n   * @see also {@link DraggableTextDelegate#isActive}\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns {boolean} should handle event\n   */\n  onDragStart(e: DragEvent) {\n    return this.draggableTextDelegate.onDragStart(e);\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent) {\n    return this.draggableTextDelegate.canDrop(e);\n  }\n\n  /**\n   * Default handler for double click, select a word\n   */\n  doubleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectWord(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default handler for triple click, select a line\n   */\n  tripleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectLine(this.getSelectionStartFromPointer(options.e));\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   * initializing a mousedDown on a text area will cancel fabricjs knowledge of\n   * current compositionMode. It will be set to false.\n   */\n  _mouseDownHandler({ e, alreadySelected }: ObjectPointerEvents['mousedown']) {\n    if (\n      !this.canvas ||\n      !this.editable ||\n      notALeftClick(e) ||\n      this.getActiveControl()\n    ) {\n      return;\n    }\n\n    if (this.draggableTextDelegate.start(e)) {\n      return;\n    }\n\n    this.canvas.textEditingManager.register(this);\n\n    if (alreadySelected) {\n      this.inCompositionMode = false;\n      this.setCursorByClick(e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n    this.selected ||= alreadySelected || this.isEditing;\n  }\n\n  /**\n   * standard handler for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler({ e, transform }: ObjectPointerEvents['mouseup']) {\n    const didDrag = this.draggableTextDelegate.end(e);\n\n    if (this.canvas) {\n      this.canvas.textEditingManager.unregister(this);\n\n      const activeObject = this.canvas._activeObject;\n      if (activeObject && activeObject !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n\n    if (\n      !this.editable ||\n      (this.group && !this.group.interactive) ||\n      (transform && transform.actionPerformed) ||\n      notALeftClick(e) ||\n      didDrag\n    ) {\n      return;\n    }\n\n    if (this.selected && !this.getActiveControl()) {\n      this.enterEditing(e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      } else {\n        this.renderCursorOrSelection();\n      }\n    }\n  }\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {TPointerEvent} e Event object\n   */\n  setCursorByClick(e: TPointerEvent) {\n    const newSelection = this.getSelectionStartFromPointer(e),\n      start = this.selectionStart,\n      end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    } else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {TPointerEvent} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer(e: TPointerEvent): number {\n    const mouseOffset = this.canvas!.getScenePoint(e)\n      .transform(invertTransform(this.calcTransformMatrix()))\n      .add(new Point(-this._getLeftOffset(), -this._getTopOffset()));\n    let height = 0,\n      charIndex = 0,\n      lineIndex = 0;\n\n    for (let i = 0; i < this._textLines.length; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i);\n        lineIndex = i;\n        if (i > 0) {\n          charIndex +=\n            this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\n        }\n      } else {\n        break;\n      }\n    }\n    const lineLeftOffset = Math.abs(this._getLineLeftOffset(lineIndex));\n    let width = lineLeftOffset;\n    const charLength = this._textLines[lineIndex].length;\n    const chars = this.__charBounds[lineIndex];\n    for (let j = 0; j < charLength; j++) {\n      // i removed something about flipX here, check.\n      const charWidth = chars[j].kernedWidth;\n      const widthAfter = width + charWidth;\n      if (mouseOffset.x <= widthAfter) {\n        // if the pointer is closer to the end of the char we increment charIndex\n        // in order to position the cursor after the char\n        if (\n          Math.abs(mouseOffset.x - widthAfter) <=\n          Math.abs(mouseOffset.x - width)\n        ) {\n          charIndex++;\n        }\n        break;\n      }\n      width = widthAfter;\n      charIndex++;\n    }\n\n    return Math.min(\n      // if object is horizontally flipped, mirror cursor location from the end\n      this.flipX ? charLength - charIndex : charIndex,\n      this._text.length,\n    );\n  }\n}\n","export type TKeyMapIText = Record<\n  KeyboardEvent['keyCode'],\n  CursorHandlingMethods\n>;\n\nexport type CursorHandlingMethods =\n  | 'moveCursorUp'\n  | 'moveCursorDown'\n  | 'moveCursorLeft'\n  | 'moveCursorRight'\n  | 'exitEditing'\n  | 'copy'\n  | 'cut'\n  | 'cmdAll';\n\nconst MOVE_CURSOR_UP: CursorHandlingMethods = 'moveCursorUp';\nconst MOVE_CURSOR_DOWN: CursorHandlingMethods = 'moveCursorDown';\nconst MOVE_CURSOR_LEFT: CursorHandlingMethods = 'moveCursorLeft';\nconst MOVE_CURSOR_RIGHT: CursorHandlingMethods = 'moveCursorRight';\nconst EXIT_EDITING: CursorHandlingMethods = 'exitEditing';\n\n// @TODO look into import { Key } from 'ts-key-enum';\n// and transition from keyCode to Key\n// also reduce string duplication\nexport const keysMap: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_RIGHT,\n  36: MOVE_CURSOR_LEFT,\n  37: MOVE_CURSOR_LEFT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_RIGHT,\n  40: MOVE_CURSOR_DOWN,\n};\n\nexport const keysMapRtl: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_LEFT,\n  36: MOVE_CURSOR_RIGHT,\n  37: MOVE_CURSOR_RIGHT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_LEFT,\n  40: MOVE_CURSOR_DOWN,\n};\n\n/**\n * For functionalities on keyUp + ctrl || cmd\n */\nexport const ctrlKeysMapUp: TKeyMapIText = {\n  67: 'copy',\n  // there was a reason this wasn't deleted. for now leave it here\n  88: 'cut',\n};\n\n/**\n * For functionalities on keyDown + ctrl || cmd\n */\nexport const ctrlKeysMapDown: TKeyMapIText = {\n  65: 'cmdAll',\n};\n","import type { StaticCanvas } from '../../canvas/StaticCanvas';\n\n/**\n * Set the transform of the passed context to the same of a specific Canvas or StaticCanvas.\n * setTransform is used since this utility will RESET the ctx transform to the basic value\n * of retina scaling and viewport transform\n * It is not meant to be added to other transforms, it is used internally to preapre canvases to draw\n * @param ctx\n * @param canvas\n */\nexport const applyCanvasTransform = (\n  ctx: CanvasRenderingContext2D,\n  canvas: StaticCanvas,\n) => {\n  const scale = canvas.getRetinaScaling();\n  ctx.setTransform(scale, 0, 0, scale, 0, 0);\n  const v = canvas.viewportTransform;\n  ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n};\n","import { Canvas } from '../../canvas/Canvas';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextClickBehavior } from './ITextClickBehavior';\nimport {\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  keysMap,\n  keysMapRtl,\n} from './constants';\nimport type { TClassProperties, TFiller, TOptions } from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport {\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from '../Text/constants';\nimport { CENTER, FILL, LEFT, RIGHT } from '../../constants';\nimport type { ObjectToCanvasElementOptions } from '../Object/Object';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport { applyCanvasTransform } from '../../util/internals/applyCanvasTransform';\n\nexport type CursorBoundaries = {\n  left: number;\n  top: number;\n  leftOffset: number;\n  topOffset: number;\n};\n\nexport type CursorRenderingData = {\n  color: string;\n  opacity: number;\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\n// Declare IText protected properties to workaround TS\nconst protectedDefaultValues = {\n  _selectionDirection: null,\n  _reSpace: /\\s|\\r?\\n/,\n  inCompositionMode: false,\n};\n\nexport const iTextDefaultValues: Partial<TClassProperties<IText>> = {\n  selectionStart: 0,\n  selectionEnd: 0,\n  selectionColor: 'rgba(17,119,255,0.3)',\n  isEditing: false,\n  editable: true,\n  editingBorderColor: 'rgba(102,153,255,0.25)',\n  cursorWidth: 2,\n  cursorColor: '',\n  cursorDelay: 1000,\n  cursorDuration: 600,\n  caching: true,\n  hiddenTextareaContainer: null,\n  keysMap,\n  keysMapRtl,\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  ...protectedDefaultValues,\n};\n\n// @TODO this is not complete\ninterface UniqueITextProps {\n  selectionStart: number;\n  selectionEnd: number;\n}\n\nexport interface SerializedITextProps\n  extends SerializedTextProps,\n    UniqueITextProps {}\n\nexport interface ITextProps extends TextProps, UniqueITextProps {}\n\n/**\n * @fires changed\n * @fires selection:changed\n * @fires editing:entered\n * @fires editing:exited\n * @fires dragstart\n * @fires drag drag event firing on the drag source\n * @fires dragend\n * @fires copy\n * @fires cut\n * @fires paste\n *\n * #### Supported key combinations\n * ```\n *   Move cursor:                    left, right, up, down\n *   Select character:               shift + left, shift + right\n *   Select text vertically:         shift + up, shift + down\n *   Move cursor by word:            alt + left, alt + right\n *   Select words:                   shift + alt + left, shift + alt + right\n *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n *   Jump to start/end of text:      cmd + up, cmd + down\n *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n *   Delete character:               backspace\n *   Delete word:                    alt + backspace\n *   Delete line:                    cmd + backspace\n *   Forward delete:                 delete\n *   Copy text:                      ctrl/cmd + c\n *   Paste text:                     ctrl/cmd + v\n *   Cut text:                       ctrl/cmd + x\n *   Select entire text:             ctrl/cmd + a\n *   Quit editing                    tab or esc\n * ```\n *\n * #### Supported mouse/touch combination\n * ```\n *   Position cursor:                click/touch\n *   Create selection:               click/touch & drag\n *   Create selection:               click & shift + click\n *   Select word:                    double click\n *   Select line:                    triple click\n * ```\n */\nexport class IText<\n    Props extends TOptions<ITextProps> = Partial<ITextProps>,\n    SProps extends SerializedITextProps = SerializedITextProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends ITextClickBehavior<Props, SProps, EventSpec>\n  implements UniqueITextProps\n{\n  /**\n   * Index where text selection starts (or where cursor is when there is no selection)\n   * @type Number\n   * @default\n   */\n  declare selectionStart: number;\n\n  /**\n   * Index where text selection ends\n   * @type Number\n   * @default\n   */\n  declare selectionEnd: number;\n\n  declare compositionStart: number;\n\n  declare compositionEnd: number;\n\n  /**\n   * Color of text selection\n   * @type String\n   * @default\n   */\n  declare selectionColor: string;\n\n  /**\n   * Indicates whether text is in editing mode\n   * @type Boolean\n   * @default\n   */\n  declare isEditing: boolean;\n\n  /**\n   * Indicates whether a text can be edited\n   * @type Boolean\n   * @default\n   */\n  declare editable: boolean;\n\n  /**\n   * Border color of text object while it's in editing mode\n   * @type String\n   * @default\n   */\n  declare editingBorderColor: string;\n\n  /**\n   * Width of cursor (in px)\n   * @type Number\n   * @default\n   */\n  declare cursorWidth: number;\n\n  /**\n   * Color of text cursor color in editing mode.\n   * if not set (default) will take color from the text.\n   * if set to a color value that fabric can understand, it will\n   * be used instead of the color of the text at the current position.\n   * @type String\n   * @default\n   */\n  declare cursorColor: string;\n\n  /**\n   * Delay between cursor blink (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDelay: number;\n\n  /**\n   * Duration of cursor fade in (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDuration: number;\n\n  declare compositionColor: string;\n\n  /**\n   * Indicates whether internal text char widths can be cached\n   * @type Boolean\n   * @default\n   */\n  declare caching: boolean;\n\n  static ownDefaults = iTextDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...IText.ownDefaults };\n  }\n\n  static type = 'IText';\n\n  get type() {\n    const type = super.type;\n    // backward compatibility\n    return type === 'itext' ? 'i-text' : type;\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...IText.ownDefaults, ...options } as Props);\n    this.initBehavior();\n  }\n\n  /**\n   * While editing handle differently\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (this.isEditing && this._savedProps && key in this._savedProps) {\n      // @ts-expect-error irritating TS\n      this._savedProps[key] = value;\n      return this;\n    }\n    if (key === 'canvas') {\n      this.canvas instanceof Canvas &&\n        this.canvas.textEditingManager.remove(this);\n      value instanceof Canvas && value.textEditingManager.add(this);\n    }\n    return super._set(key, value);\n  }\n\n  /**\n   * Sets selection start (left boundary of a selection)\n   * @param {Number} index Index to set selection start to\n   */\n  setSelectionStart(index: number) {\n    index = Math.max(index, 0);\n    this._updateAndFire('selectionStart', index);\n  }\n\n  /**\n   * Sets selection end (right boundary of a selection)\n   * @param {Number} index Index to set selection end to\n   */\n  setSelectionEnd(index: number) {\n    index = Math.min(index, this.text.length);\n    this._updateAndFire('selectionEnd', index);\n  }\n\n  /**\n   * @private\n   * @param {String} property 'selectionStart' or 'selectionEnd'\n   * @param {Number} index new position of property\n   */\n  protected _updateAndFire(\n    property: 'selectionStart' | 'selectionEnd',\n    index: number,\n  ) {\n    if (this[property] !== index) {\n      this._fireSelectionChanged();\n      this[property] = index;\n    }\n    this._updateTextarea();\n  }\n\n  /**\n   * Fires the even of selection changed\n   * @private\n   */\n  _fireSelectionChanged() {\n    this.fire('selection:changed');\n    this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n  }\n\n  /**\n   * Initialize text dimensions. Render all text on given context\n   * or on a offscreen canvas to get the text width with measureText.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   * @private\n   */\n  initDimensions() {\n    this.isEditing && this.initDelayedCursor();\n    super.initDimensions();\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified selectionEnd or startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n    complete?: boolean,\n  ) {\n    return super.getSelectionStyles(startIndex, endIndex, complete);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} [styles] Styles object\n   * @param {Number} [startIndex] Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n   */\n  setSelectionStyles(\n    styles: object,\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n  ) {\n    return super.setSelectionStyles(styles, startIndex, endIndex);\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n   * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(\n    selectionStart = this.selectionStart,\n    skipWrapping?: boolean,\n  ) {\n    return super.get2DCursorLocation(selectionStart, skipWrapping);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    super.render(ctx);\n    // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n    // the correct position but not at every cursor animation.\n    this.cursorOffsetCache = {};\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * @override block cursor/selection logic while rendering the exported canvas\n   * @todo this workaround should be replaced with a more robust solution\n   */\n  toCanvasElement(options?: ObjectToCanvasElementOptions): HTMLCanvasElement {\n    const isEditing = this.isEditing;\n    this.isEditing = false;\n    const canvas = super.toCanvasElement(options);\n    this.isEditing = isEditing;\n    return canvas;\n  }\n\n  /**\n   * Renders cursor or selection (depending on what exists)\n   * it does on the contextTop. If contextTop is not available, do nothing.\n   */\n  renderCursorOrSelection() {\n    if (!this.isEditing || !this.canvas) {\n      return;\n    }\n    const ctx = this.clearContextTop(true);\n    if (!ctx) {\n      return;\n    }\n    const boundaries = this._getCursorBoundaries();\n\n    const ancestors = this.findAncestorsWithClipPath();\n    const hasAncestorsWithClipping = ancestors.length > 0;\n    let drawingCtx: CanvasRenderingContext2D = ctx;\n    let drawingCanvas: HTMLCanvasElement | undefined = undefined;\n    if (hasAncestorsWithClipping) {\n      // we have some clipPath, we need to draw the selection on an intermediate layer.\n      drawingCanvas = createCanvasElementFor(ctx.canvas);\n      drawingCtx = drawingCanvas.getContext('2d')!;\n      applyCanvasTransform(drawingCtx, this.canvas);\n      const m = this.calcTransformMatrix();\n      drawingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n\n    if (this.selectionStart === this.selectionEnd && !this.inCompositionMode) {\n      this.renderCursor(drawingCtx, boundaries);\n    } else {\n      this.renderSelection(drawingCtx, boundaries);\n    }\n\n    if (hasAncestorsWithClipping) {\n      // we need a neutral context.\n      // this won't work for nested clippaths in which a clippath\n      // has its own clippath\n      for (const ancestor of ancestors) {\n        const clipPath = ancestor.clipPath!;\n        const clippingCanvas = createCanvasElementFor(ctx.canvas);\n        const clippingCtx = clippingCanvas.getContext('2d')!;\n        applyCanvasTransform(clippingCtx, this.canvas);\n        // position the ctx in the center of the outer ancestor\n        if (!clipPath.absolutePositioned) {\n          const m = ancestor.calcTransformMatrix();\n          clippingCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        }\n        clipPath.transform(clippingCtx);\n        // we assign an empty drawing context, we don't plan to have this working for nested clippaths for now\n        clipPath.drawObject(clippingCtx, true, {});\n        this.drawClipPathOnCache(drawingCtx, clipPath, clippingCanvas);\n      }\n    }\n\n    if (hasAncestorsWithClipping) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(drawingCanvas!, 0, 0);\n    }\n\n    this.canvas.contextTopDirty = true;\n    ctx.restore();\n  }\n\n  /**\n   * Finds and returns an array of clip paths that are applied to the parent\n   * group(s) of the current FabricObject instance. The object's hierarchy is\n   * traversed upwards (from the current object towards the root of the canvas),\n   * checking each parent object for the presence of a `clipPath` that is not\n   * absolutely positioned.\n   */\n  findAncestorsWithClipPath(): FabricObject[] {\n    const clipPathAncestors: FabricObject[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let obj: FabricObject | undefined = this;\n    while (obj) {\n      if (obj.clipPath) {\n        clipPathAncestors.push(obj);\n      }\n      obj = obj.parent;\n    }\n\n    return clipPathAncestors;\n  }\n\n  /**\n   * Returns cursor boundaries (left, top, leftOffset, topOffset)\n   * left/top are left/top of entire text box\n   * leftOffset/topOffset are offset from that left/top point of a text box\n   * @private\n   * @param {number} [index] index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundaries(\n    index: number = this.selectionStart,\n    skipCaching?: boolean,\n  ): CursorBoundaries {\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset(),\n      offsets = this._getCursorBoundariesOffsets(index, skipCaching);\n    return {\n      left: left,\n      top: top,\n      leftOffset: offsets.left,\n      topOffset: offsets.top,\n    };\n  }\n\n  /**\n   * Caches and returns cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundariesOffsets(\n    index: number,\n    skipCaching?: boolean,\n  ): { left: number; top: number } {\n    if (skipCaching) {\n      return this.__getCursorBoundariesOffsets(index);\n    }\n    if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n      return this.cursorOffsetCache as { left: number; top: number };\n    }\n    return (this.cursorOffsetCache = this.__getCursorBoundariesOffsets(index));\n  }\n\n  /**\n   * Calculates cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   */\n  __getCursorBoundariesOffsets(index: number) {\n    let topOffset = 0,\n      leftOffset = 0;\n    const { charIndex, lineIndex } = this.get2DCursorLocation(index);\n\n    for (let i = 0; i < lineIndex; i++) {\n      topOffset += this.getHeightOfLine(i);\n    }\n    const lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    const bound = this.__charBounds[lineIndex][charIndex];\n    bound && (leftOffset = bound.left);\n    if (\n      this.charSpacing !== 0 &&\n      charIndex === this._textLines[lineIndex].length\n    ) {\n      leftOffset -= this._getWidthOfCharSpacing();\n    }\n    const boundaries = {\n      top: topOffset,\n      left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n    };\n    if (this.direction === 'rtl') {\n      if (\n        this.textAlign === RIGHT ||\n        this.textAlign === JUSTIFY ||\n        this.textAlign === JUSTIFY_RIGHT\n      ) {\n        boundaries.left *= -1;\n      } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      } else if (\n        this.textAlign === CENTER ||\n        this.textAlign === JUSTIFY_CENTER\n      ) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      }\n    }\n    return boundaries;\n  }\n\n  /**\n   * Renders cursor on context Top, outside the animation cycle, on request\n   * Used for the drag/drop effect.\n   * If contextTop is not available, do nothing.\n   */\n  renderCursorAt(selectionStart: number) {\n    this._renderCursor(\n      this.canvas!.contextTop,\n      this._getCursorBoundaries(selectionStart, true),\n      selectionStart,\n    );\n  }\n\n  /**\n   * Renders cursor\n   * @param {Object} boundaries\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderCursor(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    this._renderCursor(ctx, boundaries, this.selectionStart);\n  }\n\n  /**\n   * Return the data needed to render the cursor for given selection start\n   * The left,top are relative to the object, while width and height are prescaled\n   * to look think with canvas zoom and object scaling,\n   * so they depend on canvas and object scaling\n   */\n  getCursorRenderingData(\n    selectionStart: number = this.selectionStart,\n    boundaries: CursorBoundaries = this._getCursorBoundaries(selectionStart),\n  ): CursorRenderingData {\n    const cursorLocation = this.get2DCursorLocation(selectionStart),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex =\n        cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n      charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n      multiplier = this.getObjectScaling().x * this.canvas!.getZoom(),\n      cursorWidth = this.cursorWidth / multiplier,\n      dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY'),\n      topOffset =\n        boundaries.topOffset +\n        ((1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex)) /\n          this.lineHeight -\n        charHeight * (1 - this._fontSizeFraction);\n\n    return {\n      color:\n        this.cursorColor ||\n        (this.getValueOfPropertyAt(lineIndex, charIndex, 'fill') as string),\n      opacity: this._currentCursorOpacity,\n      left: boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n      top: topOffset + boundaries.top + dy,\n      width: cursorWidth,\n      height: charHeight,\n    };\n  }\n\n  /**\n   * Render the cursor at the given selectionStart.\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderCursor(\n    ctx: CanvasRenderingContext2D,\n    boundaries: CursorBoundaries,\n    selectionStart: number,\n  ) {\n    const { color, opacity, left, top, width, height } =\n      this.getCursorRenderingData(selectionStart, boundaries);\n    ctx.fillStyle = color;\n    ctx.globalAlpha = opacity;\n    ctx.fillRect(left, top, width, height);\n  }\n\n  /**\n   * Renders text selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderSelection(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    const selection = {\n      selectionStart: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionStart\n        : this.selectionStart,\n      selectionEnd: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionEnd\n        : this.selectionEnd,\n    };\n    this._renderSelection(ctx, selection, boundaries);\n  }\n\n  /**\n   * Renders drag start text selection\n   */\n  renderDragSourceEffect() {\n    const dragStartSelection =\n      this.draggableTextDelegate.getDragStartSelection()!;\n    this._renderSelection(\n      this.canvas!.contextTop,\n      dragStartSelection,\n      this._getCursorBoundaries(dragStartSelection.selectionStart, true),\n    );\n  }\n\n  renderDropTargetEffect(e: DragEvent) {\n    const dragSelection = this.getSelectionStartFromPointer(e);\n    this.renderCursorAt(dragSelection);\n  }\n\n  /**\n   * Renders text selection\n   * @private\n   * @param {{ selectionStart: number, selectionEnd: number }} selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderSelection(\n    ctx: CanvasRenderingContext2D,\n    selection: { selectionStart: number; selectionEnd: number },\n    boundaries: CursorBoundaries,\n  ) {\n    const selectionStart = selection.selectionStart,\n      selectionEnd = selection.selectionEnd,\n      isJustify = this.textAlign.includes(JUSTIFY),\n      start = this.get2DCursorLocation(selectionStart),\n      end = this.get2DCursorLocation(selectionEnd),\n      startLine = start.lineIndex,\n      endLine = end.lineIndex,\n      startChar = start.charIndex < 0 ? 0 : start.charIndex,\n      endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n    for (let i = startLine; i <= endLine; i++) {\n      const lineOffset = this._getLineLeftOffset(i) || 0;\n      let lineHeight = this.getHeightOfLine(i),\n        realLineHeight = 0,\n        boxStart = 0,\n        boxEnd = 0;\n\n      if (i === startLine) {\n        boxStart = this.__charBounds[startLine][startChar].left;\n      }\n      if (i >= startLine && i < endLine) {\n        boxEnd =\n          isJustify && !this.isEndOfWrapping(i)\n            ? this.width\n            : this.getLineWidth(i) || 5; // WTF is this 5?\n      } else if (i === endLine) {\n        if (endChar === 0) {\n          boxEnd = this.__charBounds[endLine][endChar].left;\n        } else {\n          const charSpacing = this._getWidthOfCharSpacing();\n          boxEnd =\n            this.__charBounds[endLine][endChar - 1].left +\n            this.__charBounds[endLine][endChar - 1].width -\n            charSpacing;\n        }\n      }\n      realLineHeight = lineHeight;\n      if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n        lineHeight /= this.lineHeight;\n      }\n      let drawStart = boundaries.left + lineOffset + boxStart,\n        drawHeight = lineHeight,\n        extraTop = 0;\n      const drawWidth = boxEnd - boxStart;\n      if (this.inCompositionMode) {\n        ctx.fillStyle = this.compositionColor || 'black';\n        drawHeight = 1;\n        extraTop = lineHeight;\n      } else {\n        ctx.fillStyle = this.selectionColor;\n      }\n      if (this.direction === 'rtl') {\n        if (\n          this.textAlign === RIGHT ||\n          this.textAlign === JUSTIFY ||\n          this.textAlign === JUSTIFY_RIGHT\n        ) {\n          drawStart = this.width - drawStart - drawWidth;\n        } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        } else if (\n          this.textAlign === CENTER ||\n          this.textAlign === JUSTIFY_CENTER\n        ) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        }\n      }\n      ctx.fillRect(\n        drawStart,\n        boundaries.top + boundaries.topOffset + extraTop,\n        drawWidth,\n        drawHeight,\n      );\n      boundaries.topOffset += realLineHeight;\n    }\n  }\n\n  /**\n   * High level function to know the height of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns fontSize of char at the current cursor\n   * Unused from the library, is for the end user\n   * @return {Number} Character font size\n   */\n  getCurrentCharFontSize(): number {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n  }\n\n  /**\n   * High level function to know the color of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns color (fill) of char at the current cursor\n   * if the text object has a pattern or gradient for filler, it will return that.\n   * Unused by the library, is for the end user\n   * @return {String | TFiller} Character color (fill)\n   */\n  getCurrentCharColor(): string | TFiller | null {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, FILL);\n  }\n\n  /**\n   * Returns the cursor position for the getCurrent.. functions\n   * @private\n   */\n  _getCurrentCharIndex() {\n    const cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n      charIndex =\n        cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n    return { l: cursorPosition.lineIndex, c: charIndex };\n  }\n\n  dispose() {\n    this.exitEditingImpl();\n    this.draggableTextDelegate.dispose();\n    super.dispose();\n  }\n}\n\nclassRegistry.setClass(IText);\n// legacy\nclassRegistry.setClass(IText, 'i-text');\n","import type { TClassProperties, TOptions } from '../typedefs';\nimport { IText } from './IText/IText';\nimport { classRegistry } from '../ClassRegistry';\nimport { createTextboxDefaultControls } from '../controls/commonControls';\nimport { JUSTIFY } from './Text/constants';\nimport type { TextStyleDeclaration } from './Text/StyledText';\nimport type { SerializedITextProps, ITextProps } from './IText/IText';\nimport type { ITextEvents } from './IText/ITextBehavior';\nimport type { TextLinesInfo } from './Text/Text';\nimport type { Control } from '../controls/Control';\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textboxDefaultValues: Partial<TClassProperties<Textbox>> = {\n  minWidth: 20,\n  dynamicMinWidth: 2,\n  lockScalingFlip: true,\n  noScaleCache: false,\n  _wordJoiners: /[ \\t\\r]/,\n  splitByGrapheme: false,\n};\n\nexport type GraphemeData = {\n  wordsData: {\n    word: string[];\n    width: number;\n  }[][];\n  largestWordWidth: number;\n};\n\nexport type StyleMap = Record<string, { line: number; offset: number }>;\n\n// @TODO this is not complete\ninterface UniqueTextboxProps {\n  minWidth: number;\n  splitByGrapheme: boolean;\n  dynamicMinWidth: number;\n  _wordJoiners: RegExp;\n}\n\nexport interface SerializedTextboxProps\n  extends SerializedITextProps,\n    Pick<UniqueTextboxProps, 'minWidth' | 'splitByGrapheme'> {}\n\nexport interface TextboxProps extends ITextProps, UniqueTextboxProps {}\n\n/**\n * Textbox class, based on IText, allows the user to resize the text rectangle\n * and wraps lines automatically. Textboxes have their Y scaling locked, the\n * user can only change width. Height is adjusted automatically based on the\n * wrapping of lines.\n */\nexport class Textbox<\n    Props extends TOptions<TextboxProps> = Partial<TextboxProps>,\n    SProps extends SerializedTextboxProps = SerializedTextboxProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends IText<Props, SProps, EventSpec>\n  implements UniqueTextboxProps\n{\n  /**\n   * Minimum width of textbox, in pixels.\n   * @type Number\n   * @default\n   */\n  declare minWidth: number;\n\n  /**\n   * Minimum calculated width of a textbox, in pixels.\n   * fixed to 2 so that an empty textbox cannot go to 0\n   * and is still selectable without text.\n   * @type Number\n   * @default\n   */\n  declare dynamicMinWidth: number;\n\n  /**\n   * Use this boolean property in order to split strings that have no white space concept.\n   * this is a cheap way to help with chinese/japanese\n   * @type Boolean\n   * @since 2.6.0\n   */\n  declare splitByGrapheme: boolean;\n\n  declare _wordJoiners: RegExp;\n\n  declare _styleMap: StyleMap;\n\n  declare isWrapping: boolean;\n\n  static type = 'Textbox';\n\n  static textLayoutProperties = [...IText.textLayoutProperties, 'width'];\n\n  static ownDefaults = textboxDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Textbox.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...Textbox.ownDefaults, ...options } as Props);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createTextboxDefaultControls() };\n  }\n\n  /**\n   * Unlike superclass's version of this function, Textbox does not update\n   * its width.\n   * @private\n   * @override\n   */\n  initDimensions() {\n    if (!this.initialized) {\n      return;\n    }\n    this.isEditing && this.initDelayedCursor();\n    this._clearCache();\n    // clear dynamicMinWidth as it will be different after we re-wrap line\n    this.dynamicMinWidth = 0;\n    // wrap lines\n    this._styleMap = this._generateStyleMap(this._splitText());\n    // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n    if (this.dynamicMinWidth > this.width) {\n      this._set('width', this.dynamicMinWidth);\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n    // clear cache and re-calculate height\n    this.height = this.calcTextHeight();\n  }\n\n  /**\n   * Generate an object that translates the style object so that it is\n   * broken up by visual lines (new lines and automatic wrapping).\n   * The original text styles object is broken up by actual lines (new lines only),\n   * which is only sufficient for Text / IText\n   * @private\n   */\n  _generateStyleMap(textInfo: TextLinesInfo): StyleMap {\n    let realLineCount = 0,\n      realLineCharCount = 0,\n      charCount = 0;\n    const map: StyleMap = {};\n\n    for (let i = 0; i < textInfo.graphemeLines.length; i++) {\n      if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n        realLineCharCount = 0;\n        charCount++;\n        realLineCount++;\n      } else if (\n        !this.splitByGrapheme &&\n        this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) &&\n        i > 0\n      ) {\n        // this case deals with space's that are removed from end of lines when wrapping\n        realLineCharCount++;\n        charCount++;\n      }\n\n      map[i] = { line: realLineCount, offset: realLineCharCount };\n\n      charCount += textInfo.graphemeLines[i].length;\n      realLineCharCount += textInfo.graphemeLines[i].length;\n    }\n\n    return map;\n  }\n\n  /**\n   * Returns true if object has a style property or has it on a specified line\n   * @param {Number} lineIndex\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex: number): boolean {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (map) {\n        lineIndex = map.line;\n      }\n    }\n    return super.styleHas(property, lineIndex);\n  }\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    let offset = 0,\n      nextLineIndex = lineIndex + 1,\n      nextOffset: number,\n      shouldLimit = false;\n    const map = this._styleMap[lineIndex],\n      mapNextLine = this._styleMap[lineIndex + 1];\n    if (map) {\n      lineIndex = map.line;\n      offset = map.offset;\n    }\n    if (mapNextLine) {\n      nextLineIndex = mapNextLine.line;\n      shouldLimit = nextLineIndex === lineIndex;\n      nextOffset = mapNextLine.offset;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        const p2Number = parseInt(p2, 10);\n        if (p2Number >= offset && (!shouldLimit || p2Number < nextOffset!)) {\n          // eslint-disable-next-line no-unused-vars\n          for (const p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (!map) {\n        return {};\n      }\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n    }\n    return super._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    const map = this._styleMap[lineIndex];\n    super._setStyleDeclaration(map.line, map.offset + charIndex, style);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._deleteStyleDeclaration(map.line, map.offset + charIndex);\n  }\n\n  /**\n   * probably broken need a fix\n   * Returns the real style line that correspond to the wrapped lineIndex line\n   * Used just to verify if the line does exist or not.\n   * @param {Number} lineIndex\n   * @returns {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    const map = this._styleMap[lineIndex];\n    return !!this.styles[map.line];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._setLineStyle(map.line);\n  }\n\n  /**\n   * Wraps text using the 'width' property of Textbox. First this function\n   * splits text on newlines, so we preserve newlines entered by the user.\n   * Then it wraps each line using the width of the Textbox by calling\n   * _wrapLine().\n   * @param {Array} lines The string array of text that is split into lines\n   * @param {Number} desiredWidth width you want to wrap to\n   * @returns {Array} Array of lines\n   */\n  _wrapText(lines: string[], desiredWidth: number): string[][] {\n    this.isWrapping = true;\n    // extract all thewords and the widths to optimally wrap lines.\n    const data = this.getGraphemeDataForRender(lines);\n    const wrapped: string[][] = [];\n    for (let i = 0; i < data.wordsData.length; i++) {\n      wrapped.push(...this._wrapLine(i, desiredWidth, data));\n    }\n    this.isWrapping = false;\n    return wrapped;\n  }\n\n  /**\n   * For each line of text terminated by an hard line stop,\n   * measure each word width and extract the largest word from all.\n   * The returned words here are the one that at the end will be rendered.\n   * @param {string[]} lines the lines we need to measure\n   *\n   */\n  getGraphemeDataForRender(lines: string[]): GraphemeData {\n    const splitByGrapheme = this.splitByGrapheme,\n      infix = splitByGrapheme ? '' : ' ';\n\n    let largestWordWidth = 0;\n\n    const data = lines.map((line, lineIndex) => {\n      let offset = 0;\n      const wordsOrGraphemes = splitByGrapheme\n        ? this.graphemeSplit(line)\n        : this.wordSplit(line);\n\n      if (wordsOrGraphemes.length === 0) {\n        return [{ word: [], width: 0 }];\n      }\n\n      return wordsOrGraphemes.map((word: string) => {\n        // if using splitByGrapheme words are already in graphemes.\n        const graphemeArray = splitByGrapheme\n          ? [word]\n          : this.graphemeSplit(word);\n        const width = this._measureWord(graphemeArray, lineIndex, offset);\n        largestWordWidth = Math.max(width, largestWordWidth);\n        offset += graphemeArray.length + infix.length;\n        return { word: graphemeArray, width };\n      });\n    });\n\n    return {\n      wordsData: data,\n      largestWordWidth,\n    };\n  }\n\n  /**\n   * Helper function to measure a string of text, given its lineIndex and charIndex offset\n   * It gets called when charBounds are not available yet.\n   * Override if necessary\n   * Use with {@link Textbox#wordSplit}\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {String} text\n   * @param {number} lineIndex\n   * @param {number} charOffset\n   * @returns {number}\n   */\n  _measureWord(word: string[], lineIndex: number, charOffset = 0): number {\n    let width = 0,\n      prevGrapheme;\n    const skipLeft = true;\n    for (let i = 0, len = word.length; i < len; i++) {\n      const box = this._getGraphemeBox(\n        word[i],\n        lineIndex,\n        i + charOffset,\n        prevGrapheme,\n        skipLeft,\n      );\n      width += box.kernedWidth;\n      prevGrapheme = word[i];\n    }\n    return width;\n  }\n\n  /**\n   * Override this method to customize word splitting\n   * Use with {@link Textbox#_measureWord}\n   * @param {string} value\n   * @returns {string[]} array of words\n   */\n  wordSplit(value: string): string[] {\n    return value.split(this._wordJoiners);\n  }\n\n  /**\n   * Wraps a line of text using the width of the Textbox as desiredWidth\n   * and leveraging the known width o words from GraphemeData\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} desiredWidth width you want to wrap the line to\n   * @param {GraphemeData} graphemeData an object containing all the lines' words width.\n   * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n   * @returns {Array} Array of line(s) into which the given text is wrapped\n   * to.\n   */\n  _wrapLine(\n    lineIndex: number,\n    desiredWidth: number,\n    { largestWordWidth, wordsData }: GraphemeData,\n    reservedSpace = 0,\n  ): string[][] {\n    const additionalSpace = this._getWidthOfCharSpacing(),\n      splitByGrapheme = this.splitByGrapheme,\n      graphemeLines = [],\n      infix = splitByGrapheme ? '' : ' ';\n\n    let lineWidth = 0,\n      line: string[] = [],\n      // spaces in different languages?\n      offset = 0,\n      infixWidth = 0,\n      lineJustStarted = true;\n\n    desiredWidth -= reservedSpace;\n\n    const maxWidth = Math.max(\n      desiredWidth,\n      largestWordWidth,\n      this.dynamicMinWidth,\n    );\n    // layout words\n    const data = wordsData[lineIndex];\n    offset = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      const { word, width: wordWidth } = data[i];\n      offset += word.length;\n\n      lineWidth += infixWidth + wordWidth - additionalSpace;\n      if (lineWidth > maxWidth && !lineJustStarted) {\n        graphemeLines.push(line);\n        line = [];\n        lineWidth = wordWidth;\n        lineJustStarted = true;\n      } else {\n        lineWidth += additionalSpace;\n      }\n\n      if (!lineJustStarted && !splitByGrapheme) {\n        line.push(infix);\n      }\n      line = line.concat(word);\n\n      infixWidth = splitByGrapheme\n        ? 0\n        : this._measureWord([infix], lineIndex, offset);\n      offset++;\n      lineJustStarted = false;\n    }\n\n    i && graphemeLines.push(line);\n\n    // TODO: this code is probably not necessary anymore.\n    // it can be moved out of this function since largestWordWidth is now\n    // known in advance\n    if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n      this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n    }\n    return graphemeLines;\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @param {Number} lineIndex text to split\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    if (!this._styleMap[lineIndex + 1]) {\n      // is last line, return true;\n      return true;\n    }\n    if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n      // this is last line before a line break, return true;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * This is important only for splitByGrapheme at the end of wrapping.\n   * If we are not wrapping the offset is always 1\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1 {\n    if (this.splitByGrapheme && !skipWrapping) {\n      return this.isEndOfWrapping(lineIndex) ? 1 : 0;\n    }\n    return 1;\n  }\n\n  /**\n   * Gets lines of text to render in the Textbox. This function calculates\n   * text wrapping on the fly every time it is called.\n   * @param {String} text text to split\n   * @returns {Array} Array of lines in the Textbox.\n   * @override\n   */\n  _splitTextIntoLines(text: string) {\n    const newText = super._splitTextIntoLines(text),\n      graphemeLines = this._wrapText(newText.lines, this.width),\n      lines = new Array(graphemeLines.length);\n    for (let i = 0; i < graphemeLines.length; i++) {\n      lines[i] = graphemeLines[i].join('');\n    }\n    newText.lines = lines;\n    newText.graphemeLines = graphemeLines;\n    return newText;\n  }\n\n  getMinWidth() {\n    return Math.max(this.minWidth, this.dynamicMinWidth);\n  }\n\n  _removeExtraneousStyles() {\n    const linesToKeep = new Map();\n    for (const prop in this._styleMap) {\n      const propNumber = parseInt(prop, 10);\n      if (this._textLines[propNumber]) {\n        const lineIndex = this._styleMap[prop].line;\n        linesToKeep.set(`${lineIndex}`, true);\n      }\n    }\n    for (const prop in this.styles) {\n      if (!linesToKeep.has(prop)) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject<T, K>([\n      'minWidth',\n      'splitByGrapheme',\n      ...propertiesToInclude,\n    ] as K[]) as Pick<T, K> & SProps;\n  }\n}\n\nclassRegistry.setClass(Textbox);\n","import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport { sendPointToPlane } from '../../util/misc/planeChange';\nimport type { LayoutStrategyResult, StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { getObjectBounds } from './utils';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to match the clip path bounding box.\n */\nexport class ClipPathLayout extends LayoutStrategy {\n  static readonly type = 'clip-path';\n\n  shouldPerformLayout(context: StrictLayoutContext): boolean {\n    return !!context.target.clipPath && super.shouldPerformLayout(context);\n  }\n\n  shouldLayoutClipPath() {\n    return false;\n  }\n\n  calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    const { target } = context;\n    const { clipPath, group } = target;\n    if (!clipPath || !this.shouldPerformLayout(context)) {\n      return;\n    }\n    // TODO: remove stroke calculation from this case\n    const { width, height } = makeBoundingBoxFromPoints(\n      getObjectBounds(target, clipPath as FabricObject),\n    );\n    const size = new Point(width, height);\n    if (clipPath.absolutePositioned) {\n      //  we want the center point to exist in group's containing plane\n      const clipPathCenter = sendPointToPlane(\n        clipPath.getRelativeCenterPoint(),\n        undefined,\n        group ? group.calcTransformMatrix() : undefined,\n      );\n      return {\n        center: clipPathCenter,\n        size,\n      };\n    } else {\n      //  we want the center point to exist in group's containing plane, so we send it upwards\n      const clipPathCenter = clipPath\n        .getRelativeCenterPoint()\n        .transform(target.calcOwnMatrix(), true);\n      if (this.shouldPerformLayout(context)) {\n        // the clip path is positioned relative to the group's center which is affected by the bbox\n        // so we first calculate the bbox\n        const { center = new Point(), correction = new Point() } =\n          this.calcBoundingBox(objects, context) || {};\n        return {\n          center: center.add(clipPathCenter),\n          correction: correction.subtract(clipPathCenter),\n          size,\n        };\n      } else {\n        return {\n          center: target.getRelativeCenterPoint().add(clipPathCenter),\n          size,\n        };\n      }\n    }\n  }\n}\n\nclassRegistry.setClass(ClipPathLayout);\n","import { Point } from '../../Point';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will keep target's initial size.\n */\nexport class FixedLayout extends LayoutStrategy {\n  static readonly type = 'fixed';\n\n  /**\n   * @override respect target's initial size\n   */\n  getInitialSize(\n    { target }: StrictLayoutContext & InitializationLayoutContext,\n    { size }: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ): Point {\n    return new Point(target.width || size.x, target.height || size.y);\n  }\n}\n\nclassRegistry.setClass(FixedLayout);\n","import { LayoutManager } from './LayoutManager';\nimport type { RegistrationContext, StrictLayoutContext } from './types';\nimport type { Group } from '../shapes/Group';\n\n/**\n * Today the LayoutManager class also takes care of subscribing event handlers\n * to update the group layout when the group is interactive and a transform is applied\n * to a child object.\n * The ActiveSelection is never interactive, but it could contain objects from\n * groups that are.\n * The standard LayoutManager would subscribe the children of the activeSelection to\n * perform layout changes to the active selection itself, what we need instead is that\n * the transformation applied to the active selection will trigger changes to the\n * original group of the children ( the one referenced under the parent property )\n * This subclass of the LayoutManager has a single duty to fill the gap of this difference.`\n */\nexport class ActiveSelectionLayoutManager extends LayoutManager {\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      parent.layoutManager.subscribeTargets({\n        target: parent,\n        targets: [activeSelection],\n      });\n    });\n  }\n\n  /**\n   * unsubscribe from parent only if all its children were deselected\n   */\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const selectedObjects = activeSelection.getObjects();\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      !selectedObjects.some((object) => object.parent === parent) &&\n        parent.layoutManager.unsubscribeTargets({\n          target: parent,\n          targets: [activeSelection],\n        });\n    });\n  }\n}\n","import type { ControlRenderingStyleOverride } from '../controls/controlRendering';\nimport { classRegistry } from '../ClassRegistry';\nimport type { GroupProps } from './Group';\nimport { Group } from './Group';\nimport type { FabricObject } from './Object/FabricObject';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { TClassProperties } from '../typedefs';\nimport { log } from '../util/internals/console';\nimport { ActiveSelectionLayoutManager } from '../LayoutManager/ActiveSelectionLayoutManager';\n\nexport type MultiSelectionStacking = 'canvas-stacking' | 'selection-order';\n\nexport interface ActiveSelectionOptions extends GroupProps {\n  multiSelectionStacking: MultiSelectionStacking;\n}\n\nconst activeSelectionDefaultValues: Partial<TClassProperties<ActiveSelection>> =\n  {\n    multiSelectionStacking: 'canvas-stacking',\n  };\n\n/**\n * Used by Canvas to manage selection.\n *\n * @example\n * class MyActiveSelection extends ActiveSelection {\n *   ...\n * }\n *\n * // override the default `ActiveSelection` class\n * classRegistry.setClass(MyActiveSelection)\n */\nexport class ActiveSelection extends Group {\n  static type = 'ActiveSelection';\n\n  static ownDefaults: Record<string, any> = activeSelectionDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...ActiveSelection.ownDefaults };\n  }\n\n  /**\n   * The ActiveSelection needs to use the ActiveSelectionLayoutManager\n   * or selections on interactive groups may be broken\n   */\n  declare layoutManager: ActiveSelectionLayoutManager;\n\n  /**\n   * controls how selected objects are added during a multiselection event\n   * - `canvas-stacking` adds the selected object to the active selection while respecting canvas object stacking order\n   * - `selection-order` adds the selected object to the top of the stack,\n   * meaning that the stack is ordered by the order in which objects were selected\n   * @default `canvas-stacking`\n   */\n  declare multiSelectionStacking: MultiSelectionStacking;\n\n  constructor(\n    objects: FabricObject[] = [],\n    options: Partial<ActiveSelectionOptions> = {},\n  ) {\n    super();\n    Object.assign(this, ActiveSelection.ownDefaults);\n    this.setOptions(options);\n    const { left, top, layoutManager } = options;\n    this.groupInit(objects, {\n      left,\n      top,\n      layoutManager: layoutManager ?? new ActiveSelectionLayoutManager(),\n    });\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return true;\n  }\n\n  /**\n   * @private\n   * @override we don't want the selection monitor to be active\n   */\n  __objectSelectionMonitor() {\n    //  noop\n  }\n\n  /**\n   * Adds objects with respect to {@link multiSelectionStacking}\n   * @param targets object to add to selection\n   */\n  multiSelectAdd(...targets: FabricObject[]) {\n    if (this.multiSelectionStacking === 'selection-order') {\n      this.add(...targets);\n    } else {\n      //  respect object stacking as it is on canvas\n      //  perf enhancement for large ActiveSelection: consider a binary search of `isInFrontOf`\n      targets.forEach((target) => {\n        const index = this._objects.findIndex((obj) => obj.isInFrontOf(target));\n        const insertAt =\n          index === -1\n            ? //  `target` is in front of all other objects\n              this.size()\n            : index;\n        this.insertAt(insertAt, target);\n      });\n    }\n  }\n\n  /**\n   * @override block ancestors/descendants of selected objects from being selected to prevent a circular object tree\n   */\n  canEnterGroup(object: FabricObject) {\n    if (\n      this.getObjects().some(\n        (o) => o.isDescendantOf(object) || object.isDescendantOf(o),\n      )\n    ) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'ActiveSelection: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    }\n\n    return super.canEnterGroup(object);\n  }\n\n  /**\n   * Change an object so that it can be part of an active selection.\n   * this method is called by multiselectAdd from canvas code.\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    // This condition check that the object has currently a group, and the group\n    // is also its parent, meaning that is not in an active selection, but is\n    // in a normal group.\n    if (object.parent && object.parent === object.group) {\n      // Disconnect the object from the group functionalities, but keep the ref parent intact\n      // for later re-enter\n      object.parent._exitGroup(object);\n      // in this case the object is probably inside an active selection.\n    } else if (object.group && object.parent !== object.group) {\n      // in this case group.remove will also clear the old parent reference.\n      object.group.remove(object);\n    }\n    // enter the active selection from a render perspective\n    // the object will be in the objects array of both the ActiveSelection and the Group\n    // but referenced in the group's _activeObjects so that it won't be rendered twice.\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * we want objects to retain their canvas ref when exiting instance\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    // return to parent\n    object.parent && object.parent._enterGroup(object, true);\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    super._onAfterObjectsChange(type, targets);\n    const groups = new Set<Group>();\n    targets.forEach((object) => {\n      const { parent } = object;\n      parent && groups.add(parent);\n    });\n    if (type === LAYOUT_TYPE_REMOVED) {\n      //  invalidate groups' layout and mark as dirty\n      groups.forEach((group) => {\n        group._onAfterObjectsChange(LAYOUT_TYPE_ADDED, targets);\n      });\n    } else {\n      //  mark groups as dirty\n      groups.forEach((group) => {\n        group._set('dirty', true);\n      });\n    }\n  }\n\n  /**\n   * @override remove all objects\n   */\n  onDeselect() {\n    this.removeAll();\n    return false;\n  }\n\n  /**\n   * Returns string representation of a group\n   * @return {String}\n   */\n  toString() {\n    return `#<ActiveSelection: (${this.complexity()})>`;\n  }\n\n  /**\n   * Decide if the object should cache or not. The Active selection never caches\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return false;\n  }\n\n  /**\n   * Check if this group or its parent group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache() {\n    return false;\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [styleOverride] properties to override the object style\n   * @param {Object} [childrenOverride] properties to override the children overrides\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride?: ControlRenderingStyleOverride,\n    childrenOverride?: ControlRenderingStyleOverride,\n  ) {\n    ctx.save();\n    ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    const options = {\n      hasControls: false,\n      ...childrenOverride,\n      forActiveSelection: true,\n    };\n    for (let i = 0; i < this._objects.length; i++) {\n      this._objects[i]._renderControls(ctx, options);\n    }\n    super._renderControls(ctx, styleOverride);\n    ctx.restore();\n  }\n}\n\nclassRegistry.setClass(ActiveSelection);\nclassRegistry.setClass(ActiveSelection, 'activeSelection');\n","/**\n * Canvas 2D filter backend.\n */\nimport type { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TPipelineResources } from './typedefs';\n\nexport class Canvas2dFilterBackend {\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  /**\n   * Apply a set of filters against a source image and draw the filtered output\n   * to the provided destination canvas.\n   *\n   * @param {EnhancedFilter} filters The filter to apply.\n   * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n   * @param {Number} sourceWidth The width of the source input.\n   * @param {Number} sourceHeight The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    sourceElement: CanvasImageSource,\n    sourceWidth: number,\n    sourceHeight: number,\n    targetCanvas: HTMLCanvasElement,\n  ): T2DPipelineState | void {\n    const ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n    const imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const pipelineState: T2DPipelineState = {\n      sourceWidth,\n      sourceHeight,\n      imageData,\n      originalEl: sourceElement,\n      originalImageData,\n      canvasEl: targetCanvas,\n      ctx,\n      filterBackend: this,\n    };\n    filters.forEach((filter) => {\n      filter.applyTo(pipelineState);\n    });\n    const { imageData: imageDataPostFilter } = pipelineState;\n    if (\n      imageDataPostFilter.width !== sourceWidth ||\n      imageDataPostFilter.height !== sourceHeight\n    ) {\n      targetCanvas.width = imageDataPostFilter.width;\n      targetCanvas.height = imageDataPostFilter.height;\n    }\n    ctx.putImageData(imageDataPostFilter, 0, 0);\n    return pipelineState;\n  }\n}\n","import { config } from '../config';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport type {\n  TWebGLPipelineState,\n  TProgramCache,\n  TTextureCache,\n  TPipelineResources,\n} from './typedefs';\nimport type { BaseFilter } from './BaseFilter';\n\nexport class WebGLFilterBackend {\n  declare tileSize: number;\n\n  /**\n   * Define ...\n   **/\n  aPosition: Float32Array = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n\n  /**\n   * If GLPut data is the fastest operation, or if forced, this buffer will be used\n   * to transfer the data back in the 2d logic\n   **/\n  declare imageBuffer?: ArrayBuffer;\n\n  declare canvas: HTMLCanvasElement;\n\n  /**\n   * The Webgl context that will execute the operations for filtering\n   **/\n  declare gl: WebGLRenderingContext;\n\n  /**\n   * Keyed map for shader cache\n   **/\n  declare programCache: TProgramCache;\n\n  /**\n   * Keyed map for texture cache\n   **/\n  declare textureCache: TTextureCache;\n\n  /**\n   * Contains GPU info for debug\n   **/\n  declare gpuInfo: any;\n\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  constructor({ tileSize = config.textureSize } = {}) {\n    this.tileSize = tileSize;\n    this.setupGLContext(tileSize, tileSize);\n    this.captureGPUInfo();\n  }\n\n  /**\n   * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n   */\n  setupGLContext(width: number, height: number): void {\n    this.dispose();\n    this.createWebGLCanvas(width, height);\n  }\n\n  /**\n   * Create a canvas element and associated WebGL context and attaches them as\n   * class properties to the GLFilterBackend class.\n   */\n  createWebGLCanvas(width: number, height: number): void {\n    const canvas = createCanvasElementFor({ width, height });\n    const glOptions = {\n        alpha: true,\n        premultipliedAlpha: false,\n        depth: false,\n        stencil: false,\n        antialias: false,\n      },\n      gl = canvas.getContext('webgl', glOptions) as WebGLRenderingContext;\n\n    if (!gl) {\n      return;\n    }\n    gl.clearColor(0, 0, 0, 0);\n    // this canvas can fire webglcontextlost and webglcontextrestored\n    this.canvas = canvas;\n    this.gl = gl;\n  }\n\n  /**\n   * Attempts to apply the requested filters to the source provided, drawing the filtered output\n   * to the provided target canvas.\n   *\n   * @param {Array} filters The filters to apply.\n   * @param {TexImageSource} source The source to be filtered.\n   * @param {Number} width The width of the source input.\n   * @param {Number} height The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n   * omitted, caching will be skipped.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    source: TexImageSource,\n    width: number,\n    height: number,\n    targetCanvas: HTMLCanvasElement,\n    cacheKey?: string,\n  ): TWebGLPipelineState | undefined {\n    const gl = this.gl;\n    const ctx = targetCanvas.getContext('2d');\n    if (!gl || !ctx) {\n      return;\n    }\n    let cachedTexture;\n    if (cacheKey) {\n      cachedTexture = this.getCachedTexture(cacheKey, source);\n    }\n    const pipelineState: TWebGLPipelineState = {\n      originalWidth:\n        (source as HTMLImageElement).width ||\n        (source as HTMLImageElement).naturalWidth ||\n        0,\n      originalHeight:\n        (source as HTMLImageElement).height ||\n        (source as HTMLImageElement).naturalHeight ||\n        0,\n      sourceWidth: width,\n      sourceHeight: height,\n      destinationWidth: width,\n      destinationHeight: height,\n      context: gl,\n      sourceTexture: this.createTexture(\n        gl,\n        width,\n        height,\n        !cachedTexture ? source : undefined,\n      ),\n      targetTexture: this.createTexture(gl, width, height),\n      originalTexture:\n        cachedTexture ||\n        this.createTexture(\n          gl,\n          width,\n          height,\n          !cachedTexture ? source : undefined,\n        )!,\n      passes: filters.length,\n      webgl: true,\n      aPosition: this.aPosition,\n      programCache: this.programCache,\n      pass: 0,\n      filterBackend: this,\n      targetCanvas: targetCanvas,\n    };\n    const tempFbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n    filters.forEach((filter: any) => {\n      filter && filter.applyTo(pipelineState);\n    });\n    resizeCanvasIfNeeded(pipelineState);\n    this.copyGLTo2D(gl, pipelineState);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.deleteTexture(pipelineState.sourceTexture);\n    gl.deleteTexture(pipelineState.targetTexture);\n    gl.deleteFramebuffer(tempFbo);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    return pipelineState;\n  }\n\n  /**\n   * Detach event listeners, remove references, and clean up caches.\n   */\n  dispose() {\n    if (this.canvas) {\n      // we are disposing, we don't care about the fact\n      // that the canvas shouldn't be null.\n      // @ts-expect-error disposing\n      this.canvas = null;\n      // @ts-expect-error disposing\n      this.gl = null;\n    }\n    this.clearWebGLCaches();\n  }\n\n  /**\n   * Wipe out WebGL-related caches.\n   */\n  clearWebGLCaches() {\n    this.programCache = {};\n    this.textureCache = {};\n  }\n\n  /**\n   * Create a WebGL texture object.\n   *\n   * Accepts specific dimensions to initialize the texture to or a source image.\n   *\n   * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n   * @param {number} width The width to initialize the texture at.\n   * @param {number} height The height to initialize the texture.\n   * @param {TexImageSource} textureImageSource A source for the texture data.\n   * @param {number} filter gl.NEAREST default or gl.LINEAR filters for the texture.\n   * This filter is very useful for LUTs filters. If you need interpolation use gl.LINEAR\n   * @returns {WebGLTexture}\n   */\n  createTexture(\n    gl: WebGLRenderingContext,\n    width: number,\n    height: number,\n    textureImageSource?: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ) {\n    const {\n      NEAREST,\n      TEXTURE_2D,\n      RGBA,\n      UNSIGNED_BYTE,\n      CLAMP_TO_EDGE,\n      TEXTURE_MAG_FILTER,\n      TEXTURE_MIN_FILTER,\n      TEXTURE_WRAP_S,\n      TEXTURE_WRAP_T,\n    } = gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(TEXTURE_2D, texture);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n    if (textureImageSource) {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        RGBA,\n        UNSIGNED_BYTE,\n        textureImageSource,\n      );\n    } else {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        width,\n        height,\n        0,\n        RGBA,\n        UNSIGNED_BYTE,\n        null,\n      );\n    }\n    return texture;\n  }\n\n  /**\n   * Can be optionally used to get a texture from the cache array\n   *\n   * If an existing texture is not found, a new texture is created and cached.\n   *\n   * @param {String} uniqueId A cache key to use to find an existing texture.\n   * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n   * texture cache entry if one does not already exist.\n   */\n  getCachedTexture(\n    uniqueId: string,\n    textureImageSource: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ): WebGLTexture | null {\n    const { textureCache } = this;\n    if (textureCache[uniqueId]) {\n      return textureCache[uniqueId];\n    } else {\n      const texture = this.createTexture(\n        this.gl,\n        (textureImageSource as HTMLImageElement).width,\n        (textureImageSource as HTMLImageElement).height,\n        textureImageSource,\n        filter,\n      );\n      if (texture) {\n        textureCache[uniqueId] = texture;\n      }\n      return texture;\n    }\n  }\n\n  /**\n   * Clear out cached resources related to a source image that has been\n   * filtered previously.\n   *\n   * @param {String} cacheKey The cache key provided when the source image was filtered.\n   */\n  evictCachesForKey(cacheKey: string) {\n    if (this.textureCache[cacheKey]) {\n      this.gl.deleteTexture(this.textureCache[cacheKey]);\n      delete this.textureCache[cacheKey];\n    }\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas.\n   *\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2D(gl: WebGLRenderingContext, pipelineState: TWebGLPipelineState) {\n    const glCanvas = gl.canvas,\n      targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    const sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(\n      glCanvas,\n      0,\n      sourceY,\n      targetCanvas.width,\n      targetCanvas.height,\n      0,\n      0,\n      targetCanvas.width,\n      targetCanvas.height,\n    );\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2DPutImageData(\n    this: Required<WebGLFilterBackend>,\n    gl: WebGLRenderingContext,\n    pipelineState: TWebGLPipelineState,\n  ) {\n    const targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n    if (!ctx) {\n      return;\n    }\n    const u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    const u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    const imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Attempt to extract GPU information strings from a WebGL context.\n   *\n   * Useful information when debugging or blacklisting specific GPUs.\n   *\n   * @returns {Object} A GPU info object with renderer and vendor strings.\n   */\n  captureGPUInfo() {\n    if (this.gpuInfo) {\n      return this.gpuInfo;\n    }\n    const gl = this.gl,\n      gpuInfo = { renderer: '', vendor: '' };\n    if (!gl) {\n      return gpuInfo;\n    }\n    const ext = gl.getExtension('WEBGL_debug_renderer_info');\n    if (ext) {\n      const renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n      const vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n      if (renderer) {\n        gpuInfo.renderer = renderer.toLowerCase();\n      }\n      if (vendor) {\n        gpuInfo.vendor = vendor.toLowerCase();\n      }\n    }\n    this.gpuInfo = gpuInfo;\n    return gpuInfo;\n  }\n}\n\nfunction resizeCanvasIfNeeded(pipelineState: TWebGLPipelineState): void {\n  const targetCanvas = pipelineState.targetCanvas,\n    width = targetCanvas.width,\n    height = targetCanvas.height,\n    dWidth = pipelineState.destinationWidth,\n    dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n","import { config } from '../config';\nimport { getEnv } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { Canvas2dFilterBackend } from './Canvas2dFilterBackend';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\n\nexport type FilterBackend = WebGLFilterBackend | Canvas2dFilterBackend;\n\nlet filterBackend: FilterBackend;\n\n/**\n * Verifies if it is possible to initialize webgl or fallback on a canvas2d filtering backend\n */\nexport function initFilterBackend(): FilterBackend {\n  const { WebGLProbe } = getEnv();\n  WebGLProbe.queryWebGL(createCanvasElement());\n  if (config.enableGLFiltering && WebGLProbe.isSupported(config.textureSize)) {\n    return new WebGLFilterBackend({ tileSize: config.textureSize });\n  } else {\n    return new Canvas2dFilterBackend();\n  }\n}\n\n/**\n * Get the current fabricJS filter backend  or initialize one if not available yet\n * @param [strict] pass `true` to create the backend if it wasn't created yet (default behavior),\n * pass `false` to get the backend ref without mutating it\n */\nexport function getFilterBackend(strict = true): FilterBackend {\n  if (!filterBackend && strict) {\n    filterBackend = initFilterBackend();\n  }\n  return filterBackend;\n}\n\nexport function setFilterBackend(backend: FilterBackend) {\n  filterBackend = backend;\n}\n","import { getFabricDocument, getEnv } from '../env';\nimport type { BaseFilter } from '../filters/BaseFilter';\nimport { getFilterBackend } from '../filters/FilterBackend';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type {\n  TClassProperties,\n  TCrossOrigin,\n  TSize,\n  Abortable,\n  TOptions,\n} from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport { findScaleToCover, findScaleToFit } from '../util/misc/findScaleTo';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n  loadImage,\n} from '../util/misc/objectEnlive';\nimport { parsePreserveAspectRatioAttribute } from '../util/misc/svgParsing';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { WebGLFilterBackend } from '../filters/WebGLFilterBackend';\nimport { FILL, NONE } from '../constants';\nimport { getDocumentFromElement } from '../util/dom_misc';\nimport type { CSSRules } from '../parser/typedefs';\nimport type { Resize } from '../filters/Resize';\nimport type { TCachedFabricObject } from './Object/Object';\nimport { log } from '../util/internals/console';\n\n// @todo Would be nice to have filtering code not imported directly.\n\nexport type ImageSource =\n  | HTMLImageElement\n  | HTMLVideoElement\n  | HTMLCanvasElement;\n\ninterface UniqueImageProps {\n  srcFromAttribute: boolean;\n  minimumScaleTrigger: number;\n  cropX: number;\n  cropY: number;\n  imageSmoothing: boolean;\n  filters: BaseFilter<string, Record<string, any>>[];\n  resizeFilter?: Resize;\n}\n\nexport const imageDefaultValues: Partial<TClassProperties<FabricImage>> = {\n  strokeWidth: 0,\n  srcFromAttribute: false,\n  minimumScaleTrigger: 0.5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: true,\n};\n\nexport interface SerializedImageProps extends SerializedObjectProps {\n  src: string;\n  crossOrigin: TCrossOrigin;\n  filters: any[];\n  resizeFilter?: any;\n  cropX: number;\n  cropY: number;\n}\n\nexport interface ImageProps extends FabricObjectProps, UniqueImageProps {}\n\nconst IMAGE_PROPS = ['cropX', 'cropY'] as const;\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n */\nexport class FabricImage<\n    Props extends TOptions<ImageProps> = Partial<ImageProps>,\n    SProps extends SerializedImageProps = SerializedImageProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements ImageProps\n{\n  /**\n   * When calling {@link FabricImage.getSrc}, return value from element src with `element.getAttribute('src')`.\n   * This allows for relative urls as image src.\n   * @since 2.7.0\n   * @type Boolean\n   * @default false\n   */\n  declare srcFromAttribute: boolean;\n\n  /**\n   * private\n   * contains last value of scaleX to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleX = 1;\n\n  /**\n   * private\n   * contains last value of scaleY to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleY = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingX = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingY = 1;\n\n  /**\n   * minimum scale factor under which any resizeFilter is triggered to resize the image\n   * 0 will disable the automatic resize. 1 will trigger automatically always.\n   * number bigger than 1 are not implemented yet.\n   * @type Number\n   */\n  declare minimumScaleTrigger: number;\n\n  /**\n   * key used to retrieve the texture representing this image\n   * @since 2.0.0\n   * @type String\n   * @default\n   */\n  declare cacheKey: string;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropX: number;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropY: number;\n\n  /**\n   * Indicates whether this canvas will use image smoothing when painting this image.\n   * Also influence if the cacheCanvas for this image uses imageSmoothing\n   * @since 4.0.0-beta.11\n   * @type Boolean\n   * @default\n   */\n  declare imageSmoothing: boolean;\n\n  declare preserveAspectRatio: string;\n\n  protected declare src: string;\n\n  declare filters: BaseFilter<string, Record<string, any>>[];\n  declare resizeFilter: Resize;\n\n  declare _element: ImageSource;\n  declare _filteredEl?: HTMLCanvasElement;\n  declare _originalElement: ImageSource;\n\n  static type = 'Image';\n\n  static cacheProperties = [...cacheProperties, ...IMAGE_PROPS];\n\n  static ownDefaults = imageDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...FabricImage.ownDefaults,\n    };\n  }\n  /**\n   * Constructor\n   * Image can be initialized with any canvas drawable or a string.\n   * The string should be a url and will be loaded as an image.\n   * Canvas and Image element work out of the box, while videos require extra code to work.\n   * Please check video element events for seeking.\n   * @param {ImageSource | string} element Image element\n   * @param {Object} [options] Options object\n   */\n  constructor(elementId: string, options?: Props);\n  constructor(element: ImageSource, options?: Props);\n  constructor(arg0: ImageSource | string, options?: Props) {\n    super();\n    this.filters = [];\n    Object.assign(this, FabricImage.ownDefaults);\n    this.setOptions(options);\n    this.cacheKey = `texture${uid()}`;\n    this.setElement(\n      typeof arg0 === 'string'\n        ? ((\n            (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n            getFabricDocument()\n          ).getElementById(arg0) as ImageSource)\n        : arg0,\n      options,\n    );\n  }\n\n  /**\n   * Returns image element which this instance if based on\n   */\n  getElement() {\n    return this._element;\n  }\n\n  /**\n   * Sets image element for this instance to a specified one.\n   * If filters defined they are applied to new image.\n   * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n   * @param {HTMLImageElement} element\n   * @param {Partial<TSize>} [size] Options object\n   */\n  setElement(element: ImageSource, size: Partial<TSize> = {}) {\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._element = element;\n    this._originalElement = element;\n    this._setWidthHeight(size);\n    element.classList?.add(FabricImage.CSS_CANVAS);\n    if (this.filters.length !== 0) {\n      this.applyFilters();\n    }\n    // resizeFilters work on the already filtered copy.\n    // we need to apply resizeFilters AFTER normal filters.\n    // applyResizeFilters is run more often than normal filters\n    // and is triggered by user interactions rather than dev code\n    if (this.resizeFilter) {\n      this.applyResizeFilters();\n    }\n  }\n\n  /**\n   * Delete a single texture if in webgl mode\n   */\n  removeTexture(key: string) {\n    const backend = getFilterBackend(false);\n    if (backend instanceof WebGLFilterBackend) {\n      backend.evictCachesForKey(key);\n    }\n  }\n\n  /**\n   * Delete textures, reference to elements and eventually JSDOM cleanup\n   */\n  dispose() {\n    super.dispose();\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._cacheContext = null;\n    (\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'] as const\n    ).forEach((elementKey) => {\n      const el = this[elementKey];\n      el && getEnv().dispose(el);\n      // @ts-expect-error disposing\n      this[elementKey] = undefined;\n    });\n  }\n\n  /**\n   * Get the crossOrigin value (of the corresponding image element)\n   */\n  getCrossOrigin(): string | null {\n    return (\n      this._originalElement &&\n      ((this._originalElement as any).crossOrigin || null)\n    );\n  }\n\n  /**\n   * Returns original size of an image\n   */\n  getOriginalSize() {\n    const element = this.getElement() as any;\n    if (!element) {\n      return {\n        width: 0,\n        height: 0,\n      };\n    }\n    return {\n      width: element.naturalWidth || element.width,\n      height: element.naturalHeight || element.height,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _stroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    const w = this.width / 2,\n      h = this.height / 2;\n    ctx.beginPath();\n    ctx.moveTo(-w, -h);\n    ctx.lineTo(w, -h);\n    ctx.lineTo(w, h);\n    ctx.lineTo(-w, h);\n    ctx.lineTo(-w, -h);\n    ctx.closePath();\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const filters: Record<string, any>[] = [];\n    this.filters.forEach((filterObj) => {\n      filterObj && filters.push(filterObj.toObject());\n    });\n    return {\n      ...super.toObject([...IMAGE_PROPS, ...propertiesToInclude]),\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters,\n      ...(this.resizeFilter\n        ? { resizeFilter: this.resizeFilter.toObject() }\n        : {}),\n    };\n  }\n\n  /**\n   * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n   * @return {Boolean}\n   */\n  hasCrop() {\n    return (\n      !!this.cropX ||\n      !!this.cropY ||\n      this.width < this._element.width ||\n      this.height < this._element.height\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {string[]} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const imageMarkup: string[] = [],\n      element = this._element,\n      x = -this.width / 2,\n      y = -this.height / 2;\n    let svgString: string[] = [],\n      strokeSvg: string[] = [],\n      clipPath = '',\n      imageRendering = '';\n    if (!element) {\n      return [];\n    }\n    if (this.hasCrop()) {\n      const clipPathId = uid();\n      svgString.push(\n        '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n        '\\t<rect x=\"' +\n          x +\n          '\" y=\"' +\n          y +\n          '\" width=\"' +\n          this.width +\n          '\" height=\"' +\n          this.height +\n          '\" />\\n',\n        '</clipPath>\\n',\n      );\n      clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n    }\n    if (!this.imageSmoothing) {\n      imageRendering = ' image-rendering=\"optimizeSpeed\"';\n    }\n    imageMarkup.push(\n      '\\t<image ',\n      'COMMON_PARTS',\n      `xlink:href=\"${this.getSvgSrc(true)}\" x=\"${x - this.cropX}\" y=\"${\n        y - this.cropY\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n      }\" width=\"${\n        element.width || (element as HTMLImageElement).naturalWidth\n      }\" height=\"${\n        element.height || (element as HTMLImageElement).naturalHeight\n      }\"${imageRendering}${clipPath}></image>\\n`,\n    );\n\n    if (this.stroke || this.strokeDashArray) {\n      const origFill = this.fill;\n      this.fill = null;\n      strokeSvg = [\n        `\\t<rect x=\"${x}\" y=\"${y}\" width=\"${this.width}\" height=\"${\n          this.height\n        }\" style=\"${this.getSvgStyles()}\" />\\n`,\n      ];\n      this.fill = origFill;\n    }\n    if (this.paintFirst !== FILL) {\n      svgString = svgString.concat(strokeSvg, imageMarkup);\n    } else {\n      svgString = svgString.concat(imageMarkup, strokeSvg);\n    }\n    return svgString;\n  }\n\n  /**\n   * Returns source of an image\n   * @param {Boolean} filtered indicates if the src is needed for svg\n   * @return {String} Source of an image\n   */\n  getSrc(filtered?: boolean): string {\n    const element = filtered ? this._element : this._originalElement;\n    if (element) {\n      if ((element as HTMLCanvasElement).toDataURL) {\n        return (element as HTMLCanvasElement).toDataURL();\n      }\n\n      if (this.srcFromAttribute) {\n        return element.getAttribute('src') || '';\n      } else {\n        return (element as HTMLImageElement).src;\n      }\n    } else {\n      return this.src || '';\n    }\n  }\n\n  /**\n   * Alias for getSrc\n   * @param filtered\n   * @deprecated\n   */\n  getSvgSrc(filtered?: boolean) {\n    return this.getSrc(filtered);\n  }\n\n  /**\n   * Loads and sets source of an image\\\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   * @param {String} src Source string (URL)\n   * @param {LoadImageOptions} [options] Options object\n   */\n  setSrc(src: string, { crossOrigin, signal }: LoadImageOptions = {}) {\n    return loadImage(src, { crossOrigin, signal }).then((img) => {\n      typeof crossOrigin !== 'undefined' && this.set({ crossOrigin });\n      this.setElement(img);\n    });\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of an instance\n   */\n  toString() {\n    return `#<Image: { src: \"${this.getSrc()}\" }>`;\n  }\n\n  applyResizeFilters() {\n    const filter = this.resizeFilter,\n      minimumScale = this.minimumScaleTrigger,\n      objectScale = this.getTotalObjectScaling(),\n      scaleX = objectScale.x,\n      scaleY = objectScale.y,\n      elementToFilter = this._filteredEl || this._originalElement;\n    if (this.group) {\n      this.set('dirty', true);\n    }\n    if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n      this._element = elementToFilter;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      this._lastScaleX = scaleX;\n      this._lastScaleY = scaleY;\n      return;\n    }\n    const canvasEl = createCanvasElementFor(elementToFilter),\n      { width, height } = elementToFilter;\n    this._element = canvasEl;\n    this._lastScaleX = filter.scaleX = scaleX;\n    this._lastScaleY = filter.scaleY = scaleY;\n    getFilterBackend().applyFilters(\n      [filter],\n      elementToFilter,\n      width,\n      height,\n      this._element,\n    );\n    this._filterScalingX = canvasEl.width / this._originalElement.width;\n    this._filterScalingY = canvasEl.height / this._originalElement.height;\n  }\n\n  /**\n   * Applies filters assigned to this image (from \"filters\" array) or from filter param\n   * @method applyFilters\n   * @param {Array} filters to be applied\n   * @param {Boolean} forResizing specify if the filter operation is a resize operation\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[] = this.filters || [],\n  ) {\n    filters = filters.filter((filter) => filter && !filter.isNeutralState());\n    this.set('dirty', true);\n\n    // needs to clear out or WEBGL will not resize correctly\n    this.removeTexture(`${this.cacheKey}_filtered`);\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      // this is unsafe and needs to be rethinkend\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return;\n    }\n\n    const imgElement = this._originalElement,\n      sourceWidth =\n        (imgElement as HTMLImageElement).naturalWidth || imgElement.width,\n      sourceHeight =\n        (imgElement as HTMLImageElement).naturalHeight || imgElement.height;\n\n    if (this._element === this._originalElement) {\n      // if the _element a reference to _originalElement\n      // we need to create a new element to host the filtered pixels\n      const canvasEl = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else if (this._filteredEl) {\n      // if the _element is it own element,\n      // and we also have a _filteredEl, then we clean up _filteredEl\n      // and we assign it to _element.\n      // in this way we invalidate the eventual old resize filtered element\n      this._element = this._filteredEl;\n      this._filteredEl\n        .getContext('2d')!\n        .clearRect(0, 0, sourceWidth, sourceHeight);\n      // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n      this._lastScaleX = 1;\n      this._lastScaleY = 1;\n    }\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement,\n      this.cacheKey,\n    );\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n      this.applyResizeFilters();\n    }\n    this._stroke(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * it will set the imageSmoothing for the draw operation\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(\n    this: TCachedFabricObject<FabricImage>,\n    ctx: CanvasRenderingContext2D,\n  ) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    super.drawCacheOnCanvas(ctx);\n  }\n\n  /**\n   * Decide if the FabricImage should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * This is the special Image version where we would like to avoid caching where possible.\n   * Essentially images do not benefit from caching. They may require caching, and in that\n   * case we do it. Also caching an image usually ends in a loss of details.\n   * A full performance audit should be done.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    const elementToDraw = this._element;\n    if (!elementToDraw) {\n      return;\n    }\n    const scaleX = this._filterScalingX,\n      scaleY = this._filterScalingY,\n      w = this.width,\n      h = this.height,\n      // crop values cannot be lesser than 0.\n      cropX = Math.max(this.cropX, 0),\n      cropY = Math.max(this.cropY, 0),\n      elWidth =\n        (elementToDraw as HTMLImageElement).naturalWidth || elementToDraw.width,\n      elHeight =\n        (elementToDraw as HTMLImageElement).naturalHeight ||\n        elementToDraw.height,\n      sX = cropX * scaleX,\n      sY = cropY * scaleY,\n      // the width height cannot exceed element width/height, starting from the crop offset.\n      sW = Math.min(w * scaleX, elWidth - sX),\n      sH = Math.min(h * scaleY, elHeight - sY),\n      x = -w / 2,\n      y = -h / 2,\n      maxDestW = Math.min(w, elWidth / scaleX - cropX),\n      maxDestH = Math.min(h, elHeight / scaleY - cropY);\n\n    elementToDraw &&\n      ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n  }\n\n  /**\n   * needed to check if image needs resize\n   * @private\n   */\n  _needsResize() {\n    const scale = this.getTotalObjectScaling();\n    return scale.x !== this._lastScaleX || scale.y !== this._lastScaleY;\n  }\n\n  /**\n   * @private\n   * @deprecated unused\n   */\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n\n  /**\n   * @private\n   * Set the width and the height of the image object, using the element or the\n   * options.\n   */\n  _setWidthHeight({ width, height }: Partial<TSize> = {}) {\n    const size = this.getOriginalSize();\n    this.width = width || size.width;\n    this.height = height || size.height;\n  }\n\n  /**\n   * Calculate offset for center and scale factor for the image in order to respect\n   * the preserveAspectRatio attribute\n   * @private\n   */\n  parsePreserveAspectRatioAttribute() {\n    const pAR = parsePreserveAspectRatioAttribute(\n        this.preserveAspectRatio || '',\n      ),\n      pWidth = this.width,\n      pHeight = this.height,\n      parsedAttributes = { width: pWidth, height: pHeight };\n    let rWidth = this._element.width,\n      rHeight = this._element.height,\n      scaleX = 1,\n      scaleY = 1,\n      offsetLeft = 0,\n      offsetTop = 0,\n      cropX = 0,\n      cropY = 0,\n      offset;\n\n    if (pAR && (pAR.alignX !== NONE || pAR.alignY !== NONE)) {\n      if (pAR.meetOrSlice === 'meet') {\n        scaleX = scaleY = findScaleToFit(this._element, parsedAttributes);\n        offset = (pWidth - rWidth * scaleX) / 2;\n        if (pAR.alignX === 'Min') {\n          offsetLeft = -offset;\n        }\n        if (pAR.alignX === 'Max') {\n          offsetLeft = offset;\n        }\n        offset = (pHeight - rHeight * scaleY) / 2;\n        if (pAR.alignY === 'Min') {\n          offsetTop = -offset;\n        }\n        if (pAR.alignY === 'Max') {\n          offsetTop = offset;\n        }\n      }\n      if (pAR.meetOrSlice === 'slice') {\n        scaleX = scaleY = findScaleToCover(this._element, parsedAttributes);\n        offset = rWidth - pWidth / scaleX;\n        if (pAR.alignX === 'Mid') {\n          cropX = offset / 2;\n        }\n        if (pAR.alignX === 'Max') {\n          cropX = offset;\n        }\n        offset = rHeight - pHeight / scaleY;\n        if (pAR.alignY === 'Mid') {\n          cropY = offset / 2;\n        }\n        if (pAR.alignY === 'Max') {\n          cropY = offset;\n        }\n        rWidth = pWidth / scaleX;\n        rHeight = pHeight / scaleY;\n      }\n    } else {\n      scaleX = pWidth / rWidth;\n      scaleY = pHeight / rHeight;\n    }\n    return {\n      width: rWidth,\n      height: rHeight,\n      scaleX,\n      scaleY,\n      offsetLeft,\n      offsetTop,\n      cropX,\n      cropY,\n    };\n  }\n\n  /**\n   * Default CSS class name for canvas\n   * Will be removed from fabric 7\n   * @static\n   * @deprecated\n   * @type String\n   * @default\n   */\n  static CSS_CANVAS = 'canvas-img';\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricImage.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'width',\n    'height',\n    'preserveAspectRatio',\n    'xlink:href',\n    'href',\n    'crossOrigin',\n    'image-rendering',\n  ];\n\n  /**\n   * Creates an instance of FabricImage from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricImage>}\n   */\n  static fromObject<T extends TOptions<SerializedImageProps>>(\n    { filters: f, resizeFilter: rf, src, crossOrigin, type, ...object }: T,\n    options?: Abortable,\n  ) {\n    return Promise.all([\n      loadImage(src!, { ...options, crossOrigin }),\n      f && enlivenObjects<BaseFilter<string>>(f, options),\n      // TODO: redundant - handled by enlivenObjectEnlivables\n      rf && enlivenObjects<BaseFilter<'Resize'>>([rf], options),\n      enlivenObjectEnlivables(object, options),\n    ]).then(([el, filters = [], [resizeFilter] = [], hydratedProps = {}]) => {\n      return new this(el, {\n        ...object,\n        // TODO: this creates a difference between image creation and restoring from JSON\n        src,\n        filters,\n        resizeFilter,\n        ...hydratedProps,\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {LoadImageOptions} [options] Options object\n   * @returns {Promise<FabricImage>}\n   */\n  static fromURL<T extends TOptions<ImageProps>>(\n    url: string,\n    { crossOrigin = null, signal }: LoadImageOptions = {},\n    imageOptions?: T,\n  ): Promise<FabricImage> {\n    return loadImage(url, { crossOrigin, signal }).then(\n      (img) => new this(img, imageOptions),\n    );\n  }\n\n  /**\n   * Returns {@link FabricImage} instance from an SVG element\n   * @static\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @param {Function} callback Callback to execute when Image object is created\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable = {},\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return this.fromURL(\n      parsedAttributes['xlink:href'] || parsedAttributes['href'],\n      options,\n      parsedAttributes,\n    ).catch((err) => {\n      log('log', 'Unable to parse Image', err);\n      return null;\n    });\n  }\n}\n\nclassRegistry.setClass(FabricImage);\nclassRegistry.setSVGClass(FabricImage);\n","import { svgNS } from './constants';\nimport {\n  parsePreserveAspectRatioAttribute,\n  parseUnit,\n} from '../util/misc/svgParsing';\nimport { svgViewBoxElementsRegEx, reViewBoxAttrValue } from './constants';\nimport { NONE } from '../constants';\n\nexport type ParsedViewboxTransform = Partial<{\n  width: number;\n  height: number;\n  minX: number;\n  minY: number;\n  viewBoxWidth: number;\n  viewBoxHeight: number;\n}>;\n\n/**\n * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n */\nexport function applyViewboxTransform(\n  element: Element,\n): ParsedViewboxTransform {\n  if (!svgViewBoxElementsRegEx.test(element.nodeName)) {\n    return {};\n  }\n  const viewBoxAttr: string | null = element.getAttribute('viewBox');\n  let scaleX = 1;\n  let scaleY = 1;\n  let minX = 0;\n  let minY = 0;\n  let matrix;\n  let el;\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const x = element.getAttribute('x') || 0;\n  const y = element.getAttribute('y') || 0;\n  const goodViewbox = viewBoxAttr && reViewBoxAttrValue.test(viewBoxAttr);\n  const missingViewBox = !goodViewbox;\n  const missingDimAttr =\n    !widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%';\n\n  let translateMatrix = '';\n  let widthDiff = 0;\n  let heightDiff = 0;\n\n  if (missingViewBox) {\n    if (\n      (x || y) &&\n      element.parentNode &&\n      element.parentNode.nodeName !== '#document'\n    ) {\n      translateMatrix =\n        ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n      matrix = (element.getAttribute('transform') || '') + translateMatrix;\n      element.setAttribute('transform', matrix);\n      element.removeAttribute('x');\n      element.removeAttribute('y');\n    }\n  }\n\n  if (missingViewBox && missingDimAttr) {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const parsedDim: ParsedViewboxTransform = {\n    width: 0,\n    height: 0,\n  };\n\n  if (missingViewBox) {\n    parsedDim.width = parseUnit(widthAttr!);\n    parsedDim.height = parseUnit(heightAttr!);\n    // set a transform for elements that have x y and are inner(only) SVGs\n    return parsedDim;\n  }\n\n  const pasedViewBox = viewBoxAttr.match(reViewBoxAttrValue)!;\n  minX = -parseFloat(pasedViewBox[1]);\n  minY = -parseFloat(pasedViewBox[2]);\n  const viewBoxWidth = parseFloat(pasedViewBox[3]);\n  const viewBoxHeight = parseFloat(pasedViewBox[4]);\n  parsedDim.minX = minX;\n  parsedDim.minY = minY;\n  parsedDim.viewBoxWidth = viewBoxWidth;\n  parsedDim.viewBoxHeight = viewBoxHeight;\n  if (!missingDimAttr) {\n    parsedDim.width = parseUnit(widthAttr);\n    parsedDim.height = parseUnit(heightAttr);\n    scaleX = parsedDim.width / viewBoxWidth;\n    scaleY = parsedDim.height / viewBoxHeight;\n  } else {\n    parsedDim.width = viewBoxWidth;\n    parsedDim.height = viewBoxHeight;\n  }\n\n  // default is to preserve aspect ratio\n  const preserveAspectRatio = parsePreserveAspectRatioAttribute(\n    element.getAttribute('preserveAspectRatio') || '',\n  );\n  if (preserveAspectRatio.alignX !== NONE) {\n    //translate all container for the effect of Mid, Min, Max\n    if (preserveAspectRatio.meetOrSlice === 'meet') {\n      scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;\n      // calculate additional translation to move the viewbox\n    }\n    if (preserveAspectRatio.meetOrSlice === 'slice') {\n      scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;\n      // calculate additional translation to move the viewbox\n    }\n    widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n    heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n    if (preserveAspectRatio.alignX === 'Mid') {\n      widthDiff /= 2;\n    }\n    if (preserveAspectRatio.alignY === 'Mid') {\n      heightDiff /= 2;\n    }\n    if (preserveAspectRatio.alignX === 'Min') {\n      widthDiff = 0;\n    }\n    if (preserveAspectRatio.alignY === 'Min') {\n      heightDiff = 0;\n    }\n  }\n\n  if (\n    scaleX === 1 &&\n    scaleY === 1 &&\n    minX === 0 &&\n    minY === 0 &&\n    x === 0 &&\n    y === 0\n  ) {\n    return parsedDim;\n  }\n  if ((x || y) && element.parentNode!.nodeName !== '#document') {\n    translateMatrix =\n      ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n  }\n\n  matrix =\n    translateMatrix +\n    ' matrix(' +\n    scaleX +\n    ' 0' +\n    ' 0 ' +\n    scaleY +\n    ' ' +\n    (minX * scaleX + widthDiff) +\n    ' ' +\n    (minY * scaleY + heightDiff) +\n    ') ';\n  // seems unused.\n  // parsedDim.viewboxTransform = parseTransformAttribute(matrix);\n  if (element.nodeName === 'svg') {\n    el = element.ownerDocument.createElementNS(svgNS, 'g');\n    // element.firstChild != null\n    while (element.firstChild) {\n      el.appendChild(element.firstChild);\n    }\n    element.appendChild(el);\n  } else {\n    el = element;\n    el.removeAttribute('x');\n    el.removeAttribute('y');\n    matrix = el.getAttribute('transform') + matrix;\n  }\n  el.setAttribute('transform', matrix);\n  return parsedDim;\n}\n","export const getTagName = (node: Element) => node.tagName.replace('svg:', '');\n","import { svgInvalidAncestors } from './constants';\nimport { getSvgRegex } from './getSvgRegex';\nimport { getTagName } from './getTagName';\n\nconst svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n\nexport function hasInvalidAncestor(element: Element) {\n  let _element: Element | null = element;\n  while (_element && (_element = _element.parentElement)) {\n    if (\n      _element &&\n      _element.nodeName &&\n      svgInvalidAncestorsRegEx.test(getTagName(_element)) &&\n      !_element.getAttribute('instantiated_by_use')\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n","export function getMultipleNodes(\n  doc: Document,\n  nodeNames: string[],\n): Element[] {\n  let nodeName,\n    nodeArray: Element[] = [],\n    nodeList,\n    i,\n    len;\n  for (i = 0, len = nodeNames.length; i < len; i++) {\n    nodeName = nodeNames[i];\n    nodeList = doc.getElementsByTagNameNS(\n      'http://www.w3.org/2000/svg',\n      nodeName,\n    );\n    nodeArray = nodeArray.concat(Array.from(nodeList));\n  }\n  return nodeArray;\n}\n","const gradientsAttrs = [\n  'gradientTransform',\n  'x1',\n  'x2',\n  'y1',\n  'y2',\n  'gradientUnits',\n  'cx',\n  'cy',\n  'r',\n  'fx',\n  'fy',\n];\nconst xlinkAttr = 'xlink:href';\n\nexport function recursivelyParseGradientsXlink(\n  doc: Document,\n  gradient: Element,\n) {\n  const xLink = gradient.getAttribute(xlinkAttr)?.slice(1) || '',\n    referencedGradient = doc.getElementById(xLink);\n  if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n    recursivelyParseGradientsXlink(doc, referencedGradient as Element);\n  }\n  if (referencedGradient) {\n    gradientsAttrs.forEach((attr) => {\n      const value = referencedGradient.getAttribute(attr);\n      if (!gradient.hasAttribute(attr) && value) {\n        gradient.setAttribute(attr, value);\n      }\n    });\n    if (!gradient.children.length) {\n      const referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n  }\n  gradient.removeAttribute(xlinkAttr);\n}\n","import { getMultipleNodes } from './getMultipleNodes';\nimport { recursivelyParseGradientsXlink } from './recursivelyParseGradientsXlink';\n\nconst tagArray = [\n  'linearGradient',\n  'radialGradient',\n  'svg:linearGradient',\n  'svg:radialGradient',\n];\n\n/**\n * Parses an SVG document, returning all of the gradient declarations found in it\n * @param {SVGDocument} doc SVG document to parse\n * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n */\nexport function getGradientDefs(\n  doc: Document,\n): Record<string, SVGGradientElement> {\n  const elList = getMultipleNodes(doc, tagArray);\n  const gradientDefs: Record<string, SVGGradientElement> = {};\n  let j = elList.length;\n  while (j--) {\n    const el = elList[j];\n    if (el.getAttribute('xlink:href')) {\n      recursivelyParseGradientsXlink(doc, el);\n    }\n    const id = el.getAttribute('id');\n    if (id) {\n      gradientDefs[id] = el as SVGGradientElement;\n    }\n  }\n  return gradientDefs;\n}\n","import type { CSSRules } from './typedefs';\n\n/**\n * Returns CSS rules for a given SVG document\n * @param {HTMLElement} doc SVG document to parse\n * @return {Object} CSS rules of this document\n */\nexport function getCSSRules(doc: Document) {\n  const styles = doc.getElementsByTagName('style');\n  let i;\n  let len;\n  const allRules: CSSRules = {};\n\n  // very crude parsing of style contents\n  for (i = 0, len = styles.length; i < len; i++) {\n    const styleContents = (styles[i].textContent || '').replace(\n      // remove comments\n      /\\/\\*[\\s\\S]*?\\*\\//g,\n      '',\n    );\n\n    if (styleContents.trim() === '') {\n      continue;\n    }\n    // recovers all the rule in this form `body { style code... }`\n    // rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n    styleContents\n      .split('}')\n      // remove empty rules and remove everything if we didn't split in at least 2 pieces\n      .filter((rule, index, array) => array.length > 1 && rule.trim())\n      // at this point we have hopefully an array of rules `body { style code... `\n      .forEach((rule) => {\n        // if there is more than one opening bracket and the rule starts with '@', it is likely\n        // a nested at-rule like @media, @supports, @scope, etc. Ignore these as the code below\n        // can not handle it.\n        if (\n          (rule.match(/{/g) || []).length > 1 &&\n          rule.trim().startsWith('@')\n        ) {\n          return;\n        }\n\n        const match = rule.split('{'),\n          ruleObj: Record<string, string> = {},\n          declaration = match[1].trim(),\n          propertyValuePairs = declaration.split(';').filter(function (pair) {\n            return pair.trim();\n          });\n\n        for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n          const pair = propertyValuePairs[i].split(':'),\n            property = pair[0].trim(),\n            value = pair[1].trim();\n          ruleObj[property] = value;\n        }\n        rule = match[0].trim();\n        rule.split(',').forEach((_rule) => {\n          _rule = _rule.replace(/^svg/i, '').trim();\n          if (_rule === '') {\n            return;\n          }\n          allRules[_rule] = {\n            ...(allRules[_rule] || {}),\n            ...ruleObj,\n          };\n        });\n      });\n  }\n  return allRules;\n}\n","import { Gradient } from '../gradient/Gradient';\nimport { Group } from '../shapes/Group';\nimport { FabricImage } from '../shapes/Image';\nimport { classRegistry } from '../ClassRegistry';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../util/misc/matrix';\nimport { removeTransformMatrixForSvgParsing } from '../util/transform_matrix_removal';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { Point } from '../Point';\nimport { CENTER, FILL, STROKE } from '../constants';\nimport { getGradientDefs } from './getGradientDefs';\nimport { getCSSRules } from './getCSSRules';\nimport type { LoadImageOptions } from '../util';\nimport type { CSSRules, TSvgReviverCallback } from './typedefs';\nimport type { ParsedViewboxTransform } from './applyViewboxTransform';\nimport type { SVGOptions } from '../gradient';\nimport { getTagName } from './getTagName';\nimport { parseTransformAttribute } from './parseTransformAttribute';\n\nconst findTag = (el: Element) =>\n  classRegistry.getSVGClass(getTagName(el).toLowerCase());\n\ntype StorageType = {\n  fill: SVGGradientElement;\n  stroke: SVGGradientElement;\n  clipPath: Element[];\n};\n\ntype NotParsedFabricObject = FabricObject & {\n  fill: string;\n  stroke: string;\n  clipPath?: string;\n  clipRule?: CanvasFillRule;\n};\n\nexport class ElementsParser {\n  declare elements: Element[];\n  declare options: LoadImageOptions & ParsedViewboxTransform;\n  declare reviver?: TSvgReviverCallback;\n  declare regexUrl: RegExp;\n  declare doc: Document;\n  declare clipPaths: Record<string, Element[]>;\n  declare gradientDefs: Record<string, SVGGradientElement>;\n  declare cssRules: CSSRules;\n\n  constructor(\n    elements: Element[],\n    options: LoadImageOptions & ParsedViewboxTransform,\n    reviver: TSvgReviverCallback | undefined,\n    doc: Document,\n    clipPaths: Record<string, Element[]>,\n  ) {\n    this.elements = elements;\n    this.options = options;\n    this.reviver = reviver;\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n    this.doc = doc;\n    this.clipPaths = clipPaths;\n    this.gradientDefs = getGradientDefs(doc);\n    this.cssRules = getCSSRules(doc);\n  }\n\n  parse(): Promise<Array<FabricObject | null>> {\n    return Promise.all(\n      this.elements.map((element) => this.createObject(element)),\n    );\n  }\n\n  async createObject(el: Element): Promise<FabricObject | null> {\n    const klass = findTag(el);\n    if (klass) {\n      const obj: NotParsedFabricObject = await klass.fromElement(\n        el,\n        this.options,\n        this.cssRules,\n      );\n      this.resolveGradient(obj, el, FILL);\n      this.resolveGradient(obj, el, STROKE);\n      if (obj instanceof FabricImage && obj._originalElement) {\n        removeTransformMatrixForSvgParsing(\n          obj,\n          obj.parsePreserveAspectRatioAttribute(),\n        );\n      } else {\n        removeTransformMatrixForSvgParsing(obj);\n      }\n      await this.resolveClipPath(obj, el);\n      this.reviver && this.reviver(el, obj);\n      return obj;\n    }\n    return null;\n  }\n\n  extractPropertyDefinition(\n    obj: NotParsedFabricObject,\n    property: 'fill' | 'stroke' | 'clipPath',\n    storage: Record<string, StorageType[typeof property]>,\n  ): StorageType[typeof property] | undefined {\n    const value = obj[property]!,\n      regex = this.regexUrl;\n    if (!regex.test(value)) {\n      return undefined;\n    }\n    // verify: can we remove the 'g' flag? and remove lastIndex changes?\n    regex.lastIndex = 0;\n    // we passed the regex test, so we know is not null;\n    const id = regex.exec(value)![1];\n    regex.lastIndex = 0;\n    // @todo fix this\n    return storage[id];\n  }\n\n  resolveGradient(\n    obj: NotParsedFabricObject,\n    el: Element,\n    property: 'fill' | 'stroke',\n  ) {\n    const gradientDef = this.extractPropertyDefinition(\n      obj,\n      property,\n      this.gradientDefs,\n    ) as SVGGradientElement;\n    if (gradientDef) {\n      const opacityAttr = el.getAttribute(property + '-opacity');\n      const gradient = Gradient.fromElement(gradientDef, obj, {\n        ...this.options,\n        opacity: opacityAttr,\n      } as SVGOptions);\n      obj.set(property, gradient);\n    }\n  }\n\n  // TODO: resolveClipPath could be run once per clippath with minor work per object.\n  // is a refactor that i m not sure is worth on this code\n  async resolveClipPath(\n    obj: NotParsedFabricObject,\n    usingElement: Element,\n    exactOwner?: Element,\n  ) {\n    const clipPathElements = this.extractPropertyDefinition(\n      obj,\n      'clipPath',\n      this.clipPaths,\n    ) as Element[];\n    if (clipPathElements) {\n      const objTransformInv = invertTransform(obj.calcTransformMatrix());\n      const clipPathTag = clipPathElements[0].parentElement!;\n      let clipPathOwner = usingElement;\n      while (\n        !exactOwner &&\n        clipPathOwner.parentElement &&\n        clipPathOwner.getAttribute('clip-path') !== obj.clipPath\n      ) {\n        clipPathOwner = clipPathOwner.parentElement;\n      }\n      // move the clipPath tag as sibling to the real element that is using it\n      clipPathOwner.parentElement!.appendChild(clipPathTag!);\n\n      // this multiplication order could be opposite.\n      // but i don't have an svg to test it\n      // at the first SVG that has a transform on both places and is misplaced\n      // try to invert this multiplication order\n      const finalTransform = parseTransformAttribute(\n        `${clipPathOwner.getAttribute('transform') || ''} ${\n          clipPathTag.getAttribute('originalTransform') || ''\n        }`,\n      );\n\n      clipPathTag.setAttribute(\n        'transform',\n        `matrix(${finalTransform.join(',')})`,\n      );\n\n      const container = await Promise.all(\n        clipPathElements.map((clipPathElement) => {\n          return findTag(clipPathElement)\n            .fromElement(clipPathElement, this.options, this.cssRules)\n            .then((enlivedClippath: NotParsedFabricObject) => {\n              removeTransformMatrixForSvgParsing(enlivedClippath);\n              enlivedClippath.fillRule = enlivedClippath.clipRule!;\n              delete enlivedClippath.clipRule;\n              return enlivedClippath;\n            });\n        }),\n      );\n      const clipPath =\n        container.length === 1 ? container[0] : new Group(container);\n      const gTransform = multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix(),\n      );\n      if (clipPath.clipPath) {\n        await this.resolveClipPath(\n          clipPath,\n          clipPathOwner,\n          // this is tricky.\n          // it tries to differentiate from when clipPaths are inherited by outside groups\n          // or when are really clipPaths referencing other clipPaths\n          clipPathTag.getAttribute('clip-path') ? clipPathOwner : undefined,\n        );\n      }\n      const { scaleX, scaleY, angle, skewX, translateX, translateY } =\n        qrDecompose(gTransform);\n      clipPath.set({\n        flipX: false,\n        flipY: false,\n      });\n      clipPath.set({\n        scaleX,\n        scaleY,\n        angle,\n        skewX,\n        skewY: 0,\n      });\n      clipPath.setPositionByOrigin(\n        new Point(translateX, translateY),\n        CENTER,\n        CENTER,\n      );\n      obj.clipPath = clipPath;\n    } else {\n      // if clip-path does not resolve to any element, delete the property.\n      delete obj.clipPath;\n      return;\n    }\n  }\n}\n","import { applyViewboxTransform } from './applyViewboxTransform';\nimport { svgValidTagNamesRegEx } from './constants';\nimport { hasInvalidAncestor } from './hasInvalidAncestor';\nimport { parseUseDirectives } from './parseUseDirectives';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { ElementsParser } from './elements_parser';\nimport { log, SignalAbortedError } from '../util/internals/console';\nimport { getTagName } from './getTagName';\n\nconst isValidSvgTag = (el: Element) =>\n  svgValidTagNamesRegEx.test(getTagName(el));\n\nexport const createEmptyResponse = (): SVGParsingOutput => ({\n  objects: [],\n  elements: [],\n  options: {},\n  allElements: [],\n});\n\n/**\n * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n * @static\n * @function\n * @memberOf fabric\n * @param {HTMLElement} doc SVG document to parse\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @return {SVGParsingOutput}\n * {@link SVGParsingOutput} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n */\nexport async function parseSVGDocument(\n  doc: Document,\n  reviver?: TSvgReviverCallback,\n  { crossOrigin, signal }: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  if (signal && signal.aborted) {\n    log('log', new SignalAbortedError('parseSVGDocument'));\n    // this is an unhappy path, we dont care about speed\n    return createEmptyResponse();\n  }\n  const documentElement = doc.documentElement;\n  parseUseDirectives(doc);\n\n  const descendants = Array.from(documentElement.getElementsByTagName('*')),\n    options = {\n      ...applyViewboxTransform(documentElement),\n      crossOrigin,\n      signal,\n    };\n  const elements = descendants.filter((el) => {\n    applyViewboxTransform(el);\n    return isValidSvgTag(el) && !hasInvalidAncestor(el); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n  });\n  if (!elements || (elements && !elements.length)) {\n    return {\n      ...createEmptyResponse(),\n      options,\n      allElements: descendants,\n    };\n  }\n  const localClipPaths: Record<string, Element[]> = {};\n  descendants\n    .filter((el) => getTagName(el) === 'clipPath')\n    .forEach((el) => {\n      el.setAttribute('originalTransform', el.getAttribute('transform') || '');\n      const id = el.getAttribute('id')!;\n      localClipPaths[id] = Array.from(el.getElementsByTagName('*')).filter(\n        (el) => isValidSvgTag(el),\n      );\n    });\n\n  // Precedence of rules:   style > class > attribute\n  const elementParser = new ElementsParser(\n    elements,\n    options,\n    reviver,\n    doc,\n    localClipPaths,\n  );\n\n  const instances = await elementParser.parse();\n\n  return {\n    objects: instances,\n    elements,\n    options,\n    allElements: descendants,\n  };\n}\n","import { svgNS } from './constants';\nimport { getMultipleNodes } from './getMultipleNodes';\nimport { applyViewboxTransform } from './applyViewboxTransform';\nimport { parseStyleString } from './parseStyleString';\n\nexport function parseUseDirectives(doc: Document) {\n  const nodelist = getMultipleNodes(doc, ['use', 'svg:use']);\n  const skipAttributes = ['x', 'y', 'xlink:href', 'href', 'transform'];\n\n  for (const useElement of nodelist) {\n    const useAttributes: NamedNodeMap = useElement.attributes;\n\n    const useAttrMap: Record<string, string> = {};\n    for (const attr of useAttributes) {\n      attr.value && (useAttrMap[attr.name] = attr.value);\n    }\n\n    const xlink = (useAttrMap['xlink:href'] || useAttrMap.href || '').slice(1);\n\n    if (xlink === '') {\n      return;\n    }\n    const referencedElement = doc.getElementById(xlink);\n    if (referencedElement === null) {\n      // if we can't find the target of the xlink, consider this use tag bad, similar to no xlink\n      return;\n    }\n    let clonedOriginal = referencedElement.cloneNode(true) as Element;\n\n    const originalAttributes: NamedNodeMap = clonedOriginal.attributes;\n\n    const originalAttrMap: Record<string, string> = {};\n    for (const attr of originalAttributes) {\n      attr.value && (originalAttrMap[attr.name] = attr.value);\n    }\n\n    // Transform attribute needs to be merged in a particular way\n    const { x = 0, y = 0, transform = '' } = useAttrMap;\n    const currentTrans = `${transform} ${\n      originalAttrMap.transform || ''\n    } translate(${x}, ${y})`;\n\n    applyViewboxTransform(clonedOriginal);\n\n    if (/^svg$/i.test(clonedOriginal.nodeName)) {\n      // if is an SVG, create a group and apply all the attributes on top of it\n      const el3 = clonedOriginal.ownerDocument.createElementNS(svgNS, 'g');\n      Object.entries(originalAttrMap).forEach(([name, value]) =>\n        el3.setAttributeNS(svgNS, name, value),\n      );\n      el3.append(...clonedOriginal.childNodes);\n      clonedOriginal = el3;\n    }\n\n    for (const attr of useAttributes) {\n      if (!attr) {\n        continue;\n      }\n      const { name, value } = attr;\n      if (skipAttributes.includes(name)) {\n        continue;\n      }\n\n      if (name === 'style') {\n        // when use has a style, merge the two styles, with the ref being priority (not use)\n        // priority is by feature. an attribute for fill on the original element\n        // will overwrite the fill in style or attribute for tha use\n        const styleRecord: Record<string, any> = {};\n        parseStyleString(value!, styleRecord);\n        // cleanup styleRecord from attributes of original\n        Object.entries(originalAttrMap).forEach(([name, value]) => {\n          styleRecord[name] = value;\n        });\n        // now we can put in the style of the original that will overwrite the original attributes\n        parseStyleString(originalAttrMap.style || '', styleRecord);\n        const mergedStyles = Object.entries(styleRecord)\n          .map((entry) => entry.join(':'))\n          .join(';');\n        clonedOriginal.setAttribute(name, mergedStyles);\n      } else {\n        // set the attribute from use element only if the original does not have it already\n        !originalAttrMap[name] && clonedOriginal.setAttribute(name, value!);\n      }\n    }\n\n    clonedOriginal.setAttribute('transform', currentTrans);\n    clonedOriginal.setAttribute('instantiated_by_use', '1');\n    clonedOriginal.removeAttribute('id');\n    useElement.parentNode!.replaceChild(clonedOriginal, useElement);\n  }\n}\n","import { getFabricWindow } from '../env';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { parseSVGDocument } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\n\n/**\n * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n * @memberOf fabric\n * @param {String} string representing the svg\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromString(\n  string: string,\n  reviver?: TSvgReviverCallback,\n  options?: LoadImageOptions,\n): Promise<SVGParsingOutput> {\n  const parser = new (getFabricWindow().DOMParser)(),\n    // should we use `image/svg+xml` here?\n    doc = parser.parseFromString(string.trim(), 'text/xml');\n  return parseSVGDocument(doc, reviver, options);\n}\n","import { request } from '../util/internals/dom_request';\nimport { parseSVGDocument, createEmptyResponse } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\n\n/**\n * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n * @memberOf fabric\n * @param {string} url where the SVG is\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromURL(\n  url: string,\n  reviver?: TSvgReviverCallback,\n  options: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  // need to handle error properly\n  return new Promise<Document>((resolve, reject) => {\n    const onComplete = (r: XMLHttpRequest) => {\n      const xml = r.responseXML;\n      if (xml) {\n        resolve(xml);\n      }\n      reject();\n    };\n\n    request(url.replace(/^\\n\\s*/, '').trim(), {\n      onComplete,\n      signal: options.signal,\n    });\n  })\n    .then((parsedDoc) => parseSVGDocument(parsedDoc, reviver, options))\n    .catch(() => {\n      // this is an unhappy path, we dont care about speed\n      return createEmptyResponse();\n    });\n}\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Polyline } from '../shapes/Polyline';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { MODIFY_POLY } from '../constants';\n\nconst ACTION_NAME: TModificationEvents = MODIFY_POLY;\n\ntype TTransformAnchor = Transform & { pointIndex: number };\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nexport const createPolyPositionHandler = (pointIndex: number) => {\n  return function (dim: Point, finalMatrix: TMat2D, polyObject: Polyline) {\n    const { points, pathOffset } = polyObject;\n    return new Point(points[pointIndex])\n      .subtract(pathOffset)\n      .transform(\n        multiplyTransformMatrices(\n          polyObject.getViewportTransform(),\n          polyObject.calcTransformMatrix(),\n        ),\n      );\n  };\n};\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nexport const polyActionHandler = (\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) => {\n  const { target, pointIndex } = transform;\n  const poly = target as Polyline;\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    poly.calcOwnMatrix(),\n  );\n\n  poly.points[pointIndex] = mouseLocalPosition.add(poly.pathOffset);\n  poly.setDimensions();\n  poly.set('dirty', true);\n  return true;\n};\n\n/**\n * Keep the polygon in the same position when we change its `width`/`height`/`top`/`left`.\n */\nexport const factoryPolyActionHandler = (\n  pointIndex: number,\n  fn: TransformActionHandler<TTransformAnchor>,\n) => {\n  return function (\n    eventData: TPointerEvent,\n    transform: Transform,\n    x: number,\n    y: number,\n  ) {\n    const poly = transform.target as Polyline,\n      anchorPoint = new Point(\n        poly.points[(pointIndex > 0 ? pointIndex : poly.points.length) - 1],\n      ),\n      anchorPointInParentPlane = anchorPoint\n        .subtract(poly.pathOffset)\n        .transform(poly.calcOwnMatrix()),\n      actionPerformed = fn(eventData, { ...transform, pointIndex }, x, y);\n\n    const newAnchorPointInParentPlane = anchorPoint\n      .subtract(poly.pathOffset)\n      .transform(poly.calcOwnMatrix());\n\n    const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n    poly.left -= diff.x;\n    poly.top -= diff.y;\n\n    return actionPerformed;\n  };\n};\n\nexport const createPolyActionHandler = (pointIndex: number) =>\n  wrapWithFireEvent(\n    ACTION_NAME,\n    factoryPolyActionHandler(pointIndex, polyActionHandler),\n  );\n\nexport function createPolyControls(\n  poly: Polyline,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  numOfControls: number,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  arg0: number | Polyline,\n  options: Partial<Control> = {},\n) {\n  const controls = {} as Record<string, Control>;\n  for (\n    let idx = 0;\n    idx < (typeof arg0 === 'number' ? arg0 : arg0.points.length);\n    idx++\n  ) {\n    controls[`p${idx}`] = new Control({\n      actionName: ACTION_NAME,\n      positionHandler: createPolyPositionHandler(idx),\n      actionHandler: createPolyActionHandler(idx),\n      ...options,\n    });\n  }\n  return controls;\n}\n","import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Path } from '../shapes/Path';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport type { TSimpleParseCommandType } from '../util/path/typedefs';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\nconst ACTION_NAME: TModificationEvents = 'modifyPath' as const;\n\ntype TTransformAnchor = Transform;\n\nexport type PathPointControlStyle = {\n  controlFill?: string;\n  controlStroke?: string;\n  connectionDashArray?: number[];\n};\n\nconst calcPathPointPosition = (\n  pathObject: Path,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n  const command = path[commandIndex];\n  return new Point(\n    (command[pointIndex] as number) - pathOffset.x,\n    (command[pointIndex + 1] as number) - pathOffset.y,\n  ).transform(\n    multiplyTransformMatrices(\n      pathObject.getViewportTransform(),\n      pathObject.calcTransformMatrix(),\n    ),\n  );\n};\n\nconst movePathPoint = (\n  pathObject: Path,\n  x: number,\n  y: number,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n\n  const anchorCommand =\n    path[(commandIndex > 0 ? commandIndex : path.length) - 1];\n  const anchorPoint = new Point(\n    anchorCommand[pointIndex] as number,\n    anchorCommand[pointIndex + 1] as number,\n  );\n\n  const anchorPointInParentPlane = anchorPoint\n    .subtract(pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    pathObject.calcOwnMatrix(),\n  );\n\n  path[commandIndex][pointIndex] = mouseLocalPosition.x + pathOffset.x;\n  path[commandIndex][pointIndex + 1] = mouseLocalPosition.y + pathOffset.y;\n  pathObject.setDimensions();\n\n  const newAnchorPointInParentPlane = anchorPoint\n    .subtract(pathObject.pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n  pathObject.left -= diff.x;\n  pathObject.top -= diff.y;\n  pathObject.set('dirty', true);\n  return true;\n};\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nfunction pathPositionHandler(\n  this: PathPointControl,\n  dim: Point,\n  finalMatrix: TMat2D,\n  pathObject: Path,\n) {\n  const { commandIndex, pointIndex } = this;\n  return calcPathPointPosition(pathObject, commandIndex, pointIndex);\n}\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nfunction pathActionHandler(\n  this: PathPointControl,\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) {\n  const { target } = transform;\n  const { commandIndex, pointIndex } = this;\n  const actionPerformed = movePathPoint(\n    target as Path,\n    x,\n    y,\n    commandIndex,\n    pointIndex,\n  );\n  if (actionPerformed) {\n    fireEvent(this.actionName as TModificationEvents, {\n      ...commonEventInfo(eventData, transform, x, y),\n      commandIndex,\n      pointIndex,\n    });\n  }\n  return actionPerformed;\n}\n\nconst indexFromPrevCommand = (previousCommandType: TSimpleParseCommandType) =>\n  previousCommandType === 'C' ? 5 : previousCommandType === 'Q' ? 3 : 1;\n\nclass PathPointControl extends Control {\n  declare commandIndex: number;\n  declare pointIndex: number;\n  declare controlFill: string;\n  declare controlStroke: string;\n  constructor(options?: Partial<PathPointControl>) {\n    super(options);\n  }\n\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const overrides: ControlRenderingStyleOverride = {\n      ...styleOverride,\n      cornerColor: this.controlFill,\n      cornerStrokeColor: this.controlStroke,\n      transparentCorners: !this.controlFill,\n    };\n    super.render(ctx, left, top, overrides, fabricObject);\n  }\n}\n\nclass PathControlPointControl extends PathPointControl {\n  declare connectionDashArray?: number[];\n  declare connectToCommandIndex: number;\n  declare connectToPointIndex: number;\n  constructor(options?: Partial<PathControlPointControl>) {\n    super(options);\n  }\n\n  render(\n    this: PathControlPointControl,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const { path } = fabricObject;\n    const {\n      commandIndex,\n      pointIndex,\n      connectToCommandIndex,\n      connectToPointIndex,\n    } = this;\n    ctx.save();\n    ctx.strokeStyle = this.controlStroke;\n    if (this.connectionDashArray) {\n      ctx.setLineDash(this.connectionDashArray);\n    }\n    const [commandType] = path[commandIndex];\n    const point = calcPathPointPosition(\n      fabricObject,\n      connectToCommandIndex,\n      connectToPointIndex,\n    );\n\n    if (commandType === 'Q') {\n      // one control point connects to 2 points\n      const point2 = calcPathPointPosition(\n        fabricObject,\n        commandIndex,\n        pointIndex + 2,\n      );\n      ctx.moveTo(point2.x, point2.y);\n      ctx.lineTo(left, top);\n    } else {\n      ctx.moveTo(left, top);\n    }\n    ctx.lineTo(point.x, point.y);\n    ctx.stroke();\n    ctx.restore();\n\n    super.render(ctx, left, top, styleOverride, fabricObject);\n  }\n}\n\nconst createControl = (\n  commandIndexPos: number,\n  pointIndexPos: number,\n  isControlPoint: boolean,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  },\n  connectToCommandIndex?: number,\n  connectToPointIndex?: number,\n) =>\n  new (isControlPoint ? PathControlPointControl : PathPointControl)({\n    commandIndex: commandIndexPos,\n    pointIndex: pointIndexPos,\n    actionName: ACTION_NAME,\n    positionHandler: pathPositionHandler,\n    actionHandler: pathActionHandler,\n    connectToCommandIndex,\n    connectToPointIndex,\n    ...options,\n    ...(isControlPoint ? options.controlPointStyle : options.pointStyle),\n  } as Partial<PathControlPointControl>);\n\nexport function createPathControls(\n  path: Path,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  } = {},\n): Record<string, Control> {\n  const controls = {} as Record<string, Control>;\n  let previousCommandType: TSimpleParseCommandType = 'M';\n  path.path.forEach((command, commandIndex) => {\n    const commandType = command[0];\n\n    if (commandType !== 'Z') {\n      controls[`c_${commandIndex}_${commandType}`] = createControl(\n        commandIndex,\n        command.length - 2,\n        false,\n        options,\n      );\n    }\n    switch (commandType) {\n      case 'C':\n        controls[`c_${commandIndex}_C_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex - 1,\n          indexFromPrevCommand(previousCommandType),\n        );\n        controls[`c_${commandIndex}_C_CP_2`] = createControl(\n          commandIndex,\n          3,\n          true,\n          options,\n          commandIndex,\n          5,\n        );\n        break;\n      case 'Q':\n        controls[`c_${commandIndex}_Q_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex,\n          3,\n        );\n        break;\n    }\n    previousCommandType = commandType;\n  });\n  return controls;\n}\n","import { getFabricWindow } from '../env';\nimport { createCanvasElement, createCanvasElementFor } from '../util/misc/dom';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\n\nexport const isWebGLPipelineState = (\n  options: TWebGLPipelineState | T2DPipelineState,\n): options is TWebGLPipelineState => {\n  return (options as TWebGLPipelineState).webgl !== undefined;\n};\n\n/**\n * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n * drawImage should be faster, but is also bugged for a small combination of old hardware\n * and drivers.\n * putImageData is faster than drawImage for that specific operation.\n */\nexport const isPutImageFaster = (width: number, height: number): boolean => {\n  const targetCanvas = createCanvasElementFor({ width, height });\n  const sourceCanvas = createCanvasElement();\n  const gl = sourceCanvas.getContext('webgl')!;\n  // eslint-disable-next-line no-undef\n  const imageBuffer = new ArrayBuffer(width * height * 4);\n\n  const testContext = {\n    imageBuffer: imageBuffer,\n  } as unknown as Required<WebGLFilterBackend>;\n  const testPipelineState = {\n    destinationWidth: width,\n    destinationHeight: height,\n    targetCanvas: targetCanvas,\n  } as unknown as TWebGLPipelineState;\n  let startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2D.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const drawImageTime = getFabricWindow().performance.now() - startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2DPutImageData.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const putImageDataTime = getFabricWindow().performance.now() - startTime;\n\n  return drawImageTime > putImageDataTime;\n};\n","export const highPsourceCode = `precision highp float`;\n\nexport const identityFragmentShader = `\n    ${highPsourceCode};\n    varying vec2 vTexCoord;\n    uniform sampler2D uTexture;\n    void main() {\n      gl_FragColor = texture2D(uTexture, vTexCoord);\n    }`;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    void main() {\n      vTexCoord = aPosition;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }`;\n","import { getEnv } from '../env';\nimport type {\n  T2DPipelineState,\n  TWebGLAttributeLocationMap,\n  TWebGLPipelineState,\n  TWebGLProgramCacheItem,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport {\n  highPsourceCode,\n  identityFragmentShader,\n  vertexSource,\n} from './shaders/baseFilter';\nimport type { Abortable } from '../typedefs';\nimport { FabricError } from '../util/internals/console';\nimport { createCanvasElementFor } from '../util/misc/dom';\n\nconst regex = new RegExp(highPsourceCode, 'g');\n\nexport class BaseFilter<\n  Name extends string,\n  OwnProps extends Record<string, any> = object,\n  SerializedProps extends Record<string, any> = OwnProps,\n> {\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  get type(): Name {\n    return (this.constructor as typeof BaseFilter).type as Name;\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'BaseFilter';\n\n  /**\n   * Contains the uniform locations for the fragment shader.\n   * uStepW and uStepH are handled by the BaseFilter, each filter class\n   * needs to specify all the one that are needed\n   */\n  static uniformLocations: string[] = [];\n\n  declare static defaults: Record<string, unknown>;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor({\n    type,\n    ...options\n  }: { type?: never } & Partial<OwnProps> & Record<string, any> = {}) {\n    Object.assign(\n      this,\n      (this.constructor as typeof BaseFilter).defaults,\n      options,\n    );\n  }\n\n  protected getFragmentSource(): string {\n    return identityFragmentShader;\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram(\n    gl: WebGLRenderingContext,\n    fragmentSource: string = this.getFragmentSource(),\n    vertexSource: string = this.getVertexSource(),\n  ) {\n    const {\n      WebGLProbe: { GLPrecision = 'highp' },\n    } = getEnv();\n    if (GLPrecision !== 'highp') {\n      fragmentSource = fragmentSource.replace(\n        regex,\n        highPsourceCode.replace('highp', GLPrecision),\n      );\n    }\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    const program = gl.createProgram();\n\n    if (!vertexShader || !fragmentShader || !program) {\n      throw new FabricError(\n        'Vertex, fragment shader or program creation error',\n      );\n    }\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Vertex shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          vertexShader,\n        )}`,\n      );\n    }\n\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Fragment shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          fragmentShader,\n        )}`,\n      );\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new FabricError(\n        `Shader link error for \"${this.type}\" ${gl.getProgramInfoLog(program)}`,\n      );\n    }\n\n    const uniformLocations = this.getUniformLocations(gl, program) || {};\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n\n    return {\n      program,\n      attributeLocations: this.getAttributeLocations(gl, program),\n      uniformLocations,\n    };\n  }\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLAttributeLocationMap {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  }\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLUniformLocationMap {\n    const locations = (this.constructor as unknown as typeof BaseFilter<string>)\n      .uniformLocations;\n\n    const uniformLocations: Record<string, WebGLUniformLocation | null> = {};\n    for (let i = 0; i < locations.length; i++) {\n      uniformLocations[locations[i]] = gl.getUniformLocation(\n        program,\n        locations[i],\n      );\n    }\n    return uniformLocations;\n  }\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData(\n    gl: WebGLRenderingContext,\n    attributeLocations: Record<string, number>,\n    aPositionData: Float32Array,\n  ) {\n    const attributeLocation = attributeLocations.aPosition;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  }\n\n  _setupFrameBuffer(options: TWebGLPipelineState) {\n    const gl = options.context;\n    if (options.passes > 1) {\n      const width = options.destinationWidth;\n      const height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(\n          gl,\n          width,\n          height,\n        );\n      }\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        options.targetTexture,\n        0,\n      );\n    } else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  }\n\n  _swapTextures(options: TWebGLPipelineState) {\n    options.passes--;\n    options.pass++;\n    const temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  }\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isNeutralState(options?: any): boolean {\n    return false;\n  }\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(_options: T2DPipelineState): void {\n    // override by subclass\n  }\n\n  /**\n   * Returns a string that represent the current selected shader code for the filter.\n   * Used to force recompilation when parameters change or to retrieve the shader from cache\n   * @type string\n   **/\n  getCacheKey(): string {\n    return this.type;\n  }\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   * @return {WebGLProgram} the compiled program shader\n   */\n  retrieveShader(options: TWebGLPipelineState): TWebGLProgramCacheItem {\n    const key = this.getCacheKey();\n    if (!options.programCache[key]) {\n      options.programCache[key] = this.createProgram(options.context);\n    }\n    return options.programCache[key];\n  }\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context;\n    const shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    } else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  bindAdditionalTexture(\n    gl: WebGLRenderingContext,\n    texture: WebGLTexture,\n    textureUnit: number,\n  ) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  unbindAdditionalTexture(gl: WebGLRenderingContext, textureUnit: number) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} _gl The canvas context used to compile the shader program.\n   * @param {Object} _uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData(\n    _gl: WebGLRenderingContext,\n    _uniformLocations: TWebGLUniformLocationMap,\n  ): void {\n    // override by subclass\n  }\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer(options: T2DPipelineState) {\n    if (!options.helpLayer) {\n      const { sourceWidth, sourceHeight } = options;\n      const helpLayer = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      options.helpLayer = helpLayer;\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * It will automatically export the default values of a filter,\n   * stored in the static defaults property.\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): { type: Name } & SerializedProps {\n    const defaultKeys = Object.keys(\n      (this.constructor as typeof BaseFilter).defaults || {},\n    ) as (keyof SerializedProps)[];\n\n    return {\n      type: this.type,\n      ...defaultKeys.reduce<SerializedProps>((acc, key) => {\n        acc[key] = this[\n          key as keyof this\n        ] as unknown as (typeof acc)[typeof key];\n        return acc;\n      }, {} as SerializedProps),\n    };\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  static async fromObject(\n    { type, ...filterOptions }: Record<string, any>,\n    _options: Abortable,\n  ): Promise<BaseFilter<string, object>> {\n    return new this(filterOptions);\n  }\n}\n","export const blendColorFragmentSource = {\n  multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n  screen:\n    'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n  add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n  difference: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n  subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n  lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n  darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n  exclusion:\n    'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n  overlay: `\n    if (uColor.r < 0.5) {\n      gl_FragColor.r *= 2.0 * uColor.r;\n    } else {\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n    }\n    if (uColor.g < 0.5) {\n      gl_FragColor.g *= 2.0 * uColor.g;\n    } else {\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n    }\n    if (uColor.b < 0.5) {\n      gl_FragColor.b *= 2.0 * uColor.b;\n    } else {\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n    }\n    `,\n  tint: `\n    gl_FragColor.rgb *= (1.0 - uColor.a);\n    gl_FragColor.rgb += uColor.rgb;\n    `,\n} as const;\n","import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const alpha = this.alpha;\n    const tr = source[0] * alpha;\n    const tg = source[1] * alpha;\n    const tb = source[2] * alpha;\n    const alpha1 = 1 - alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      let oR, oG, oB;\n      switch (this.mode) {\n        case 'multiply':\n          oR = (r * tr) / 255;\n          oG = (g * tg) / 255;\n          oB = (b * tb) / 255;\n          break;\n        case 'screen':\n          oR = 255 - ((255 - r) * (255 - tr)) / 255;\n          oG = 255 - ((255 - g) * (255 - tg)) / 255;\n          oB = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          oR = r + tr;\n          oG = g + tg;\n          oB = b + tb;\n          break;\n        case 'difference':\n          oR = Math.abs(r - tr);\n          oG = Math.abs(g - tg);\n          oB = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          oR = r - tr;\n          oG = g - tg;\n          oB = b - tb;\n          break;\n        case 'darken':\n          oR = Math.min(r, tr);\n          oG = Math.min(g, tg);\n          oB = Math.min(b, tb);\n          break;\n        case 'lighten':\n          oR = Math.max(r, tr);\n          oG = Math.max(g, tg);\n          oB = Math.max(b, tb);\n          break;\n        case 'overlay':\n          oR =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          oG =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          oB =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          oR = tr + r - (2 * tr * r) / 255;\n          oG = tg + g - (2 * tg * g) / 255;\n          oB = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          oR = tr + r * alpha1;\n          oG = tg + g * alpha1;\n          oB = tb + b * alpha1;\n      }\n      data[i] = oR;\n      data[i + 1] = oG;\n      data[i + 2] = oB;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n","import type { TBlendImageMode } from '../BlendImage';\n\nexport const fragmentSource: Record<TBlendImageMode, string> = {\n  multiply: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.rgba *= color2.rgba;\n      gl_FragColor = color;\n    }\n    `,\n  mask: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.a = color2.a;\n      gl_FragColor = color;\n    }\n    `,\n} as const;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    uniform mat3 uTransformMatrix;\n    void main() {\n      vTexCoord = aPosition;\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ` as const;\n","import { FabricImage } from '../shapes/Image';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport type { WebGLFilterBackend } from './WebGLFilterBackend';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource, vertexSource } from './shaders/blendImage';\n\nexport type TBlendImageMode = 'multiply' | 'mask';\n\ntype BlendImageOwnProps = {\n  mode: TBlendImageMode;\n  alpha: number;\n};\n\nexport const blendImageDefaultValues: BlendImageOwnProps = {\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Image Blend filter class\n * @example\n * const filter = new filters.BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendImage extends BaseFilter<'BlendImage', BlendImageOwnProps> {\n  /**\n   * Image to make the blend operation with.\n   **/\n  declare image: FabricImage;\n\n  /**\n   * Blend mode for the filter: either 'multiply' or 'mask'. 'multiply' will\n   * multiply the values of each channel (R, G, B, and A) of the filter image by\n   * their corresponding values in the base image. 'mask' will only look at the\n   * alpha channel of the filter image, and apply those values to the base\n   * image's alpha channel.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendImageOwnProps['mode'];\n\n  /**\n   * alpha value. represent the strength of the blend image operation.\n   * not implemented.\n   **/\n  declare alpha: BlendImageOwnProps['alpha'];\n\n  static type = 'BlendImage';\n\n  static defaults = blendImageDefaultValues;\n\n  static uniformLocations = ['uTransformMatrix', 'uImage'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource(): string {\n    return fragmentSource[this.mode];\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context,\n      texture = this.createTexture(options.filterBackend, this.image);\n    this.bindAdditionalTexture(gl, texture!, gl.TEXTURE1);\n    super.applyToWebGL(options);\n    this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n  }\n\n  createTexture(backend: WebGLFilterBackend, image: FabricImage) {\n    return backend.getCachedTexture(image.cacheKey, image.getElement());\n  }\n\n  /**\n   * Calculate a transformMatrix to adapt the image to blend over\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  calculateMatrix() {\n    const image = this.image,\n      { width, height } = image.getElement();\n    return [\n      1 / image.scaleX,\n      0,\n      0,\n      0,\n      1 / image.scaleY,\n      0,\n      -image.left / width,\n      -image.top / height,\n      1,\n    ];\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({\n    imageData: { data, width, height },\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const image = this.image;\n    if (!resources.blendImage) {\n      resources.blendImage = createCanvasElement();\n    }\n    const canvas1 = resources.blendImage;\n    const context = canvas1.getContext('2d')!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas1.width = width;\n      canvas1.height = height;\n    } else {\n      context.clearRect(0, 0, width, height);\n    }\n    context.setTransform(\n      image.scaleX,\n      0,\n      0,\n      image.scaleY,\n      image.left,\n      image.top,\n    );\n    context.drawImage(image.getElement(), 0, 0, width, height);\n    const blendData = context.getImageData(0, 0, width, height).data;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      const tr = blendData[i];\n      const tg = blendData[i + 1];\n      const tb = blendData[i + 2];\n      const ta = blendData[i + 3];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          data[i + 3] = (a * ta) / 255;\n          break;\n        case 'mask':\n          data[i + 3] = ta;\n          break;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const matrix = this.calculateMatrix();\n    gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n    gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * TODO: Handle the possibility of missing image better.\n   * As of now a BlendImage filter without image can't be used with fromObject\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): {\n    type: 'BlendImage';\n    image: ReturnType<FabricImage['toObject']>;\n  } & BlendImageOwnProps {\n    return {\n      ...super.toObject(),\n      image: this.image && this.image.toObject(),\n    };\n  }\n\n  /**\n   * Create filter instance from an object representation\n   * @static\n   * @param {object} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting image loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<BlendImage>}\n   */\n  static async fromObject(\n    { type, image, ...filterOptions }: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<BaseFilter<'BlendImage', BlendImageOwnProps>> {\n    return FabricImage.fromObject(image, options).then(\n      (enlivedImage) =>\n        new this({ ...filterOptions, image: enlivedImage }) as BlendImage,\n    );\n  }\n}\n\nclassRegistry.setClass(BlendImage);\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  TWebGLPipelineState,\n  T2DPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/blur';\n\ntype BlurOwnProps = {\n  blur: number;\n};\n\nexport const blurDefaultValues: BlurOwnProps = {\n  blur: 0,\n};\n\n/**\n * Blur filter class\n * @example\n * const filter = new Blur({\n *   blur: 0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Blur extends BaseFilter<'Blur', BlurOwnProps> {\n  /**\n   * blur value, in percentage of image dimensions.\n   * specific to keep the image blur constant at different resolutions\n   * range between 0 and 1.\n   * @type Number\n   * @default\n   */\n  declare blur: BlurOwnProps['blur'];\n\n  declare horizontal: boolean;\n  declare aspectRatio: number;\n\n  static type = 'Blur';\n\n  static defaults = blurDefaultValues;\n\n  static uniformLocations = ['uDelta'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      // this aspectRatio is used to give the same blur to vertical and horizontal\n      this.aspectRatio = options.sourceWidth / options.sourceHeight;\n      options.passes++;\n      this._setupFrameBuffer(options);\n      this.horizontal = true;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n      this._setupFrameBuffer(options);\n      this.horizontal = false;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    // this code mimic the shader for output consistency\n    // it samples 31 pixels across the image over a distance that depends from the blur value.\n    this.aspectRatio = width / height;\n    this.horizontal = true;\n    let blurValue = this.getBlurValue() * width;\n    const imageData = new Uint8ClampedArray(data);\n    const samples = 15;\n    const bytesInRow = 4 * width;\n    for (let i = 0; i < data.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i - (i % bytesInRow);\n      const maxIRow = minIRow + bytesInRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = 4;\n      // } else if (offset < 1) {\n      //   pixelOffset = -4;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * 4;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = data[sampledPixel + 3] * weight;\n        r += data[sampledPixel] * localAlpha;\n        g += data[sampledPixel + 1] * localAlpha;\n        b += data[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      imageData[i] = r / a;\n      imageData[i + 1] = g / a;\n      imageData[i + 2] = b / a;\n      imageData[i + 3] = a / totalA;\n    }\n    this.horizontal = false;\n    blurValue = this.getBlurValue() * height;\n    for (let i = 0; i < imageData.length; i += 4) {\n      let r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0,\n        totalA = 0;\n      const minIRow = i % bytesInRow;\n      const maxIRow = imageData.length - bytesInRow + minIRow;\n      // for now let's keep noise out of the way\n      // let pixelOffset = 0;\n      // const offset = Math.random() * 3;\n      // if (offset > 2) {\n      //   pixelOffset = bytesInRow;\n      // } else if (offset < 1) {\n      //   pixelOffset = -bytesInRow;\n      // }\n      for (let j = -samples + 1; j < samples; j++) {\n        const percent = j / samples;\n        const distance = Math.floor(blurValue * percent) * bytesInRow;\n        const weight = 1 - Math.abs(percent);\n        let sampledPixel = i + distance; // + pixelOffset;\n        // try to implement edge mirroring\n        if (sampledPixel < minIRow) {\n          sampledPixel = minIRow;\n        } else if (sampledPixel > maxIRow) {\n          sampledPixel = maxIRow;\n        }\n        const localAlpha = imageData[sampledPixel + 3] * weight;\n        r += imageData[sampledPixel] * localAlpha;\n        g += imageData[sampledPixel + 1] * localAlpha;\n        b += imageData[sampledPixel + 2] * localAlpha;\n        a += localAlpha;\n        totalA += weight;\n      }\n      data[i] = r / a;\n      data[i + 1] = g / a;\n      data[i + 2] = b / a;\n      data[i + 3] = a / totalA;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const delta = this.chooseRightDelta();\n    gl.uniform2fv(uniformLocations.uDelta, delta);\n  }\n\n  isNeutralState() {\n    return this.blur === 0;\n  }\n\n  getBlurValue(): number {\n    let blurScale = 1;\n    const { horizontal, aspectRatio } = this;\n    if (horizontal) {\n      if (aspectRatio > 1) {\n        // image is wide, i want to shrink radius horizontal\n        blurScale = 1 / aspectRatio;\n      }\n    } else {\n      if (aspectRatio < 1) {\n        // image is tall, i want to shrink radius vertical\n        blurScale = aspectRatio;\n      }\n    }\n    return blurScale * this.blur * 0.12;\n  }\n\n  /**\n   * choose right value of image percentage to blur with\n   * @returns {Array} a numeric array with delta values\n   */\n  chooseRightDelta() {\n    const blur = this.getBlurValue();\n    return this.horizontal ? [blur, 0] : [0, blur];\n  }\n}\n\nclassRegistry.setClass(Blur);\n","export const fragmentSource = `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n    const float nSamples = 15.0;\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n    float random(vec3 scale) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n    }\n    void main() {\n      vec4 color = vec4(0.0);\n      float totalC = 0.0;\n      float totalA = 0.0;\n      float offset = random(v3offset);\n      for (float t = -nSamples; t <= nSamples; t++) {\n        float percent = (t + offset - 0.5) / nSamples;\n        vec4 sample = texture2D(uTexture, vTexCoord + uDelta * percent);\n        float weight = 1.0 - abs(percent);\n        float alpha = weight * sample.a;\n        color.rgb += sample.rgb * alpha;\n        color.a += alpha;\n        totalA += weight;\n        totalC += alpha;\n      }\n      gl_FragColor.rgb = color.rgb / totalC;\n      gl_FragColor.a = color.a / totalA;\n    }\n  ` as const;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\n\ntype BrightnessOwnProps = {\n  brightness: number;\n};\n\nexport const brightnessDefaultValues: BrightnessOwnProps = {\n  brightness: 0,\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter<'Brightness', BrightnessOwnProps> {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: BrightnessOwnProps['brightness'];\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  static uniformLocations = ['uBrightness'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] += brightness;\n      data[i + 1] += brightness;\n      data[i + 2] += brightness;\n    }\n  }\n\n  isNeutralState() {\n    return this.brightness === 0;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBrightness;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += uBrightness;\n    gl_FragColor = color;\n  }\n`;\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  varying vec2 vTexCoord;\n  uniform mat4 uColorMatrix;\n  uniform vec4 uConstants;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color *= uColorMatrix;\n    color += uConstants;\n    gl_FragColor = color;\n  }`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TMatColorMatrix,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/colorMatrix';\n\nexport type ColorMatrixOwnProps = {\n  matrix: TMatColorMatrix;\n  colorsOnly: boolean;\n};\n\nexport const colorMatrixDefaultValues: ColorMatrixOwnProps = {\n  matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n  colorsOnly: true,\n};\n\n/**\n   * Color Matrix filter class\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl demo}\n   * @example <caption>Kodachrome filter</caption>\n   * const filter = new ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\nexport class ColorMatrix<\n  Name extends string = 'ColorMatrix',\n  OwnProps extends object = ColorMatrixOwnProps,\n  SerializedProps extends object = ColorMatrixOwnProps,\n> extends BaseFilter<Name, OwnProps, SerializedProps> {\n  /**\n   * Colormatrix for pixels.\n   * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n   * outside the -1, 1 range.\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Array} matrix array of 20 numbers.\n   * @default\n   */\n  declare matrix: ColorMatrixOwnProps['matrix'];\n\n  /**\n   * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n   * to save some calculation\n   * @type Boolean\n   * @default true\n   */\n  declare colorsOnly: ColorMatrixOwnProps['colorsOnly'];\n\n  static type = 'ColorMatrix';\n\n  static defaults = colorMatrixDefaultValues;\n\n  static uniformLocations = ['uColorMatrix', 'uConstants'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      m = this.matrix,\n      colorsOnly = this.colorsOnly;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n      data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n      data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n      if (!colorsOnly) {\n        const a = data[i + 3];\n        data[i] += a * m[3];\n        data[i + 1] += a * m[8];\n        data[i + 2] += a * m[13];\n        data[i + 3] =\n          r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const m = this.matrix,\n      matrix = [\n        m[0],\n        m[1],\n        m[2],\n        m[3],\n        m[5],\n        m[6],\n        m[7],\n        m[8],\n        m[10],\n        m[11],\n        m[12],\n        m[13],\n        m[15],\n        m[16],\n        m[17],\n        m[18],\n      ],\n      constants = [m[4], m[9], m[14], m[19]];\n    gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n    gl.uniform4fv(uniformLocations.uConstants, constants);\n  }\n\n  toObject(): { type: Name } & SerializedProps {\n    return {\n      ...super.toObject(),\n      matrix: [...this.matrix] as TMatColorMatrix,\n    };\n  }\n}\n\nclassRegistry.setClass(ColorMatrix);\n","import { ColorMatrix } from './ColorMatrix';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TMatColorMatrix } from './typedefs';\n\ntype FixedFiltersOwnProps = {\n  colorsOnly: boolean;\n};\n\nexport function createColorMatrixFilter(key: string, matrix: TMatColorMatrix) {\n  const newClass = class extends ColorMatrix<\n    typeof key,\n    FixedFiltersOwnProps,\n    FixedFiltersOwnProps\n  > {\n    static type = key;\n\n    static defaults = {\n      colorsOnly: false,\n      matrix,\n    };\n\n    toObject(): { type: string } & FixedFiltersOwnProps {\n      return { type: this.type, colorsOnly: this.colorsOnly };\n    }\n  };\n  classRegistry.setClass(newClass, key);\n  return newClass as typeof ColorMatrix<typeof key, FixedFiltersOwnProps>;\n}\n\nexport const Brownie = createColorMatrixFilter(\n  'Brownie',\n  [\n    0.5997, 0.34553, -0.27082, 0, 0.186, -0.0377, 0.86095, 0.15059, 0, -0.1449,\n    0.24113, -0.07441, 0.44972, 0, -0.02965, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Vintage = createColorMatrixFilter(\n  'Vintage',\n  [\n    0.62793, 0.32021, -0.03965, 0, 0.03784, 0.02578, 0.64411, 0.03259, 0,\n    0.02926, 0.0466, -0.08512, 0.52416, 0, 0.02023, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Kodachrome = createColorMatrixFilter(\n  'Kodachrome',\n  [\n    1.12855, -0.39673, -0.03992, 0, 0.24991, -0.16404, 1.08352, -0.05498, 0,\n    0.09698, -0.16786, -0.56034, 1.60148, 0, 0.13972, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Technicolor = createColorMatrixFilter(\n  'Technicolor',\n  [\n    1.91252, -0.85453, -0.09155, 0, 0.04624, -0.30878, 1.76589, -0.10601, 0,\n    -0.27589, -0.2311, -0.75018, 1.84759, 0, 0.12137, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Polaroid = createColorMatrixFilter(\n  'Polaroid',\n  [\n    1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016,\n    1.483, 0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Sepia = createColorMatrixFilter(\n  'Sepia',\n  [\n    0.393, 0.769, 0.189, 0, 0, 0.349, 0.686, 0.168, 0, 0, 0.272, 0.534, 0.131,\n    0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const BlackWhite = createColorMatrixFilter(\n  'BlackWhite',\n  [\n    1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0,\n    1, 0,\n  ],\n);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLPipelineState } from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\n\ntype ComposedOwnProps = {\n  subFilters: BaseFilter<string, object, object>[];\n};\n\ntype ComposedSerializedProps = {\n  subFilters: Record<string, unknown>[];\n};\n\n/**\n * A container class that knows how to apply a sequence of filters to an input image.\n */\nexport class Composed extends BaseFilter<\n  'Composed',\n  ComposedOwnProps,\n  ComposedSerializedProps\n> {\n  /**\n   * A non sparse array of filters to apply\n   */\n  declare subFilters: ComposedOwnProps['subFilters'];\n\n  static type = 'Composed';\n\n  constructor(\n    options: { subFilters?: BaseFilter<string, object>[] } & Record<\n      string,\n      any\n    > = {},\n  ) {\n    super(options);\n    this.subFilters = options.subFilters || [];\n  }\n\n  /**\n   * Apply this container's filters to the input image provided.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be applied.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      options.passes += this.subFilters.length - 1;\n    }\n    this.subFilters.forEach((filter) => {\n      filter.applyTo(options);\n    });\n  }\n\n  /**\n   * Serialize this filter into JSON.\n   * @returns {Object} A JSON representation of this filter.\n   */\n  toObject() {\n    return {\n      type: this.type,\n      subFilters: this.subFilters.map((filter) => filter.toObject()),\n    };\n  }\n\n  isNeutralState() {\n    return !this.subFilters.some((filter) => !filter.isNeutralState());\n  }\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   * @static\n   * @param {oject} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting `BlendImage` filter loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<Composed>}\n   */\n  static fromObject(\n    object: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<Composed> {\n    return Promise.all(\n      ((object.subFilters || []) as BaseFilter<string, object>[]).map(\n        (filter) =>\n          classRegistry\n            .getClass<typeof BaseFilter>(filter.type)\n            .fromObject(filter, options),\n      ),\n    ).then(\n      (enlivedFilters) => new this({ subFilters: enlivedFilters }) as Composed,\n    );\n  }\n}\n\nclassRegistry.setClass(Composed);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/constrast';\n\ntype ContrastOwnProps = {\n  contrast: number;\n};\n\nexport const contrastDefaultValues: ContrastOwnProps = {\n  contrast: 0,\n};\n\n/**\n * Contrast filter class\n * @example\n * const filter = new Contrast({\n *   contrast: 0.25\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Contrast extends BaseFilter<'Contrast', ContrastOwnProps> {\n  /**\n   * contrast value, range from -1 to 1.\n   * @param {Number} contrast\n   * @default 0\n   */\n  declare contrast: ContrastOwnProps['contrast'];\n\n  static type = 'Contrast';\n\n  static defaults = contrastDefaultValues;\n\n  static uniformLocations = ['uContrast'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  isNeutralState() {\n    return this.contrast === 0;\n  }\n\n  /**\n   * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const contrast = Math.floor(this.contrast * 255),\n      contrastF = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = contrastF * (data[i] - 128) + 128;\n      data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n      data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uContrast, this.contrast);\n  }\n}\n\nclassRegistry.setClass(Contrast);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uContrast;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n    gl_FragColor = color;\n  }`;\n","export const fragmentSource = {\n  Convolute_3_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_3_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_5_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_5_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_7_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_7_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_9_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_9_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/convolute';\n\nexport type ConvoluteOwnProps = {\n  opaque: boolean;\n  matrix: number[];\n};\n\nexport const convoluteDefaultValues: ConvoluteOwnProps = {\n  opaque: false,\n  matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n};\n\n/**\n * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n * @example <caption>Sharpen filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 0, -1,  0,\n *            -1,  5, -1,\n *             0, -1,  0 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Blur filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter with opaqueness</caption>\n * const filter = new Convolute({\n *   opaque: true,\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Convolute extends BaseFilter<'Convolute', ConvoluteOwnProps> {\n  /*\n   * Opaque value (true/false)\n   */\n  declare opaque: ConvoluteOwnProps['opaque'];\n\n  /*\n   * matrix for the filter, max 9x9\n   */\n  declare matrix: ConvoluteOwnProps['matrix'];\n\n  static type = 'Convolute';\n\n  static defaults = convoluteDefaultValues;\n\n  static uniformLocations = ['uMatrix', 'uOpaque', 'uHalfSize', 'uSize'];\n\n  getCacheKey() {\n    return `${this.type}_${Math.sqrt(this.matrix.length)}_${\n      this.opaque ? 1 : 0\n    }` as keyof typeof fragmentSource;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.getCacheKey()];\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      weights = this.matrix,\n      side = Math.round(Math.sqrt(weights.length)),\n      halfSide = Math.floor(side / 2),\n      sw = imageData.width,\n      sh = imageData.height,\n      output = options.ctx.createImageData(sw, sh),\n      dst = output.data,\n      // go through the destination image pixels\n      alphaFac = this.opaque ? 1 : 0;\n    let r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n\n    for (y = 0; y < sh; y++) {\n      for (x = 0; x < sw; x++) {\n        dstOff = (y * sw + x) * 4;\n        // calculate the weighed sum of the source image pixels that\n        // fall under the convolution matrix\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n\n        for (cy = 0; cy < side; cy++) {\n          for (cx = 0; cx < side; cx++) {\n            scy = y + cy - halfSide;\n            scx = x + cx - halfSide;\n\n            // eslint-disable-next-line max-depth\n            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n              continue;\n            }\n\n            srcOff = (scy * sw + scx) * 4;\n            wt = weights[cy * side + cx];\n\n            r += data[srcOff] * wt;\n            g += data[srcOff + 1] * wt;\n            b += data[srcOff + 2] * wt;\n            // eslint-disable-next-line max-depth\n            if (!alphaFac) {\n              a += data[srcOff + 3] * wt;\n            }\n          }\n        }\n        dst[dstOff] = r;\n        dst[dstOff + 1] = g;\n        dst[dstOff + 2] = b;\n        if (!alphaFac) {\n          dst[dstOff + 3] = a;\n        } else {\n          dst[dstOff + 3] = data[dstOff + 3];\n        }\n      }\n    }\n    options.imageData = output;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      ...super.toObject(),\n      opaque: this.opaque,\n      matrix: [...this.matrix],\n    };\n  }\n}\n\nclassRegistry.setClass(Convolute);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform vec3 uGamma;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    vec3 correction = (1.0 / uGamma);\n    color.r = pow(color.r, correction.r);\n    color.g = pow(color.g, correction.g);\n    color.b = pow(color.b, correction.b);\n    gl_FragColor = color;\n    gl_FragColor.rgb *= color.a;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/gamma';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nconst GAMMA = 'Gamma' as const;\n\nexport type GammaInput = [number, number, number];\n\nexport type GammaOwnProps = {\n  gamma: GammaInput;\n};\n\nexport const gammaDefaultValues: GammaOwnProps = {\n  gamma: [1, 1, 1],\n};\n\n/**\n * Gamma filter class\n * @example\n * const filter = new Gamma({\n *   gamma: [1, 0.5, 2.1]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Gamma extends BaseFilter<typeof GAMMA, GammaOwnProps> {\n  /**\n   * Gamma array value, from 0.01 to 2.2.\n   * @param {Array} gamma\n   * @default\n   */\n  declare gamma: GammaOwnProps['gamma'];\n  declare rgbValues?: {\n    r: Uint8Array;\n    g: Uint8Array;\n    b: Uint8Array;\n  };\n\n  static type = GAMMA;\n\n  static defaults = gammaDefaultValues;\n\n  static uniformLocations = ['uGamma'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  constructor(options: { gamma?: GammaInput } = {}) {\n    super(options);\n    this.gamma =\n      options.gamma ||\n      ((\n        this.constructor as typeof Gamma\n      ).defaults.gamma.concat() as GammaInput);\n  }\n\n  /**\n   * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const gamma = this.gamma,\n      rInv = 1 / gamma[0],\n      gInv = 1 / gamma[1],\n      bInv = 1 / gamma[2];\n\n    if (!this.rgbValues) {\n      this.rgbValues = {\n        r: new Uint8Array(256),\n        g: new Uint8Array(256),\n        b: new Uint8Array(256),\n      };\n    }\n\n    // This is an optimization - pre-compute a look-up table for each color channel\n    // instead of performing these pow calls for each pixel in the image.\n    const rgb = this.rgbValues;\n    for (let i = 0; i < 256; i++) {\n      rgb.r[i] = Math.pow(i / 255, rInv) * 255;\n      rgb.g[i] = Math.pow(i / 255, gInv) * 255;\n      rgb.b[i] = Math.pow(i / 255, bInv) * 255;\n    }\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = rgb.r[data[i]];\n      data[i + 1] = rgb.g[data[i + 1]];\n      data[i + 2] = rgb.b[data[i + 2]];\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n  }\n\n  isNeutralState() {\n    const { gamma } = this;\n    return gamma[0] === 1 && gamma[1] === 1 && gamma[2] === 1;\n  }\n\n  toObject(): { type: typeof GAMMA; gamma: GammaInput } {\n    return {\n      type: GAMMA,\n      gamma: this.gamma.concat() as GammaInput,\n    };\n  }\n}\n\nclassRegistry.setClass(Gamma);\n","import type { TGrayscaleMode } from '../Grayscale';\n\nexport const fragmentSource: Record<TGrayscaleMode, string> = {\n  average: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      float average = (color.r + color.b + color.g) / 3.0;\n      gl_FragColor = vec4(average, average, average, color.a);\n    }\n    `,\n  lightness: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n  luminosity: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n};\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/grayscale';\n\nexport type TGrayscaleMode = 'average' | 'lightness' | 'luminosity';\n\ntype GrayscaleOwnProps = {\n  mode: TGrayscaleMode;\n};\n\nexport const grayscaleDefaultValues: GrayscaleOwnProps = {\n  mode: 'average',\n};\n\n/**\n * Grayscale image filter class\n * @example\n * const filter = new Grayscale();\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Grayscale extends BaseFilter<'Grayscale', GrayscaleOwnProps> {\n  declare mode: TGrayscaleMode;\n\n  static type = 'Grayscale';\n\n  static defaults = grayscaleDefaultValues;\n\n  static uniformLocations = ['uMode'];\n\n  /**\n   * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0, value: number; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      switch (this.mode) {\n        case 'average':\n          value = (r + g + b) / 3;\n          break;\n        case 'lightness':\n          value = (Math.min(r, g, b) + Math.max(r, g, b)) / 2;\n          break;\n        case 'luminosity':\n          value = 0.21 * r + 0.72 * g + 0.07 * b;\n          break;\n      }\n\n      data[i + 2] = data[i + 1] = data[i] = value;\n    }\n  }\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.mode];\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const mode = 1;\n    gl.uniform1i(uniformLocations.uMode, mode);\n  }\n\n  /**\n   * Grayscale filter isNeutralState implementation\n   * The filter is never neutral\n   * on the image\n   **/\n  isNeutralState() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Grayscale);\n","import { cos } from '../util/misc/cos';\nimport { sin } from '../util/misc/sin';\nimport {\n  ColorMatrix,\n  type ColorMatrixOwnProps,\n  colorMatrixDefaultValues,\n} from './ColorMatrix';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\n\nexport type HueRotationOwnProps = ColorMatrixOwnProps & {\n  rotation: number;\n};\n\nexport type HueRotationSerializedProps = {\n  rotation: number;\n};\n\nexport const hueRotationDefaultValues: HueRotationOwnProps = {\n  ...colorMatrixDefaultValues,\n  rotation: 0,\n};\n\n/**\n * HueRotation filter class\n * @example\n * const filter = new HueRotation({\n *   rotation: -0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class HueRotation extends ColorMatrix<\n  'HueRotation',\n  HueRotationOwnProps,\n  HueRotationSerializedProps\n> {\n  /**\n   * HueRotation value, from -1 to 1.\n   */\n  declare rotation: HueRotationOwnProps['rotation'];\n\n  static type = 'HueRotation';\n\n  static defaults = hueRotationDefaultValues;\n\n  calculateMatrix() {\n    const rad = this.rotation * Math.PI,\n      cosine = cos(rad),\n      sine = sin(rad),\n      aThird = 1 / 3,\n      aThirdSqtSin = Math.sqrt(aThird) * sine,\n      OneMinusCos = 1 - cosine;\n    this.matrix = [\n      cosine + OneMinusCos / 3,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      aThird * OneMinusCos - aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n    ];\n  }\n\n  isNeutralState() {\n    return this.rotation === 0;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    this.calculateMatrix();\n    super.applyTo(options);\n  }\n\n  toObject() {\n    return {\n      type: this.type,\n      rotation: this.rotation,\n    };\n  }\n}\n\nclassRegistry.setClass(HueRotation);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/invert';\n\nexport type InvertOwnProps = {\n  alpha: boolean;\n  invert: boolean;\n};\n\nexport const invertDefaultValues: InvertOwnProps = {\n  alpha: false,\n  invert: true,\n};\n\n/**\n * @example\n * const filter = new Invert();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Invert extends BaseFilter<'Invert', InvertOwnProps> {\n  /**\n   * Invert also alpha.\n   * @param {Boolean} alpha\n   * @default\n   **/\n  declare alpha: InvertOwnProps['alpha'];\n\n  /**\n   * Filter invert. if false, does nothing\n   * @param {Boolean} invert\n   * @default\n   */\n  declare invert: InvertOwnProps['invert'];\n\n  static type = 'Invert';\n\n  static defaults = invertDefaultValues;\n\n  static uniformLocations = ['uInvert', 'uAlpha'];\n\n  /**\n   * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];\n      data[i + 1] = 255 - data[i + 1];\n      data[i + 2] = 255 - data[i + 2];\n\n      if (this.alpha) {\n        data[i + 3] = 255 - data[i + 3];\n      }\n    }\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Invert filter isNeutralState implementation\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * @param {Object} options\n   **/\n  isNeutralState() {\n    return !this.invert;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1i(uniformLocations.uInvert, Number(this.invert));\n    gl.uniform1i(uniformLocations.uAlpha, Number(this.alpha));\n  }\n}\n\nclassRegistry.setClass(Invert);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform int uInvert;\n  uniform int uAlpha;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    if (uInvert == 1) {\n      if (uAlpha == 1) {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\n      } else {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n      }\n    } else {\n      gl_FragColor = color;\n    }\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/noise';\n\nexport type NoiseOwnProps = {\n  noise: number;\n};\n\nexport const noiseDefaultValues: NoiseOwnProps = {\n  noise: 0,\n};\n\n/**\n * Noise filter class\n * @example\n * const filter = new Noise({\n *   noise: 700\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Noise extends BaseFilter<'Noise', NoiseOwnProps> {\n  /**\n   * Noise value, from\n   * @param {Number} noise\n   * @default\n   */\n  declare noise: NoiseOwnProps['noise'];\n\n  static type = 'Noise';\n\n  static defaults = noiseDefaultValues;\n\n  static uniformLocations = ['uNoise', 'uSeed'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const noise = this.noise;\n    for (let i = 0; i < data.length; i += 4) {\n      const rand = (0.5 - Math.random()) * noise;\n      data[i] += rand;\n      data[i + 1] += rand;\n      data[i + 2] += rand;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n    gl.uniform1f(uniformLocations.uSeed, Math.random());\n  }\n\n  isNeutralState() {\n    return this.noise === 0;\n  }\n}\n\nclassRegistry.setClass(Noise);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uStepH;\n  uniform float uNoise;\n  uniform float uSeed;\n  varying vec2 vTexCoord;\n  float rand(vec2 co, float seed, float vScale) {\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n  }\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/pixelate';\n\nexport type PixelateOwnProps = {\n  blocksize: number;\n};\n\nexport const pixelateDefaultValues: PixelateOwnProps = {\n  blocksize: 4,\n};\n\n/**\n * Pixelate filter class\n * @example\n * const filter = new Pixelate({\n *   blocksize: 8\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Pixelate extends BaseFilter<'Pixelate', PixelateOwnProps> {\n  declare blocksize: PixelateOwnProps['blocksize'];\n\n  static type = 'Pixelate';\n\n  static defaults = pixelateDefaultValues;\n\n  static uniformLocations = ['uBlocksize'];\n\n  /**\n   * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    for (let i = 0; i < height; i += this.blocksize) {\n      for (let j = 0; j < width; j += this.blocksize) {\n        const index = i * 4 * width + j * 4;\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const a = data[index + 3];\n\n        for (let _i = i; _i < Math.min(i + this.blocksize, height); _i++) {\n          for (let _j = j; _j < Math.min(j + this.blocksize, width); _j++) {\n            const index = _i * 4 * width + _j * 4;\n            data[index] = r;\n            data[index + 1] = g;\n            data[index + 2] = b;\n            data[index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicate when the filter is not gonna apply changes to the image\n   **/\n  isNeutralState() {\n    return this.blocksize === 1;\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n  }\n}\n\nclassRegistry.setClass(Pixelate);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBlocksize;\n  uniform float uStepW;\n  uniform float uStepH;\n  varying vec2 vTexCoord;\n  void main() {\n    float blockW = uBlocksize * uStepW;\n    float blockH = uBlocksize * uStepH;\n    int posX = int(vTexCoord.x / blockW);\n    int posY = int(vTexCoord.y / blockH);\n    float fposX = float(posX);\n    float fposY = float(posY);\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n    vec4 color = texture2D(uTexture, squareCoords);\n    gl_FragColor = color;\n  }\n`;\n","import { classRegistry } from '../ClassRegistry';\nimport { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport { fragmentShader } from './shaders/removeColor';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nexport type RemoveColorOwnProps = {\n  color: string;\n  distance: number;\n  useAlpha: boolean;\n};\n\nexport const removeColorDefaultValues: RemoveColorOwnProps = {\n  color: '#FFFFFF',\n  distance: 0.02,\n  useAlpha: false,\n};\n\n/**\n * Remove white filter class\n * @example\n * const filter = new RemoveColor({\n *   threshold: 0.2,\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class RemoveColor extends BaseFilter<\n  'RemoveColor',\n  RemoveColorOwnProps\n> {\n  /**\n   * Color to remove, in any format understood by {@link Color}.\n   * @param {String} type\n   * @default\n   */\n  declare color: RemoveColorOwnProps['color'];\n\n  /**\n   * distance to actual color, as value up or down from each r,g,b\n   * between 0 and 1\n   **/\n  declare distance: RemoveColorOwnProps['distance'];\n\n  /**\n   * For color to remove inside distance, use alpha channel for a smoother deletion\n   * NOT IMPLEMENTED YET\n   **/\n  declare useAlpha: RemoveColorOwnProps['useAlpha'];\n\n  static type = 'RemoveColor';\n\n  static defaults = removeColorDefaultValues;\n\n  static uniformLocations = ['uLow', 'uHigh'];\n\n  getFragmentSource() {\n    return fragmentShader;\n  }\n\n  /**\n   * Applies filter to canvas element\n   * @param {Object} canvasEl Canvas element to apply filter to\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const distance = this.distance * 255,\n      source = new Color(this.color).getSource(),\n      lowC = [source[0] - distance, source[1] - distance, source[2] - distance],\n      highC = [\n        source[0] + distance,\n        source[1] + distance,\n        source[2] + distance,\n      ];\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      if (\n        r > lowC[0] &&\n        g > lowC[1] &&\n        b > lowC[2] &&\n        r < highC[0] &&\n        g < highC[1] &&\n        b < highC[2]\n      ) {\n        data[i + 3] = 0;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource(),\n      distance = this.distance,\n      lowC = [\n        0 + source[0] / 255 - distance,\n        0 + source[1] / 255 - distance,\n        0 + source[2] / 255 - distance,\n        1,\n      ],\n      highC = [\n        source[0] / 255 + distance,\n        source[1] / 255 + distance,\n        source[2] / 255 + distance,\n        1,\n      ];\n    gl.uniform4fv(uniformLocations.uLow, lowC);\n    gl.uniform4fv(uniformLocations.uHigh, highC);\n  }\n}\n\nclassRegistry.setClass(RemoveColor);\n","export const fragmentShader = `\nprecision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vTexCoord);\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n    gl_FragColor.a = 0.0;\n  }\n}\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { XY } from '../Point';\n\nexport type TResizeType = 'bilinear' | 'hermite' | 'sliceHack' | 'lanczos';\n\nexport type ResizeOwnProps = {\n  resizeType: TResizeType;\n  scaleX: number;\n  scaleY: number;\n  lanczosLobes: number;\n};\n\nexport const resizeDefaultValues: ResizeOwnProps = {\n  resizeType: 'hermite',\n  scaleX: 1,\n  scaleY: 1,\n  lanczosLobes: 3,\n};\n\ntype ResizeDuring2DResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n};\n\ntype ResizeDuringWEBGLResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n  horizontal: boolean;\n  width: number;\n  height: number;\n  taps: number[];\n  tempScale: number;\n  dH: number;\n  dW: number;\n};\n\n/**\n * Resize image filter class\n * @example\n * const filter = new Resize();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Resize extends BaseFilter<'Resize', ResizeOwnProps> {\n  /**\n   * Resize type\n   * for webgl resizeType is just lanczos, for canvas2d can be:\n   * bilinear, hermite, sliceHack, lanczos.\n   * @default\n   */\n  declare resizeType: ResizeOwnProps['resizeType'];\n\n  /**\n   * Scale factor for resizing, x axis\n   * @param {Number} scaleX\n   * @default\n   */\n  declare scaleX: ResizeOwnProps['scaleX'];\n\n  /**\n   * Scale factor for resizing, y axis\n   * @param {Number} scaleY\n   * @default\n   */\n  declare scaleY: ResizeOwnProps['scaleY'];\n\n  /**\n   * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n   * @param {Number} lanczosLobes\n   * @default\n   */\n  declare lanczosLobes: ResizeOwnProps['lanczosLobes'];\n\n  static type = 'Resize';\n\n  static defaults = resizeDefaultValues;\n\n  static uniformLocations = ['uDelta', 'uTaps'];\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    this: ResizeDuringWEBGLResize,\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform2fv(\n      uniformLocations.uDelta,\n      this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height],\n    );\n    gl.uniform1fv(uniformLocations.uTaps, this.taps);\n  }\n\n  getFilterWindow(this: ResizeDuringWEBGLResize) {\n    const scale = this.tempScale;\n    return Math.ceil(this.lanczosLobes / scale);\n  }\n\n  getCacheKey(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return `${this.type}_${filterWindow}`;\n  }\n\n  getFragmentSource(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return this.generateShader(filterWindow);\n  }\n\n  getTaps(this: ResizeDuringWEBGLResize) {\n    const lobeFunction = this.lanczosCreate(this.lanczosLobes),\n      scale = this.tempScale,\n      filterWindow = this.getFilterWindow(),\n      taps = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      taps[i - 1] = lobeFunction(i * scale);\n    }\n    return taps;\n  }\n\n  /**\n   * Generate vertex and shader sources from the necessary steps numbers\n   * @param {Number} filterWindow\n   */\n  generateShader(filterWindow: number) {\n    const offsets = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      offsets[i - 1] = `${i}.0 * uDelta`;\n    }\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec2 uDelta;\n      varying vec2 vTexCoord;\n      uniform float uTaps[${filterWindow}];\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        float sum = 1.0;\n        ${offsets\n          .map(\n            (offset, i) => `\n              color += texture2D(uTexture, vTexCoord + ${offset}) * uTaps[${i}] + texture2D(uTexture, vTexCoord - ${offset}) * uTaps[${i}];\n              sum += 2.0 * uTaps[${i}];\n            `,\n          )\n          .join('\\n')}\n        gl_FragColor = color / sum;\n      }\n    `;\n  }\n\n  applyToForWebgl(this: ResizeDuringWEBGLResize, options: TWebGLPipelineState) {\n    options.passes++;\n    this.width = options.sourceWidth;\n    this.horizontal = true;\n    this.dW = Math.round(this.width * this.scaleX);\n    this.dH = options.sourceHeight;\n    this.tempScale = this.dW / this.width;\n    this.taps = this.getTaps();\n    options.destinationWidth = this.dW;\n    super.applyTo(options);\n    options.sourceWidth = options.destinationWidth;\n\n    this.height = options.sourceHeight;\n    this.horizontal = false;\n    this.dH = Math.round(this.height * this.scaleY);\n    this.tempScale = this.dH / this.height;\n    this.taps = this.getTaps();\n    options.destinationHeight = this.dH;\n    super.applyTo(options);\n    options.sourceHeight = options.destinationHeight;\n  }\n\n  /**\n   * Apply the resize filter to the image\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      (this as unknown as ResizeDuringWEBGLResize).applyToForWebgl(options);\n    } else {\n      (this as unknown as ResizeDuring2DResize).applyTo2d(options);\n    }\n  }\n\n  isNeutralState() {\n    return this.scaleX === 1 && this.scaleY === 1;\n  }\n\n  lanczosCreate(lobes: number) {\n    return (x: number) => {\n      if (x >= lobes || x <= -lobes) {\n        return 0.0;\n      }\n      if (x < 1.1920929e-7 && x > -1.1920929e-7) {\n        return 1.0;\n      }\n      x *= Math.PI;\n      const xx = x / lobes;\n      return ((Math.sin(x) / x) * Math.sin(xx)) / xx;\n    };\n  }\n\n  applyTo2d(this: ResizeDuring2DResize, options: T2DPipelineState) {\n    const imageData = options.imageData,\n      scaleX = this.scaleX,\n      scaleY = this.scaleY;\n\n    this.rcpScaleX = 1 / scaleX;\n    this.rcpScaleY = 1 / scaleY;\n\n    const oW = imageData.width;\n    const oH = imageData.height;\n    const dW = Math.round(oW * scaleX);\n    const dH = Math.round(oH * scaleY);\n    let newData: ImageData;\n\n    if (this.resizeType === 'sliceHack') {\n      newData = this.sliceByTwo(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'hermite') {\n      newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'bilinear') {\n      newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'lanczos') {\n      newData = this.lanczosResize(options, oW, oH, dW, dH);\n    } else {\n      // this should never trigger, is here just for safety net.\n      newData = new ImageData(dW, dH);\n    }\n    options.imageData = newData;\n  }\n\n  /**\n   * Filter sliceByTwo\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  sliceByTwo(\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const imageData = options.imageData;\n    const mult = 0.5;\n    let doneW = false;\n    let doneH = false;\n    let stepW = oW * mult;\n    let stepH = oH * mult;\n    const resources = options.filterBackend.resources;\n    let sX = 0;\n    let sY = 0;\n    const dX = oW;\n    let dY = 0;\n    if (!resources.sliceByTwo) {\n      resources.sliceByTwo = createCanvasElement();\n    }\n    const tmpCanvas = resources.sliceByTwo;\n    if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n      tmpCanvas.width = oW * 1.5;\n      tmpCanvas.height = oH;\n    }\n    const ctx = tmpCanvas.getContext('2d')!;\n    ctx.clearRect(0, 0, oW * 1.5, oH);\n    ctx.putImageData(imageData, 0, 0);\n\n    dW = Math.floor(dW);\n    dH = Math.floor(dH);\n\n    while (!doneW || !doneH) {\n      oW = stepW;\n      oH = stepH;\n      if (dW < Math.floor(stepW * mult)) {\n        stepW = Math.floor(stepW * mult);\n      } else {\n        stepW = dW;\n        doneW = true;\n      }\n      if (dH < Math.floor(stepH * mult)) {\n        stepH = Math.floor(stepH * mult);\n      } else {\n        stepH = dH;\n        doneH = true;\n      }\n      ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n      sX = dX;\n      sY = dY;\n      dY += stepH;\n    }\n    return ctx.getImageData(sX, sY, dW, dH);\n  }\n\n  /**\n   * Filter lanczosResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  lanczosResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ): ImageData {\n    function process(u: number): ImageData {\n      let v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n      center.x = (u + 0.5) * ratioX;\n      icenter.x = Math.floor(center.x);\n      for (v = 0; v < dH; v++) {\n        center.y = (v + 0.5) * ratioY;\n        icenter.y = Math.floor(center.y);\n        a = 0;\n        red = 0;\n        green = 0;\n        blue = 0;\n        alpha = 0;\n        for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n          if (i < 0 || i >= oW) {\n            continue;\n          }\n          fX = Math.floor(1000 * Math.abs(i - center.x));\n          if (!cacheLanc[fX]) {\n            cacheLanc[fX] = {};\n          }\n          for (let j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n            if (j < 0 || j >= oH) {\n              continue;\n            }\n            fY = Math.floor(1000 * Math.abs(j - center.y));\n            if (!cacheLanc[fX][fY]) {\n              cacheLanc[fX][fY] = lanczos(\n                Math.sqrt(\n                  Math.pow(fX * rcpRatioX, 2) + Math.pow(fY * rcpRatioY, 2),\n                ) / 1000,\n              );\n            }\n            weight = cacheLanc[fX][fY];\n            if (weight > 0) {\n              idx = (j * oW + i) * 4;\n              a += weight;\n              red += weight * srcData[idx];\n              green += weight * srcData[idx + 1];\n              blue += weight * srcData[idx + 2];\n              alpha += weight * srcData[idx + 3];\n            }\n          }\n        }\n        idx = (v * dW + u) * 4;\n        destData[idx] = red / a;\n        destData[idx + 1] = green / a;\n        destData[idx + 2] = blue / a;\n        destData[idx + 3] = alpha / a;\n      }\n\n      if (++u < dW) {\n        return process(u);\n      } else {\n        return destImg;\n      }\n    }\n\n    const srcData = options.imageData.data,\n      destImg = options.ctx.createImageData(dW, dH),\n      destData = destImg.data,\n      lanczos = this.lanczosCreate(this.lanczosLobes),\n      ratioX = this.rcpScaleX,\n      ratioY = this.rcpScaleY,\n      rcpRatioX = 2 / this.rcpScaleX,\n      rcpRatioY = 2 / this.rcpScaleY,\n      range2X = Math.ceil((ratioX * this.lanczosLobes) / 2),\n      range2Y = Math.ceil((ratioY * this.lanczosLobes) / 2),\n      cacheLanc: Record<number, Record<number, number>> = {},\n      center: XY = { x: 0, y: 0 },\n      icenter: XY = { x: 0, y: 0 };\n\n    return process(0);\n  }\n\n  /**\n   * bilinearFiltering\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  bilinearFiltering(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    let a;\n    let b;\n    let c;\n    let d;\n    let x;\n    let y;\n    let i;\n    let j;\n    let xDiff;\n    let yDiff;\n    let chnl;\n    let color;\n    let offset = 0;\n    let origPix;\n    const ratioX = this.rcpScaleX;\n    const ratioY = this.rcpScaleY;\n    const w4 = 4 * (oW - 1);\n    const img = options.imageData;\n    const pixels = img.data;\n    const destImage = options.ctx.createImageData(dW, dH);\n    const destPixels = destImage.data;\n    for (i = 0; i < dH; i++) {\n      for (j = 0; j < dW; j++) {\n        x = Math.floor(ratioX * j);\n        y = Math.floor(ratioY * i);\n        xDiff = ratioX * j - x;\n        yDiff = ratioY * i - y;\n        origPix = 4 * (y * oW + x);\n\n        for (chnl = 0; chnl < 4; chnl++) {\n          a = pixels[origPix + chnl];\n          b = pixels[origPix + 4 + chnl];\n          c = pixels[origPix + w4 + chnl];\n          d = pixels[origPix + w4 + 4 + chnl];\n          color =\n            a * (1 - xDiff) * (1 - yDiff) +\n            b * xDiff * (1 - yDiff) +\n            c * yDiff * (1 - xDiff) +\n            d * xDiff * yDiff;\n          destPixels[offset++] = color;\n        }\n      }\n    }\n    return destImage;\n  }\n\n  /**\n   * hermiteFastResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  hermiteFastResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const ratioW = this.rcpScaleX,\n      ratioH = this.rcpScaleY,\n      ratioWHalf = Math.ceil(ratioW / 2),\n      ratioHHalf = Math.ceil(ratioH / 2),\n      img = options.imageData,\n      data = img.data,\n      img2 = options.ctx.createImageData(dW, dH),\n      data2 = img2.data;\n    for (let j = 0; j < dH; j++) {\n      for (let i = 0; i < dW; i++) {\n        const x2 = (i + j * dW) * 4;\n        let weight = 0;\n        let weights = 0;\n        let weightsAlpha = 0;\n        let gxR = 0;\n        let gxG = 0;\n        let gxB = 0;\n        let gxA = 0;\n        const centerY = (j + 0.5) * ratioH;\n        for (let yy = Math.floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n          const dy = Math.abs(centerY - (yy + 0.5)) / ratioHHalf,\n            centerX = (i + 0.5) * ratioW,\n            w0 = dy * dy;\n          for (let xx = Math.floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n            let dx = Math.abs(centerX - (xx + 0.5)) / ratioWHalf;\n            const w = Math.sqrt(w0 + dx * dx);\n            /* eslint-disable max-depth */\n            if (w > 1 && w < -1) {\n              continue;\n            }\n            //hermite filter\n            weight = 2 * w * w * w - 3 * w * w + 1;\n            if (weight > 0) {\n              dx = 4 * (xx + yy * oW);\n              //alpha\n              gxA += weight * data[dx + 3];\n              weightsAlpha += weight;\n              //colors\n              if (data[dx + 3] < 255) {\n                weight = (weight * data[dx + 3]) / 250;\n              }\n              gxR += weight * data[dx];\n              gxG += weight * data[dx + 1];\n              gxB += weight * data[dx + 2];\n              weights += weight;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n        data2[x2] = gxR / weights;\n        data2[x2 + 1] = gxG / weights;\n        data2[x2 + 2] = gxB / weights;\n        data2[x2 + 3] = gxA / weightsAlpha;\n      }\n    }\n    return img2;\n  }\n}\n\nclassRegistry.setClass(Resize);\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\nexport type SaturationOwnProps = {\n  saturation: number;\n};\n\nexport const saturationDefaultValues: SaturationOwnProps = {\n  saturation: 0,\n};\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Saturation extends BaseFilter<'Saturation', SaturationOwnProps> {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: SaturationOwnProps['saturation'];\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  static uniformLocations = ['uSaturation'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      data[i] += max !== r ? (max - r) * adjust : 0;\n      data[i + 1] += max !== g ? (max - g) * adjust : 0;\n      data[i + 2] += max !== b ? (max - b) * adjust : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n\n  isNeutralState() {\n    return this.saturation === 0;\n  }\n}\n\nclassRegistry.setClass(Saturation);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uSaturation;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float rgMax = max(color.r, color.g);\n    float rgbMax = max(rgMax, color.b);\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n    gl_FragColor = color;\n  }\n`;\n","import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/vibrance';\n\nexport type VibranceOwnProps = {\n  vibrance: number;\n};\n\nexport const vibranceDefaultValues: VibranceOwnProps = {\n  vibrance: 0,\n};\n\n/**\n * Vibrance filter class\n * @example\n * const filter = new Vibrance({\n *   vibrance: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Vibrance extends BaseFilter<'Vibrance', VibranceOwnProps> {\n  /**\n   * Vibrance value, from -1 to 1.\n   * Increases/decreases the saturation of more muted colors with less effect on saturated colors.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} vibrance\n   * @default\n   */\n  declare vibrance: VibranceOwnProps['vibrance'];\n\n  static type = 'Vibrance';\n\n  static defaults = vibranceDefaultValues;\n\n  static uniformLocations = ['uVibrance'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.vibrance;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      const avg = (r + g + b) / 3;\n      const amt = ((Math.abs(max - avg) * 2) / 255) * adjust;\n      data[i] += max !== r ? (max - r) * amt : 0;\n      data[i + 1] += max !== g ? (max - g) * amt : 0;\n      data[i + 2] += max !== b ? (max - b) * amt : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {TWebGLUniformLocationMap} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);\n  }\n\n  isNeutralState() {\n    return this.vibrance === 0;\n  }\n}\n\nclassRegistry.setClass(Vibrance);\n","export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uVibrance;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float max = max(color.r, max(color.g, color.b));\n    float avg = (color.r + color.g + color.b) / 3.0;\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\n    gl_FragColor = color;\n  }\n`;\n"],"names":["BaseConfiguration","constructor","_defineProperty","this","window","devicePixelRatio","config","super","configure","arguments","length","undefined","Object","assign","addFonts","paths","fontPaths","_objectSpread","removeFonts","forEach","fontFamily","clearFonts","restoreDefaults","keys","defaults","reduce","acc","key","log","severity","_len","optionalParams","Array","_key","console","FabricError","Error","message","options","concat","SignalAbortedError","context","GLProbe","WebGLProbe","testPrecision","gl","precision","fragmentSource","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","queryWebGL","canvas","getContext","maxTextureSize","getParameter","MAX_TEXTURE_SIZE","GLPrecision","find","getExtension","loseContext","isSupported","textureSize","copyPasteData","env","setEnv","value","getEnv","document","isTouchSupported","navigator","maxTouchPoints","dispose","getFabricDocument","getFabricWindow","getDevicePixelRatio","_config$devicePixelRa","Math","max","cache","getFontCache","_ref","fontStyle","fontWeight","toLowerCase","charWidthsCache","fontCache","cacheKey","clearFontCache","limitDimsByArea","ar","perfLimitSizeTotal","roughWidth","sqrt","floor","VERSION","noop","halfPI","PI","twoMathPi","PiBy180","iMatrix","freeze","DEFAULT_SVG_FONT_SIZE","kRect","CENTER","LEFT","TOP","BOTTOM","RIGHT","NONE","reNewline","MOVING","SCALING","ROTATING","ROTATE","SKEWING","RESIZING","MODIFY_POLY","MODIFY_PATH","CHANGED","SCALE","SCALE_X","SCALE_Y","SKEW_X","SKEW_Y","FILL","STROKE","MODIFIED","JSON","SVG","classRegistry","Map","has","classType","getClass","get","setClass","classConstructor","set","type","getSVGClass","SVGTagName","setSVGClass","runningAnimations","remove","index","indexOf","splice","cancelAll","animations","animation","abort","cancelByCanvas","filter","_animation$target","target","cancelByTarget","Observable","on","arg0","handler","__eventListeners","entries","eventName","off","push","once","disposers","_ref2","d","disposer","args","call","_removeEventListener","eventListener","_ref3","fire","_this$__eventListener","listenersForEvent","i","removeFromArray","array","idx","cos","angle","abs","sin","angleSlice","sign","Point","y","x","add","that","addEquals","scalarAdd","scalar","scalarAddEquals","subtract","subtractEquals","scalarSubtract","scalarSubtractEquals","multiply","scalarMultiply","scalarMultiplyEquals","divide","scalarDivide","scalarDivideEquals","eq","lt","lte","gt","gte","lerp","t","min","distanceFrom","dx","dy","midPointFrom","toString","setXY","setX","setY","setFromPoint","swap","clone","rotate","radians","origin","ZERO","sinus","cosinus","p","transform","ignoreOffset","isCollection","fabricObject","isArray","_objects","createCollectionMixin","Base","Collection","_onObjectAdded","object","_onObjectRemoved","_onStackOrderChanged","objects","size","insertAt","_len2","_key2","removed","_len3","_key3","forEachObject","callback","getObjects","_len4","types","_key4","o","isType","item","isEmpty","contains","deep","includes","some","obj","complexity","memo","current","sendObjectToBack","unshift","bringObjectToFront","sendObjectBackwards","intersecting","newIdx","findNewLowerIndex","bringObjectForward","findNewUpperIndex","moveObjectTo","isOverlapping","collectObjects","left","top","width","height","includeIntersecting","tl","br","selectable","visible","intersectsWithRect","isContainedWithinRect","containsPoint","CommonMethods","_setOptions","prop","_setObject","_set","toggle","property","requestAnimFrame","requestAnimationFrame","cancelAnimFrame","handle","cancelAnimationFrame","id","uid","createCanvasElement","element","createElement","createImage","createCanvasElementFor","newCanvas","toDataURL","canvasEl","format","quality","toBlob","Promise","resolve","_","degreesToRadians","degrees","radiansToDegrees","isIdentityMatrix","mat","every","transformPoint","invertTransform","a","r","multiplyTransformMatrices","b","is2x2","multiplyTransformMatrixArray","matrices","reduceRight","product","curr","calcPlaneRotation","atan2","qrDecompose","denom","pow","scaleX","scaleY","skewX","skewY","translateX","translateY","createTranslateMatrix","createRotateMatrix","angleRadiant","cosValue","sinValue","createScaleMatrix","angleToSkew","tan","createSkewXMatrix","skewValue","createSkewYMatrix","calcDimensionsMatrix","flipX","flipY","matrix","composeMatrix","scaleMatrix","loadImage","url","signal","crossOrigin","reject","aborted","img","err","src","addEventListener","done","onload","onerror","removeEventListener","enlivenObjects","reviver","instances","all","map","fromObject","then","fabricInstance","catch","error","instance","finally","enlivenObjectEnlivables","serializedObject","promises","values","enlived","pick","source","pickBy","predicate","toFixed","number","fractionDigits","parseFloat","Number","matrixToSVG","NUM_FRACTION_DIGITS","join","isFiller","filler","toLive","isSerializableFiller","toObject","isPattern","offsetX","isActiveSelection","getScrollLeftTop","doc","getDocumentFromElement","elementLoop","docElement","documentElement","body","scrollLeft","scrollTop","parentNode","host","nodeType","style","position","el","ownerDocument","getWindowFromElement","_el$ownerDocument","defaultView","setCanvasDimensions","ctx","retinaScaling","setAttribute","scale","setCSSDimensions","makeElementUnselectable","onselectstart","userSelect","StaticCanvasDOMManager","createLowerCanvas","lower","getElementById","hasAttribute","_originalCanvasStyle","cssText","classList","cleanupDOM","removeAttribute","setDimensions","calcOffset","_getWindowFromElement","offset","elemStyle","getComputedStyle","parseInt","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","box","docElem","getBoundingClientRect","scrollLeftTop","clientLeft","clientTop","getElementOffset","staticCanvasDefaults","backgroundVpt","backgroundColor","overlayVpt","overlayColor","includeDefaultValues","svgViewportTransformation","renderOnAddRemove","skipOffscreen","enableRetinaScaling","imageSmoothingEnabled","controlsAboveOverlay","allowTouchScrolling","viewportTransform","StaticCanvas","lowerCanvasEl","_this$elements$lower","elements","contextContainer","_this$elements$lower2","getDefaults","ownDefaults","initElements","_setDimensionsImpl","skipControlsDrawing","calcViewportBoundaries","requestRenderAll","setCoords","getRetinaScaling","_offset","getWidth","getHeight","setWidth","setHeight","dimensions","cssOnly","backstoreOnly","hasLostContext","getZoom","setViewportTransform","vpt","zoomToPoint","point","before","newPoint","after","setZoom","absolutePan","relativePan","getElement","clearContext","clearRect","clear","backgroundImage","overlayImage","renderAll","cancelRequestedRender","destroyed","renderCanvas","renderAndReset","nextRenderHandle","disposed","iVpt","vptCoords","tr","bl","drawControls","_ctx","v","path","clipPath","patternQuality","_renderBackground","save","_renderObjects","restore","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","__cleanupTask","globalCompositeOperation","zoomX","zoomY","drawImage","_cacheCanvas","cacheTranslationX","cacheTranslationY","len","render","_renderBackgroundOrOverlay","fill","needsVpt","isAFiller","beginPath","moveTo","lineTo","closePath","fillStyle","offsetY","m","gradientTransform","patternTransform","getCenter","getCenterPoint","centerObjectH","_centerObject","centerObjectV","centerObject","viewportCenterObject","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","center","toDatalessJSON","propertiesToInclude","toDatalessObject","_toObjectMethod","toJSON","methodName","clipPathData","excludeFromExport","_toObject","version","__serializeBgOverlay","originalValue","data","bgImage","bgColor","background","overlay","toSVG","markup","_setSVGPreamble","_setSVGHeader","clipPathId","_setSVGBgOverlayColor","_setSVGBgOverlayImage","_setSVGObjects","suppressPreamble","encoding","optViewBox","viewBox","createSVGFontFacesMarkup","createSVGRefElementsMarkup","createSVGClipPathMarkup","toClipPathSVG","shouldTransform","additionalTransform","fontList","_renderText","styles","styleRow","fontListMarkup","_setSVGObject","bgOrOverlay","repeat","finalWidth","finalHeight","loadFromJSON","json","serialized","parse","enlivedMap","properties","cloneWithoutData","multiplier","finalMultiplier","toCanvasElement","scaledWidth","scaledHeight","zoom","originalWidth","originalHeight","originalSkipControlsDrawing","newZoom","vp","newVp","originalRetina","objectsToRender","task","destroy","kill","touchEvents","getPointer","event","scroll","_evt","touchProp","changedTouches","getTouchInfo","clientX","clientY","isTouchEvent","pointerType","stopEvent","e","preventDefault","stopPropagation","makeBoundingBoxFromPoints","points","addTransformToObject","applyTransformToObject","calcOwnMatrix","_qrDecompose","otherOptions","_objectWithoutProperties","_excluded","setPositionByOrigin","resetObjectTransform","saveObjectTransform","sizeAfterTransform","dimX","dimY","bbox","calcPlaneChangeMatrix","from","sendPointToPlane","to","sendVectorToPlane","sendObjectToPlane","fireEvent","_target$canvas","originOffset","bottom","right","resolveOrigin","originValue","NOT_ALLOWED_CURSOR","isTransformCentered","originX","originY","invertOrigin","isLocked","lockingKey","commonEventInfo","eventData","pointer","findCornerQuadrant","control","cornerAngle","getTotalAngle","round","getLocalPoint","corner","controls","padding","localPoint","getRelativeCenterPoint","translateToGivenOrigin","normalizePoint","dragHandler","newLeft","newTop","moveX","moveY","ColorNameMap","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hue2rgb","q","rgb2Hsl","g","maxValue","minValue","h","s","l","fromAlphaToFloat","endsWith","hexify","toUpperCase","padStart","greyAverage","avg","Color","color","setSource","_source","_tryParsingColor","sourceFromHex","sourceFromRgb","sourceFromHsl","isUnrecognised","getSource","toRgb","toRgba","toHsl","toHsla","toHex","toHexa","slice","getAlpha","setAlpha","alpha","toGrayscale","toBlackWhite","threshold","average","bOrW","overlayWith","otherColor","otherSource","R","G","B","fromRgb","fromRgba","match","parsedValue","fromHsl","fromHsla","parseAngletoDegrees","fromHex","expandedValue","split","hex","hexCouple","lowercase","numeric","parseUnit","fontSize","unit","exec","dpi","DPI","parsePreserveAspectRatioAttribute","attribute","firstPart","secondPart","trim","alignX","alignY","align","meetOrSlice","colorPropToSVG","colorValue","opacityValue","inlineStyle","opacity","FabricObjectSVGExportMixin","getSvgStyles","skipShadow","fillRule","strokeWidth","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","visibility","getSvgFilter","stroke","shadow","getSvgCommons","getSvgTransform","full","calcTransformMatrix","svgTransform","_toSVG","_reviver","_createBaseSVGMarkup","_createBaseClipPathSVGMarkup","objectMarkup","commonPieces","noStyle","withShadow","styleInfo","shadowInfo","vectorEffect","strokeUniform","absoluteClipPath","absolutePositioned","clipPathMarkup","addPaintOrder","paintFirst","getSvgRegex","arr","RegExp","TEXT_DECORATION_THICKNESS","fontProperties","textDecorationProperties","textLayoutProperties","additionalProps","styleProperties","textDefaultValues","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","underline","overline","linethrough","textAlign","lineHeight","textBackgroundColor","pathStartOffset","pathSide","pathAlign","charSpacing","deltaY","direction","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","superscript","baseline","subscript","_fontSizeFraction","offsets","_fontSizeMult","JUSTIFY","JUSTIFY_LEFT","JUSTIFY_RIGHT","JUSTIFY_CENTER","reNum","String","raw","_templateObject","_taggedTemplateLiteral","viewportSeparator","_templateObject2","svgNS","reFontDeclaration","attributesMap","cx","cy","display","fSize","cPath","svgValidTagNamesRegEx","svgViewBoxElementsRegEx","svgValidParentsRegEx","reViewBoxAttrValue","_templateObject3","unitVectorX","zero","rotateVector","vector","createVector","magnitude","calcAngleBetweenVectors","crossProduct","dotProduct","calcVectorRotation","getUnitVector","getOrthonormalVector","counterClockwise","isBetweenVectors","AxB","AxT","BxT","shadowOffsetRegex","reOffsetsAndBlur","Shadow","parseShadow","shadowStr","blur","replace","fBoxX","fBoxY","affectStroke","nonScaling","capValue","stateProperties","cacheProperties","fabricObjectDefaultValues","minScaleLimit","objectCaching","inverted","centeredRotation","centeredScaling","dirty","normalize","c","asin","elastic","defaultEasing","easeOutBounce","easeInBounce","easeInCirc","easeInCubic","easeInElastic","normA","normS","normP","easeInExpo","easeInOutBounce","easeInOutCirc","easeInOutCubic","easeInOutElastic","normC","easeInOutExpo","easeInOutQuad","easeInOutQuart","easeInOutQuint","easeInOutSine","easeInQuad","easeInQuart","easeInQuint","easeInSine","easeOutCirc","easeOutCubic","easeOutElastic","easeOutExpo","easeOutQuad","easeOutQuart","easeOutQuint","easeOutSine","defaultAbort","AnimationBase","startValue","byValue","duration","delay","easing","onStart","onChange","onComplete","tick","bind","_onStart","_onChange","_onComplete","_abort","endValue","calculate","state","_state","isDone","start","firstTick","timestamp","startTime","Date","register","setTimeout","durationMs","boundDurationMs","durationProgress","valueProgress","unregister","ValueAnimation","timeElapsed","ArrayAnimation","defaultColorEasing","wrapColorCallback","rgba","ColorAnimation","startColor","endColor","animate","isArrayAnimation","animateColor","Intersection","status","append","isPointContained","T","A","infinite","AB","isPointInPolygon","other","hits","inter","intersectSegmentSegment","intersectLineLine","a1","a2","b1","b2","aInfinite","bInfinite","a2xa1x","a2ya1y","b2xb1x","b2yb1y","a1xb1x","a1yb1y","uaT","ubT","uB","ua","ub","segmentsCoincide","intersectSegmentLine","s1","s2","l1","l2","intersectLinePolygon","result","intersectSegmentPolygon","intersectPolygonPolygon","points1","points2","coincidences","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","ObjectGeometry","getX","getXY","getY","getRelativeX","setRelativeX","getRelativeY","setRelativeY","relativePosition","getRelativeXY","group","setRelativeXY","isStrokeAccountedForInDimensions","getCoords","aCoords","calcACoords","coords","intersectsWithObject","intersection","isContainedWithinObject","getBoundingRect","isOnScreen","isPartiallyOnScreen","getScaledWidth","_getTransformedDimensions","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","getCanvasRetinaScaling","_this$canvas","getViewportTransform","_this$canvas2","rotateMatrix","tMatrix","finalMatrix","dim","w","transformMatrixKey","skipGroup","prefix","matrixCache","ownMatrixCache","_getNonTransformedDimensions","_calculateCurrentDimensions","dimOptions","preScalingStrokeValue","postScalingStrokeValue","finalDimensions","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","translateToOriginPoint","relCenter","getPointByOrigin","pos","_getLeftTopCoords","FabricObject","name","setOptions","_createCacheCanvas","_cacheContext","_updateCacheCanvas","_limitCacheSize","dims","maxCacheSideLimit","minCacheSideLimit","limX","limY","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","neededX","neededY","ceil","dimensionsChanged","zoomChanged","setTransform","drawingWidth","drawingHeight","translate","needFullTransform","contextTop","getObjectScaling","retina","getObjectOpacity","_constrainScale","isChanged","parent","isNotVisible","_setupCompositeOperation","drawSelectionBackground","_setOpacity","_setShadow","drawCacheOnCanvas","_removeCacheCanvas","drawObject","isCacheDirty","parentClipPaths","hasStroke","hasFill","needsItsOwnCache","ownCaching","isOnACache","willDrawShadow","drawClipPathOnCache","canvasWithClipPath","originalFill","originalStroke","_setClippingProperties","_render","_drawClipPath","createClipPathLayer","prevClipPath","skipCanvas","fillRect","_removeShadow","globalAlpha","_setStrokeStyles","decl","lineWidth","lineCap","lineDashOffset","lineJoin","miterLimit","gradientUnits","_applyPatternForTransformedGradient","strokeStyle","_applyPatternGradientTransform","_setFillStyles","_setLineDash","dashArray","setLineDash","sx","sy","multX","multY","scaling","shadowColor","shadowBlur","browserShadowBlurConstant","shadowOffsetX","shadowOffsetY","_renderPaintInOrder","_renderStroke","_renderFill","_pCtx$createPattern","pCanvas","pCtx","createPattern","_findCenterFromElement","objectForm","cloneAsImage","origParams","originalGroup","originalShadow","canvasProvider","withoutTransform","withoutShadow","boundingRect","shadowOffset","originalCanvas","setOnGroup","animatable","_animate","propIsColor","colorProperties","animationOptions","isDescendantOf","getAncestors","ancestors","findCommonAncestors","fork","otherFork","common","otherAncestors","ancestor","j","hasCommonAncestors","commonAncestors","isInFrontOf","ancestorData","firstCommonAncestor","headOfFork","pop","headOfOtherFork","thisIndex","otherIndex","propertiesToSerialize","customProperties","toFixedBound","val","_removeDefaultValues","baseValues","getPrototypeOf","baseValue","_fromObject","serializedObjectOptions","_ref4","extraParam","_excluded2","enlivedObjectOptions","wrapWithFireEvent","actionHandler","extraEventInfo","actionPerformed","wrapWithFixedAnchor","centerPoint","constraint","changeWidth","changeObjectWidth","strokePadding","oldWidth","newWidth","renderCircleControl","styleOverride","xSize","sizeX","cornerSize","ySize","sizeY","transparentCorners","cornerStrokeColor","myLeft","myTop","cornerColor","arc","renderSquareControl","xSizeBy2","ySizeBy2","strokeRect","Control","shouldActivate","controlKey","_fabricObject$canvas","getActiveObject","isControlVisible","getActionHandler","getMouseDownHandler","mouseDownHandler","getMouseUpHandler","mouseUpHandler","cursorStyleHandler","cursorStyle","getActionName","actionName","getVisibility","_fabricObject$_contro","_fabricObject$_contro2","_controlsVisibility","setVisibility","positionHandler","currentControl","calcCornerCoords","objectCornerSize","centerX","centerY","isTouch","touchSizeX","touchSizeY","cornerStyle","rotationStyleHandler","lockRotation","rotationWithSnapping","rotateObjectWithSnapping","ex","ey","theta","pivotPoint","lastAngle","curAngle","snapAngle","snapThreshold","rightAngleLocked","leftAngleLocked","hasRotated","scaleIsProportional","uniformIsToggled","uniScaleKey","uniformScaling","scalingIsForbidden","by","scaleProportionally","lockX","lockY","scaleMap","scaleCursorStyleHandler","n","scaleObject","signX","signY","gestureScale","distance","original","oldScaleX","oldScaleY","scalingEqually","scaleObjectFromCorner","scalingX","scaleObjectX","scalingY","scaleObjectY","AXIS_KEYS","counterAxis","skew","lockSkewing","flip","skewMap","skewCursorStyleHandler","skewHandler","axis","originKey","lockSkewingKey","skewKey","flipKey","counterOriginKey","counterFlipKey","counterOriginFactor","skewingSide","finalHandler","skewingBefore","skewingStart","shearingStart","shearing","skewing","atan","changed","dimBefore","dimAfter","compensationFactor","skewObject","skewHandlerX","skewHandlerY","isAltAction","altActionKey","scaleOrSkewActionName","isAlternative","scaleSkewCursorStyleHandler","scalingXOrSkewingY","scalingYOrSkewingX","createObjectDefaultControls","ml","mr","mb","mt","mtr","withConnection","createResizeControls","createTextboxDefaultControls","InteractiveFabricObject","createControls","targetCanvas","noScaleCache","_currentTransform","action","startsWith","getActiveControl","__corner","coord","oCoords","findControl","forTouch","hasControls","cornerEntries","touchCorner","calcOCoords","rMatrix","positionMatrix","startMatrix","transformOptions","forEachControl","_calcCornerCoords","touchCornerSize","fn","selectionBackgroundColor","_activeObject","wh","strokeBorders","_drawBorders","borderColor","borderDashArray","drawControlsConnectingLines","_renderControls","hasBorders","styleOptions","shouldDrawBorders","shouldDrawControls","borderScaleFactor","isMoving","borderOpacityWhenMoving","drawBorders","forActiveSelection","shouldStroke","cornerDashArray","setControlVisible","setControlsVisibility","clearContextTop","restoreManually","onDeselect","_options","onSelect","shouldStartDragging","_e","onDragStart","canDrop","renderDragSourceEffect","renderDropTargetEffect","applyMixins","derivedCtor","constructors","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","create","lockMovementX","lockMovementY","lockScalingX","lockScalingY","lockSkewingX","lockSkewingY","lockScalingFlip","evented","perPixelTargetFind","activeOn","hoverCursor","moveCursor","isTransparent","tolerance","getImageData","StrokeProjectionsBase","strokeProjectionMagnitude","strokeUniformScalar","createSideVector","projectOrthogonally","applySkew","calcOrthogonalProjection","isSkewed","scaleUnitVector","unitVector","zeroVector","StrokeLineJoinProjections","getOrthogonalRotationFactor","vector1","vector2","C","AC","bisector","orthogonalProjection","correctSide","projectBevel","projections","projectMiter","hypotUnitScalar","miterVector","projectRoundNoSkew","startCircle","endCircle","projectRoundWithSkew","circleRadius","newY","furthestY","newX","furthestX","projectRound","isStraightLine","newOrigin","proj0","proj1","comparisonVector","isProj0Start","projectPoints","project","originPoint","projectedPoint","StrokeLineCapProjections","projectButt","projection","projectSquare","strokePointingOut","projectedA","projectStrokeOnPoints","openPath","reduced","findIndexRight","cloneStyles","newObj","keyInner","escapeXml","string","segmenter","graphemeSplit","textstring","Intl","Segmenter","granularity","segments","segment","graphemeSplitImpl","graphemes","chr","getWholeChar","str","code","charCodeAt","isNaN","charAt","next","prev","firstLetterOnly","hasStyleChanged","prevStyle","thisStyle","forTextSpans","textDecorationThickness","stylesToArray","text","textLines","stylesArray","charIndex","chars","end","stylesFromArray","stylesObject","styleIndex","SHARED_ATTRIBUTES","selectorMatches","selector","nodeName","classNames","getAttribute","azAz","matcher","splitClassNames","elementMatchesRule","selectors","parentMatching","firstMatching","parentElement","doesSomeParentMatch","normalizeAttr","attr","_attributesMap","regex","cleanupSvgAttribute","attributeValue","_templateObject4","_templateObject5","_templateObject6","transforms","transformList","_templateObject7","reTransformList","reTransform","reTransformAll","parseTransformAttribute","test","matchAll","transformMatch","matchedParams","operation","rawArgs","arg1","arg2","arg3","arg4","arg5","arg","normalizeValue","parentAttributes","parsed","ouputValue","transformMatrix","fillIndex","strokeIndex","parseFontDeclaration","oStyle","parseStyleString","chunk","parseStyleAttribute","parseStyleObject","colorAttributesMap","parseAttributes","attributes","cssRules","parentFontSize","ownAttributes","rule","getGlobalStylesForElement","normalizedStyle","normalizedAttr","normalizedValue","font","mergedAttrs","colorAttr","setStrokeFillOpacity","RECT_PROPS","Rect","_initRxRy","rx","ry","isRounded","bezierCurveTo","fromElement","_parseAttributes","ATTRIBUTE_NAMES","restOfparsedAttributes","Boolean","LAYOUT_TYPE_INITIALIZATION","LAYOUT_TYPE_ADDED","LAYOUT_TYPE_REMOVED","LAYOUT_TYPE_IMPERATIVE","getObjectBounds","destinationGroup","currentGroup","objectCenter","accountForStroke","strokeUniformVector","scalingStrokeWidth","sizeVector","LayoutStrategy","calcLayoutResult","shouldPerformLayout","calcBoundingBox","prevStrategy","strategy","shouldLayoutClipPath","getInitialSize","overrides","bboxSize","bboxCenter","actualSize","relativeCorrection","FitContentLayout","LAYOUT_MANAGER","LayoutManager","_subscriptions","performLayout","strictContext","bubbles","_prevLayoutStrategy","onBeforeLayout","layoutResult","getLayoutResult","commitLayout","onAfterLayout","attachHandlers","trigger","subscribe","unsubscribe","_context","delete","unsubscribeTargets","targets","subscribeTargets","tricklingContext","layoutManager","prevCenter","nextCenter","correction","_context$x","_context$y","layoutObjects","layoutObject","bubblingContext","NoopLayoutManager","Group","groupInit","_options$layoutManage","__objectSelectionTracker","__objectSelectionMonitor","__objectSelectionDisposer","enterGroup","canEnterGroup","_filterObjectsBeforeEnteringGroup","allowedObjects","_onAfterObjectsChange","removeParentTransform","exitGroup","_shouldSetNestedCoords","subTargetCheck","removeAll","_activeObjects","selected","activeObjects","_watchObject","watch","_enterGroup","activeObject","_exitGroup","ownCache","preserveObjectStacking","triggerLayout","__serializeObjects","method","_includeDefaultValues","originalDefaults","_createSVGBgRect","fillStroke","commons","svgString","bg","abortable","hydratedOptions","layoutClass","strategyClass","interactive","findScaleToFit","destination","findScaleToCover","commaWsp","reArcCommandPoints","repeatedCommands","M","segmentToBezier","theta1","theta2","cosTh","sinTh","cx1","cy1","mT","fromX","fromY","costh1","sinth1","costh2","sinth2","toX","toY","calcVectorAngle","ux","uy","vx","vy","ta","tb","getBoundsOfCurve","begx","begy","cp1x","cp1y","cp2x","cp2y","endx","endy","argsString","cachesBoundsOfCurve","boundsOfCurveCache","tvalues","bounds","b2ac","sqrtb2ac","t1","t2","jlen","iterator","getPointOnCubicBezierIterator","fromArcToBeziers","fx","fy","rot","large","sweep","tx","ty","segsNorm","arcToSegments","rotateX","root","sinTheta","px","py","rx2","ry2","py2","px2","pl","_rx","_ry","mTheta","dtheta","mDelta","th3","makePathSimpler","x1","y1","destinationPath","previous","controlX","controlY","parsedCommand","converted","calcLineLength","x2","y2","pct","c1","c2","CB2","c3","CB3","c4","CB4","QB1","QB2","QB3","getTangentCubicIterator","p1x","p1y","p2x","p2y","p3x","p3y","p4x","p4y","qb1","qb2","qb3","tangentX","tangentY","getPointOnQuadraticBezierIterator","getTangentQuadraticIterator","invT","pathIterator","tempP","tmpLen","perc","findPercentageForDistance","segInfo","nextLen","nextStep","lastPerc","angleFinder","getPathSegmentsInfo","tempInfo","totalLength","info","basicInfo","command","destX","destY","getPointOnPath","infos","segPercent","rePathCmdAll","regExpArcCommandPoints","reMyNum","commandLengths","parsePath","pathString","_pathString$match","chain","matchStr","commandLetter","commandLength","paramArr","lastIndex","out","newCommand","transformedCommand","getSmoothPathFromPoints","p1","p2","multSignX","multSignY","manyPoints","midPoint","joinPath","pathData","setStyle","elementStyle","setProperty","getRandomInt","random","request","xhr","removeListener","ontimeout","onreadystatechange","readyState","open","send","removeTransformMatrixForSvgParsing","preserveAspectRatioOptions","_assignTransformMatrixProps","cropX","cropY","offsetLeft","offsetTop","_newCanvas$getContext","getRegularPolygonPath","numVertexes","radius","interiorAngle","rotationAdjustment","rad","commonAttributes","groupSVGElements","mergeClipPaths","_b$group","removeTransformFromObject","finalTransform","rotatePoint","transformPath","pathOffset","pathSegment","newSegment","CanvasDOMManager","containerClass","upperCanvasEl","createUpperCanvas","upper","applyCanvasStyle","container","createContainerElement","replaceChild","className","removeChild","SelectableCanvas","_this$elements$upper","_this$elements$upper2","wrapperEl","_objectsToRender","deselected","_discardActiveObject","_hoveredTarget","_hoveredTargets","_chooseObjectsToRender","contextTopDirty","_groupSelector","isDrawingMode","renderTopLayer","_isCurrentlyDrawing","freeDrawingBrush","selection","_drawSelection","renderTop","setTargetFindTolerance","targetFindTolerance","pixelFindCanvasEl","pixelFindContext","isTargetTransparent","selectionBgc","enhancedTolerance","_isSelectionKeyPressed","sKey","selectionKey","_shouldClearSelection","getActiveObjects","_shouldCenterTransform","modifierKeyPressed","centerTransform","_getOriginFromCorner","controlName","_setupCurrentTransform","alreadySelected","_control$getActionHan","getScenePoint","getActionFromCorner","altKey","centeredKey","lastX","lastY","shiftKey","setCursor","cursor","deltaX","extent","strokeOffset","selectionLineWidth","minX","minY","maxX","maxY","selectionColor","selectionBorderColor","selectionDashArray","findTarget","skipTargetFind","getViewportPoint","aObjects","searchPossibleTargets","subTargets","altSelectionKey","_pointIsInObjectSelectionArea","viewportZoom","angleRadians","cosP","sinP","cosPSinP","cosPMinusSinP","_checkTarget","isEditing","_searchPossibleTargets","subTarget","_pointer","_absolutePointer","fromViewport","boundsWidth","boundsHeight","cssScale","_resetTransformEventData","_setBrushStyles","willReadFrequently","getTopContext","getSelectionContext","getSelectionElement","active","_fireSelectionEvents","oldObjects","somethingChanged","invalidate","added","setActiveObject","currentActives","_setActiveObject","prevActiveObject","endCurrentTransform","discardActiveObject","discarded","_finalizeCurrentTransform","_scaling","originalProperties","_realizeGroupTransformOnObject","originalValues","selectionFullyContained","defaultCursor","freeDrawingCursor","notAllowedCursor","stopContextMenu","fireRightClick","fireMiddleClick","enablePointerEvents","TextEditingManager","cb","hiddenTextarea","focus","__disposer","exitTextEditing","exitEditing","onMouseMove","_this$target","updateSelectionOnMouseMove","addEventOptions","passive","getEventPoints","viewportPoint","scenePoint","absolutePointer","addListener","syntheticEventConfig","mouse","in","targetIn","targetOut","canvasIn","canvasOut","drag","Canvas","eventHandler","addOrRemove","_getEventPrefix","functor","_eventjsFunctor","canvasElement","eventTypePrefix","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onClick","_onDragStart","_onDragEnd","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","_onTouchStart","removeListeners","_onMouseUp","_onTouchEnd","clearTimeout","_willAddMouseDown","__onMouseWheel","shared","nestedTarget","_isClick","_dragSource","_onDragProgress","_renderDragEffects","dropTarget","_dropTarget","didDrop","dataTransfer","dropEffect","dragSource","_draggedoverTarget","findDragTargets","eventType","_fireEnterLeaveEvents","_basicEventHandler","clicks","detail","_cacheTransformEventData","_handleEvent","getPointerId","evt","identifier","pointerId","_isMainEvent","isPrimary","touches","mainTouchId","shouldPreventScrolling","currentActiveObject","__onMouseDown","_target","__onMouseUp","__onMouseMove","_shouldRender","_this$_activeObject","isClick","button","_onMouseUpInDrawingMode","shouldRender","targetWasActive","handleSelection","found","originalControl","originalMouseUpHandler","_setCursorFromEvent","extraData","currentTarget","currentSubTargets","_onMouseDownInDrawingMode","onMouseDown","_onMouseMoveInDrawingMode","onMouseUp","grouped","handleMultiSelection","groupSelector","_transformObject","_fireOverOutEvents","textEditingManager","fireSyntheticInOutEvents","oldTarget","fireCanvas","draggedoverTarget","targetChanged","outOpt","nextTarget","inOpt","previousTarget","localPointer","_performTransformAction","activeSelection","reverse","isAS","prevActiveObjects","multiSelectAdd","newActiveSelection","point1","point2","collectedObjects","klass","linearDefaultCoords","radialDefaultCoords","ifNaN","valueIfNaN","RE_PERCENT","isPercent","parsePercent","NaN","RE_KEY_VALUE_PAIRS","RE_KEY_VALUE","parseColorStop","keyValuePairs","parseColorStops","opacityAttr","colorStops","colorStopEls","getElementsByTagName","parseType","parseGradientUnits","getValue","parseCoords","valuesToConvert","finalValue","propValue","convertPercentUnitsToValues","parseLinearCoords","parseRadialCoords","Gradient","addColorStop","colorStop","preTransform","sort","_renderPathCommands","needsSwap","minRadius","percentageShift","gradient","createLinearGradient","createRadialGradient","svgOptions","viewBoxWidth","viewBoxHeight","Pattern","isImageSource","isCanvasSource","sourceToString","complete","naturalWidth","naturalHeight","patternSource","patternOffsetX","patternOffsetY","patternWidth","patternHeight","BaseBrush","_saveAndTransform","needsFullRender","_resetShadow","_isOutSideCanvas","Path","_setPath","adjustPosition","setBoundingBox","_calcBoundsFromPath","quadraticCurveTo","pathCmd","sourcePath","_getOffsetTransform","digits","_calcDimensions","subpathStartX","subpathStartY","parsedAttributes","PencilBrush","_points","_hasStraightLine","drawSegment","drawStraightLine","straightLineKey","_prepareForDrawing","_addPoint","limitedToCanvasSize","oldEnd","_finalizeAndAddPath","_reset","convertPointsToSVGPath","createPath","decimatePoints","cDistance","lastPoint","adjustedDistance","newPoints","decimate","isEmptySVGPath","CIRCLE_PROPS","Circle","setRadius","startAngle","endAngle","getRadiusX","getRadiusY","startX","startY","endX","endY","largeFlag","sweepFlag","CircleBrush","drawDot","addPoint","dot","originalRenderOnAddRemove","circles","circle","pointerPoint","SprayBrush","sprayChunks","sprayChunk","addSprayChunk","renderChunck","rects","chunck","rect","optimizeOverlapping","uniqueRects","uniqueRectsArray","getUniqueRects","sprayChunck","density","dotWidthVariance","dotWidth","randomOpacity","PatternBrush","getPatternSrc","patternCanvas","patternCtx","getPattern","pattern","topLeft","coordProps","Line","_setWidthHeight","calcLinePoints","origStrokeStyle","_this$stroke","_x1","_x2","_y1","_y2","xMult","yMult","Triangle","widthBy2","heightBy2","ELLIPSE_PROPS","Ellipse","getRx","getRy","parsePointsAttribute","pointsSplit","parsedPoints","polylineDefaultValues","exactBoundingBox","Polyline","initialized","isOpen","_projectStrokeOnPoints","strokeDiff","bboxNoStroke","layoutProperties","_options$width","_options$height","_options$width2","_options$height2","output","diffX","diffY","Polygon","StyledText","isEmptyStyles","lineIndex","line","p3","styleHas","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","styleObject","_textLines","removeStyle","lineNum","charNum","_extendStyles","get2DCursorLocation","_getLineStyle","_setLineStyle","newStyle","_getStyleDeclaration","_setStyleDeclaration","getSelectionStyles","startIndex","endIndex","getStyleAtPosition","getCompleteStyleDeclaration","setSelectionStyles","_forceClearCache","_lineStyle$charIndex","lineStyle","_styleProperties","_deleteStyleDeclaration","_deleteLineStyle","multipleSpacesRegex","dblQuoteRegex","createSVGInlineRect","svgColor","createSVGRect","measuringContext","FabricText","setPathInfo","initDimensions","segmentsInfo","_splitText","newLines","_splitTextIntoLines","lines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","calcTextHeight","enlargeSpaces","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","charBound","spaces","isEndOfWrapping","getLineWidth","__charBounds","kernedWidth","missingNewlineOffset","_lineIndex","selectionStart","skipWrapping","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","leftOffset","_getLeftOffset","lineTopOffset","_getTopOffset","heightOfLine","getHeightOfLine","lineLeftOffset","_getLineLeftOffset","drawStart","currentColor","boxWidth","boxStart","lastColor","getValueOfPropertyAt","charBox","renderLeft","_measureChar","_char","previousChar","prevCharStyle","fontDeclaration","couple","stylesAreEqual","fontMultiplier","coupleWidth","previousWidth","getMeasuringContext","measureText","getHeightOfChar","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","prevGrapheme","graphemeInfo","llength","lineBounds","grapheme","_getGraphemeBox","positionInPath","totalPathLength","_setGraphemeOnPath","numOfSpaces","centerPosition","skipLeft","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isJustify","shortCut","isLtr","currentDirection","actualStyle","nextStyle","timeToRender","drawingLeft","charsToRender","_renderChar","_applyPatternGradientTransformText","handleFiller","fullDecl","shouldFill","fillOffsets","fillText","strokeOffsets","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","lineDiff","__lineWidths","_charStyle$property","topOffset","offsetAligner","lastDecoration","lastFill","lastTickness","currentDecoration","currentFill","currentTickness","currentSize","currentDy","finalTickness","parsedFontFamily","genericFonts","newLine","newText","needsDims","isAddingPath","_options$parsedAttrib","textAnchor","textDecoration","restOfOptions","textContent","textHeightScaleFactor","scaledDiff","textHeight","offX","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","textSvg","lineTop","textBgRects","textSpans","getSvgTextDecoration","textTopOffset","textLeftOffset","lineOffset","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","char","styleDecl","numFractionDigit","styleProps","getSvgSpanStyles","fillStyles","dySpan","angleAttr","wBy2","renderPoint","_getSVGLineTopOffset","lastHeight","useWhiteSpace","thickness","decoration","DraggableTextDelegate","dragEnterHandler","dragOverHandler","dragLeaveHandler","dragEndHandler","dropHandler","_dispose","isPointerOverSelection","newSelection","getSelectionStartFromPointer","selectionEnd","__mouseDownInPlace","isActive","__dragStartFired","setCursorByClick","initDelayedCursor","__isDraggingOver","getDragStartSelection","__dragStartSelection","setDragImage","_e$dataTransfer","flipFactor","boundaries","_getCursorBoundaries","diff","bgc","dragImage","border","__dragImageDisposer","appendChild","setData","stringify","effectAllowed","abortCursorAnimation","editable","defaultPrevented","dragStartSelection","targetCanDrop","ev","_e$dataTransfer2","insert","getData","trailing","selectionStartOffset","removeChars","trimEnd","insertChars","enterEditing","_updateTextarea","_e$dataTransfer3","reNonWord","ITextBehavior","initBehavior","_tick","_onTickComplete","_animateCursor","toValue","_currentCursorOpacity","renderCursorOrSelection","_currentTickState","cursorDuration","_this$_currentTickCom","_currentTickCompleteState","restart","cursorDelay","shouldClear","cursorAnimation","restartCursorIfNeeded","selectAll","_fireSelectionChanged","cmdAll","getSelectedText","findWordBoundaryLeft","startFrom","_reSpace","findWordBoundaryRight","findLineBoundaryLeft","findLineBoundaryRight","searchWordBoundary","selectWord","_selectionStart","newSelectionStart","newSelectionEnd","selectLine","_selectionStart2","enterEditingImpl","initHiddenTextarea","_saveEditingProps","_setEditingProps","_textBeforeEdit","activeElement","currentStart","currentEnd","__selectionStartOnMouseDown","editingBorderColor","fromStringToGraphemeSelection","smallerTextStart","graphemeStart","smallerTextEnd","fromGraphemeToStringSelection","cursorOffsetCache","inCompositionMode","updateTextareaPosition","updateFromTextArea","textarea","_calcTextareaPosition","desiredPosition","compositionStart","cursorLocation","charHeight","upperCanvas","upperCanvasWidth","upperCanvasHeight","clientWidth","clientHeight","_savedProps","_restoreEditingProps","_exitEditing","exitEditingImpl","isTextChanged","_removeExtraneousStyles","removeStyleFromTo","lineStart","charStart","lineEnd","charEnd","styleObj","shiftLineStyles","numericChar","clonedStyles","numericLine","insertNewlineStyleObject","qty","copiedStyle","newLineStyles","originalLineLength","isEndOfLine","someStyleIsCarryingOver","currentCharStyle","numIndex","styleCarriedOver","insertCharStyleObject","quantity","currentLineStyles","currentLineStylesCloned","numericIndex","insertNewStyleBlock","insertedText","cursorLoc","addedLines","linesLength","setSelectionStartEndWithShift","_selectionDirection","ITextKeyBehavior","autocapitalize","autocorrect","autocomplete","spellcheck","wrap","hiddenTextareaContainer","keydown","keyup","input","copy","cut","paste","compositionstart","compositionupdate","compositionend","onKeyDown","keyMap","keysMapRtl","keysMap","keyCode","ctrlKeysMapDown","ctrlKey","metaKey","stopImmediatePropagation","onKeyUp","_copyDone","ctrlKeysMapUp","onInput","fromPaste","updateAndFire","nextText","charCount","nextCharCount","_selectionEnd","removedText","removeFrom","removeTo","charDiff","textareaSelection","backDelete","copiedText","disableStyleCopyPaste","copiedTextStyle","onCompositionStart","onCompositionEnd","onCompositionUpdate","compositionEnd","_getWidthBeforeCursor","bound","widthBeforeCursor","getDownCursorOffset","isRight","selectionProp","_getSelectionForOffset","indexOnOtherLine","_getIndexOnLine","getUpCursorOffset","textBeforeCursor","charWidth","foundMatch","widthOfCharsOnLine","indexOnLine","leftEdge","rightEdge","offsetFromLeftEdge","moveCursorDown","_moveCursorUpOrDown","moveCursorUp","moveCursorWithShift","moveCursorWithoutShift","moveCursorLeft","_moveCursorLeftOrRight","_move","newValue","_moveLeft","_moveRight","moveCursorLeftWithoutShift","change","moveCursorLeftWithShift","moveCursorRight","moveCursorRightWithShift","moveCursorRightWithoutShift","notALeftClick","ITextClickBehavior","_mouseDownHandler","doubleClickHandler","tripleClickHandler","draggableTextDelegate","didDrag","mouseOffset","charLength","widthAfter","MOVE_CURSOR_UP","MOVE_CURSOR_DOWN","MOVE_CURSOR_LEFT","MOVE_CURSOR_RIGHT","EXIT_EDITING","applyCanvasTransform","iTextDefaultValues","cursorColor","caching","IText","setSelectionStart","_updateAndFire","setSelectionEnd","findAncestorsWithClipPath","hasAncestorsWithClipping","drawingCanvas","drawingCtx","renderSelection","renderCursor","clippingCanvas","clippingCtx","clipPathAncestors","skipCaching","_getCursorBoundariesOffsets","__getCursorBoundariesOffsets","renderCursorAt","_renderCursor","getCursorRenderingData","_renderSelection","dragSelection","startLine","endLine","startChar","endChar","realLineHeight","boxEnd","drawHeight","extraTop","drawWidth","compositionColor","getCurrentCharFontSize","cp","_getCurrentCharIndex","getCurrentCharColor","cursorPosition","Textbox","dynamicMinWidth","_styleMap","_generateStyleMap","textInfo","realLineCount","realLineCharCount","splitByGrapheme","isWrapping","nextOffset","nextLineIndex","shouldLimit","mapNextLine","p2Number","_wrapText","desiredWidth","getGraphemeDataForRender","wrapped","wordsData","_wrapLine","infix","largestWordWidth","wordsOrGraphemes","wordSplit","word","graphemeArray","_measureWord","charOffset","_wordJoiners","reservedSpace","additionalSpace","infixWidth","lineJustStarted","wordWidth","getMinWidth","minWidth","linesToKeep","propNumber","ClipPathLayout","clipPathCenter","FixedLayout","ActiveSelectionLayoutManager","parents","Set","selectedObjects","ActiveSelection","multiSelectionStacking","findIndex","groups","childrenOverride","Canvas2dFilterBackend","applyFilters","filters","sourceElement","sourceWidth","sourceHeight","pipelineState","imageData","originalEl","originalImageData","filterBackend","applyTo","imageDataPostFilter","putImageData","WebGLFilterBackend","tileSize","Float32Array","setupGLContext","captureGPUInfo","createWebGLCanvas","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","destinationWidth","destinationHeight","sourceTexture","createTexture","targetTexture","originalTexture","passes","webgl","aPosition","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","dWidth","dHeight","resizeCanvasIfNeeded","copyGLTo2D","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","textureImageSource","NEAREST","RGBA","UNSIGNED_BYTE","CLAMP_TO_EDGE","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texture","texParameteri","texImage2D","uniqueId","evictCachesForKey","glCanvas","sourceY","copyGLTo2DPutImageData","numBytes","u8","Uint8Array","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","imgData","ImageData","gpuInfo","renderer","vendor","ext","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","initFilterBackend","enableGLFiltering","getFilterBackend","setFilterBackend","backend","IMAGE_PROPS","FabricImage","setElement","_element","_element$classList","removeTexture","_originalElement","CSS_CANVAS","resizeFilter","applyResizeFilters","elementKey","getCrossOrigin","getOriginalSize","_stroke","filterObj","getSrc","hasCrop","imageMarkup","strokeSvg","imageRendering","imageSmoothing","getSvgSrc","origFill","filtered","srcFromAttribute","setSrc","minimumScale","minimumScaleTrigger","elementToFilter","_filteredEl","_filterScalingX","_filterScalingY","_lastScaleX","_lastScaleY","isNeutralState","imgElement","_needsResize","elementToDraw","elWidth","elHeight","sX","sY","sW","sH","maxDestW","maxDestH","_resetWidthHeight","pAR","preserveAspectRatio","pWidth","pHeight","rWidth","rHeight","f","rf","hydratedProps","fromURL","imageOptions","applyViewboxTransform","viewBoxAttr","widthAttr","heightAttr","missingViewBox","missingDimAttr","translateMatrix","widthDiff","heightDiff","parsedDim","pasedViewBox","createElementNS","firstChild","getTagName","node","tagName","svgInvalidAncestorsRegEx","getMultipleNodes","nodeNames","nodeList","nodeArray","getElementsByTagNameNS","gradientsAttrs","xlinkAttr","recursivelyParseGradientsXlink","_gradient$getAttribut","xLink","referencedGradient","children","referenceClone","cloneNode","tagArray","getCSSRules","allRules","styleContents","ruleObj","propertyValuePairs","pair","_rule","findTag","ElementsParser","clipPaths","regexUrl","gradientDefs","elList","getGradientDefs","createObject","resolveGradient","resolveClipPath","extractPropertyDefinition","storage","gradientDef","usingElement","exactOwner","clipPathElements","objTransformInv","clipPathTag","clipPathOwner","clipPathElement","enlivedClippath","clipRule","gTransform","isValidSvgTag","createEmptyResponse","allElements","async","parseSVGDocument","nodelist","skipAttributes","useElement","useAttributes","useAttrMap","xlink","href","referencedElement","clonedOriginal","originalAttributes","originalAttrMap","currentTrans","el3","setAttributeNS","childNodes","styleRecord","mergedStyles","entry","parseUseDirectives","descendants","hasInvalidAncestor","localClipPaths","elementParser","loadSVGFromString","parseFromString","loadSVGFromURL","xml","responseXML","parsedDoc","ACTION_NAME","createPolyPositionHandler","pointIndex","polyObject","polyActionHandler","poly","mouseLocalPosition","factoryPolyActionHandler","anchorPoint","anchorPointInParentPlane","createPolyActionHandler","calcPathPointPosition","pathObject","commandIndex","pathPositionHandler","pathActionHandler","movePathPoint","anchorCommand","PathPointControl","controlFill","controlStroke","PathControlPointControl","connectToCommandIndex","connectToPointIndex","connectionDashArray","commandType","createControl","commandIndexPos","pointIndexPos","isControlPoint","controlPointStyle","pointStyle","previousCommandType","indexFromPrevCommand","isWebGLPipelineState","isPutImageFaster","testContext","ArrayBuffer","testPipelineState","performance","now","drawImageTime","highPsourceCode","identityFragmentShader","BaseFilter","getFragmentSource","getVertexSource","createProgram","vertexSource","vertexShader","VERTEX_SHADER","program","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","attributeLocations","getAttributeLocations","getAttribLocation","locations","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","finish","_swapTextures","temp","applyToWebGL","applyTo2d","getCacheKey","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","_gl","_uniformLocations","createHelpLayer","helpLayer","defaultKeys","blendColorFragmentSource","screen","difference","lighten","darken","exclusion","tint","BlendColor","mode","tg","alpha1","oR","oG","oB","uniform4fv","uColor","mask","BlendImage","image","TEXTURE1","calculateMatrix","resources","blendImage","canvas1","blendData","uniform1i","uImage","uniformMatrix3fv","uTransformMatrix","filterOptions","enlivedImage","Blur","aspectRatio","horizontal","blurValue","getBlurValue","samples","bytesInRow","totalA","minIRow","maxIRow","percent","weight","sampledPixel","localAlpha","delta","chooseRightDelta","uniform2fv","uDelta","blurScale","Brightness","brightness","uBrightness","colorMatrixDefaultValues","colorsOnly","ColorMatrix","constants","uniformMatrix4fv","uColorMatrix","uConstants","createColorMatrixFilter","_Class","newClass","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","Composed","subFilters","enlivedFilters","Contrast","contrast","contrastF","uContrast","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","Convolute","opaque","weights","side","halfSide","sw","sh","createImageData","dst","alphaFac","dstOff","scx","scy","srcOff","wt","uniform1fv","uMatrix","GAMMA","Gamma","gamma","rInv","gInv","bInv","rgbValues","rgb","uniform3fv","uGamma","lightness","luminosity","Grayscale","uMode","hueRotationDefaultValues","rotation","HueRotation","cosine","sine","aThird","aThirdSqtSin","OneMinusCos","Invert","invert","uInvert","uAlpha","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","uBlocksize","RemoveColor","lowC","highC","uLow","uHigh","useAlpha","Resize","uTaps","taps","getFilterWindow","tempScale","lanczosLobes","filterWindow","generateShader","getTaps","lobeFunction","lanczosCreate","applyToForWebgl","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","oW","oH","newData","resizeType","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","mult","doneW","doneH","stepW","stepH","dX","dY","tmpCanvas","srcData","destImg","destData","lanczos","ratioX","ratioY","rcpRatioX","rcpRatioY","range2X","range2Y","cacheLanc","icenter","process","u","fX","fY","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","yy","w0","Saturation","adjust","saturation","uSaturation","Vibrance","vibrance","amt","uVibrance"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211],"debugId":null}}]
}